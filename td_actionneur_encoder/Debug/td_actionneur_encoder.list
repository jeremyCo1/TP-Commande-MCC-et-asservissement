
td_actionneur_encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dc4  08004dc4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dcc  08004dcc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dcc  08004dcc  00014dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dd0  08004dd0  00014dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000070  08004e44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08004e44  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013edd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002827  00000000  00000000  00033f7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  000367a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00037850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6bf  00000000  00000000  000387f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bca  00000000  00000000  00057eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6c6d  00000000  00000000  00069a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001306e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d7c  00000000  00000000  0013073c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004cb0 	.word	0x08004cb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08004cb0 	.word	0x08004cb0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b2b      	ldr	r3, [pc, #172]	; (800067c <MX_GPIO_Init+0xc4>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	4a2a      	ldr	r2, [pc, #168]	; (800067c <MX_GPIO_Init+0xc4>)
 80005d4:	f043 0304 	orr.w	r3, r3, #4
 80005d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005da:	4b28      	ldr	r3, [pc, #160]	; (800067c <MX_GPIO_Init+0xc4>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	f003 0304 	and.w	r3, r3, #4
 80005e2:	613b      	str	r3, [r7, #16]
 80005e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b25      	ldr	r3, [pc, #148]	; (800067c <MX_GPIO_Init+0xc4>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a24      	ldr	r2, [pc, #144]	; (800067c <MX_GPIO_Init+0xc4>)
 80005ec:	f043 0320 	orr.w	r3, r3, #32
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b22      	ldr	r3, [pc, #136]	; (800067c <MX_GPIO_Init+0xc4>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f003 0320 	and.w	r3, r3, #32
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <MX_GPIO_Init+0xc4>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_GPIO_Init+0xc4>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b1c      	ldr	r3, [pc, #112]	; (800067c <MX_GPIO_Init+0xc4>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <MX_GPIO_Init+0xc4>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	4a18      	ldr	r2, [pc, #96]	; (800067c <MX_GPIO_Init+0xc4>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <MX_GPIO_Init+0xc4>)
 8000624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2120      	movs	r1, #32
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f000 feab 	bl	8001390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800063a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_GPIO_Init+0xc8>)
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_GPIO_Init+0xcc>)
 8000650:	f000 fd1c 	bl	800108c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000654:	2320      	movs	r3, #32
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fd0d 	bl	800108c <HAL_GPIO_Init>

}
 8000672:	bf00      	nop
 8000674:	3728      	adds	r7, #40	; 0x28
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000
 8000680:	10110000 	.word	0x10110000
 8000684:	48000800 	.word	0x48000800

08000688 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800068c:	f000 fb7d 	bl	8000d8a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000690:	f000 f81a 	bl	80006c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000694:	f7ff ff90 	bl	80005b8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8000698:	f000 f9b6 	bl	8000a08 <MX_TIM2_Init>
	MX_TIM3_Init();
 800069c:	f000 fa08 	bl	8000ab0 <MX_TIM3_Init>
	MX_USART2_UART_Init();
 80006a0:	f000 fabc 	bl	8000c1c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 80006a4:	4805      	ldr	r0, [pc, #20]	; (80006bc <main+0x34>)
 80006a6:	f001 febb 	bl	8002420 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80006aa:	213c      	movs	r1, #60	; 0x3c
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0x38>)
 80006ae:	f001 ffc7 	bl	8002640 <HAL_TIM_Encoder_Start>
	//HAL_TIM_Encoder_Init(&htim2, sConfig)

	printf("\r\n TD ACTIONNEUR \r\n");
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <main+0x3c>)
 80006b4:	f003 fbb6 	bl	8003e24 <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x30>
 80006ba:	bf00      	nop
 80006bc:	20000098 	.word	0x20000098
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	08004cc8 	.word	0x08004cc8

080006c8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b0a4      	sub	sp, #144	; 0x90
 80006cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006d2:	2238      	movs	r2, #56	; 0x38
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fb16 	bl	8003d08 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ec:	463b      	mov	r3, r7
 80006ee:	2244      	movs	r2, #68	; 0x44
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 fb08 	bl	8003d08 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f000 fe61 	bl	80013c0 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fe:	2302      	movs	r3, #2
 8000700:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000702:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000706:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2340      	movs	r3, #64	; 0x40
 800070a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000718:	2355      	movs	r3, #85	; 0x55
 800071a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fef7 	bl	8001528 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x7c>
	{
		Error_Handler();
 8000740:	f000 f83c 	bl	80007bc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	647b      	str	r3, [r7, #68]	; 0x44
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2303      	movs	r3, #3
 800074a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	657b      	str	r3, [r7, #84]	; 0x54

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800075c:	2104      	movs	r1, #4
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f9fa 	bl	8001b58 <HAL_RCC_ClockConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800076a:	f000 f827 	bl	80007bc <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800076e:	2302      	movs	r3, #2
 8000770:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fc09 	bl	8001f90 <HAL_RCCEx_PeriphCLKConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8000784:	f000 f81a 	bl	80007bc <Error_Handler>
	}
}
 8000788:	bf00      	nop
 800078a:	3790      	adds	r7, #144	; 0x90
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	// Se declenche toutes les secondes
	if(htim->Instance){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d006      	beq.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x1e>
		printf("CNT : %ld \r\n",TIM2->CNT);
 80007a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	4803      	ldr	r0, [pc, #12]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007aa:	f003 fab5 	bl	8003d18 <iprintf>
	}
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	08004cdc 	.word	0x08004cdc

080007bc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b0f      	ldr	r3, [pc, #60]	; (800080c <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	4a0e      	ldr	r2, [pc, #56]	; (800080c <HAL_MspInit+0x44>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6613      	str	r3, [r2, #96]	; 0x60
 80007da:	4b0c      	ldr	r3, [pc, #48]	; (800080c <HAL_MspInit+0x44>)
 80007dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b09      	ldr	r3, [pc, #36]	; (800080c <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_MspInit+0x44>)
 80007ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f0:	6593      	str	r3, [r2, #88]	; 0x58
 80007f2:	4b06      	ldr	r3, [pc, #24]	; (800080c <HAL_MspInit+0x44>)
 80007f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007fe:	f000 fe83 	bl	8001508 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000818:	1d39      	adds	r1, r7, #4
 800081a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800081e:	2201      	movs	r2, #1
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <__io_putchar+0x20>)
 8000822:	f002 fca3 	bl	800316c <HAL_UART_Transmit>

  return ch;
 8000826:	687b      	ldr	r3, [r7, #4]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000130 	.word	0x20000130

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <NMI_Handler+0x4>

0800083a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler+0x4>

08000840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000844:	e7fe      	b.n	8000844 <MemManage_Handler+0x4>

08000846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084a:	e7fe      	b.n	800084a <BusFault_Handler+0x4>

0800084c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <UsageFault_Handler+0x4>

08000852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000880:	f000 fad6 	bl	8000e30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}

08000888 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800088c:	4802      	ldr	r0, [pc, #8]	; (8000898 <TIM3_IRQHandler+0x10>)
 800088e:	f001 ff65 	bl	800275c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000098 	.word	0x20000098

0800089c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00a      	b.n	80008c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ae:	f3af 8000 	nop.w
 80008b2:	4601      	mov	r1, r0
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	1c5a      	adds	r2, r3, #1
 80008b8:	60ba      	str	r2, [r7, #8]
 80008ba:	b2ca      	uxtb	r2, r1
 80008bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	3301      	adds	r3, #1
 80008c2:	617b      	str	r3, [r7, #20]
 80008c4:	697a      	ldr	r2, [r7, #20]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dbf0      	blt.n	80008ae <_read+0x12>
	}

return len;
 80008cc:	687b      	ldr	r3, [r7, #4]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3718      	adds	r7, #24
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}

080008d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008d6:	b580      	push	{r7, lr}
 80008d8:	b086      	sub	sp, #24
 80008da:	af00      	add	r7, sp, #0
 80008dc:	60f8      	str	r0, [r7, #12]
 80008de:	60b9      	str	r1, [r7, #8]
 80008e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	e009      	b.n	80008fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	1c5a      	adds	r2, r3, #1
 80008ec:	60ba      	str	r2, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff8d 	bl	8000810 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f6:	697b      	ldr	r3, [r7, #20]
 80008f8:	3301      	adds	r3, #1
 80008fa:	617b      	str	r3, [r7, #20]
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	dbf1      	blt.n	80008e8 <_write+0x12>
	}
	return len;
 8000904:	687b      	ldr	r3, [r7, #4]
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <_close>:

int _close(int file)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	return -1;
 8000916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000926:	b480      	push	{r7}
 8000928:	b083      	sub	sp, #12
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000936:	605a      	str	r2, [r3, #4]
	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <_isatty>:

int _isatty(int file)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	return 1;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
	return 0;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	3714      	adds	r7, #20
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
	...

08000978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000980:	4a14      	ldr	r2, [pc, #80]	; (80009d4 <_sbrk+0x5c>)
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <_sbrk+0x60>)
 8000984:	1ad3      	subs	r3, r2, r3
 8000986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d102      	bne.n	800099a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000994:	4b11      	ldr	r3, [pc, #68]	; (80009dc <_sbrk+0x64>)
 8000996:	4a12      	ldr	r2, [pc, #72]	; (80009e0 <_sbrk+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <_sbrk+0x64>)
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4413      	add	r3, r2
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d207      	bcs.n	80009b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009a8:	f003 f984 	bl	8003cb4 <__errno>
 80009ac:	4603      	mov	r3, r0
 80009ae:	220c      	movs	r2, #12
 80009b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	e009      	b.n	80009cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <_sbrk+0x64>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <_sbrk+0x64>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4413      	add	r3, r2
 80009c6:	4a05      	ldr	r2, [pc, #20]	; (80009dc <_sbrk+0x64>)
 80009c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009ca:	68fb      	ldr	r3, [r7, #12]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3718      	adds	r7, #24
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	20008000 	.word	0x20008000
 80009d8:	00000400 	.word	0x00000400
 80009dc:	2000008c 	.word	0x2000008c
 80009e0:	200001d8 	.word	0x200001d8

080009e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <SystemInit+0x20>)
 80009ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ee:	4a05      	ldr	r2, [pc, #20]	; (8000a04 <SystemInit+0x20>)
 80009f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	; 0x30
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2224      	movs	r2, #36	; 0x24
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 f976 	bl	8003d08 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a2e:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a34:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a56:	2301      	movs	r3, #1
 8000a58:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a66:	2301      	movs	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	4619      	mov	r1, r3
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a7a:	f001 fd3b 	bl	80024f4 <HAL_TIM_Encoder_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a84:	f7ff fe9a 	bl	80007bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a90:	463b      	mov	r3, r7
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_TIM2_Init+0xa4>)
 8000a96:	f002 fa51 	bl	8002f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000aa0:	f7ff fe8c 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3730      	adds	r7, #48	; 0x30
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200000e4 	.word	0x200000e4

08000ab0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b088      	sub	sp, #32
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab6:	f107 0310 	add.w	r3, r7, #16
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000ad0:	4a1e      	ldr	r2, [pc, #120]	; (8000b4c <MX_TIM3_Init+0x9c>)
 8000ad2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2594-1;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000ad6:	f640 2221 	movw	r2, #2593	; 0xa21
 8000ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b1a      	ldr	r3, [pc, #104]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ae8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aea:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af6:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000af8:	f001 fc3a 	bl	8002370 <HAL_TIM_Base_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000b02:	f7ff fe5b 	bl	80007bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	480d      	ldr	r0, [pc, #52]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000b14:	f001 ffa2 	bl	8002a5c <HAL_TIM_ConfigClockSource>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8000b1e:	f7ff fe4d 	bl	80007bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_TIM3_Init+0x98>)
 8000b30:	f002 fa04 	bl	8002f3c <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8000b3a:	f7ff fe3f 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3720      	adds	r7, #32
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000098 	.word	0x20000098
 8000b4c:	40000400 	.word	0x40000400

08000b50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	; 0x28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b70:	d128      	bne.n	8000bc4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b72:	4b16      	ldr	r3, [pc, #88]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7e:	4b13      	ldr	r3, [pc, #76]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b10      	ldr	r3, [pc, #64]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b0d      	ldr	r3, [pc, #52]	; (8000bcc <HAL_TIM_Encoder_MspInit+0x7c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc0:	f000 fa64 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	3728      	adds	r7, #40	; 0x28
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_TIM_Base_MspInit+0x44>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d113      	bne.n	8000c0a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be6:	4a0c      	ldr	r2, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6593      	str	r3, [r2, #88]	; 0x58
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_TIM_Base_MspInit+0x48>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	201d      	movs	r0, #29
 8000c00:	f000 fa0f 	bl	8001022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c04:	201d      	movs	r0, #29
 8000c06:	f000 fa26 	bl	8001056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40000400 	.word	0x40000400
 8000c18:	40021000 	.word	0x40021000

08000c1c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c22:	4a23      	ldr	r2, [pc, #140]	; (8000cb0 <MX_USART2_UART_Init+0x94>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c26:	4b21      	ldr	r3, [pc, #132]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b1d      	ldr	r3, [pc, #116]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b1a      	ldr	r3, [pc, #104]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b19      	ldr	r3, [pc, #100]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c52:	4b16      	ldr	r3, [pc, #88]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c58:	4b14      	ldr	r3, [pc, #80]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5e:	4b13      	ldr	r3, [pc, #76]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c64:	4811      	ldr	r0, [pc, #68]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c66:	f002 fa31 	bl	80030cc <HAL_UART_Init>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c70:	f7ff fda4 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c74:	2100      	movs	r1, #0
 8000c76:	480d      	ldr	r0, [pc, #52]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c78:	f002 ff52 	bl	8003b20 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c82:	f7ff fd9b 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c86:	2100      	movs	r1, #0
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c8a:	f002 ff87 	bl	8003b9c <HAL_UARTEx_SetRxFifoThreshold>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c94:	f7ff fd92 	bl	80007bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <MX_USART2_UART_Init+0x90>)
 8000c9a:	f002 ff08 	bl	8003aae <HAL_UARTEx_DisableFifoMode>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ca4:	f7ff fd8a 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000130 	.word	0x20000130
 8000cb0:	40004400 	.word	0x40004400

08000cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a17      	ldr	r2, [pc, #92]	; (8000d30 <HAL_UART_MspInit+0x7c>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d128      	bne.n	8000d28 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cd6:	4b17      	ldr	r3, [pc, #92]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cda:	4a16      	ldr	r2, [pc, #88]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce2:	4b14      	ldr	r3, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a10      	ldr	r2, [pc, #64]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	; (8000d34 <HAL_UART_MspInit+0x80>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	230c      	movs	r3, #12
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d16:	2307      	movs	r3, #7
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d24:	f000 f9b2 	bl	800108c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d28:	bf00      	nop
 8000d2a:	3728      	adds	r7, #40	; 0x28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40021000 	.word	0x40021000

08000d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d38:	480d      	ldr	r0, [pc, #52]	; (8000d70 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d3e:	490e      	ldr	r1, [pc, #56]	; (8000d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d40:	4a0e      	ldr	r2, [pc, #56]	; (8000d7c <LoopForever+0xe>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d54:	4c0b      	ldr	r4, [pc, #44]	; (8000d84 <LoopForever+0x16>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d62:	f7ff fe3f 	bl	80009e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d66:	f002 ffab 	bl	8003cc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d6a:	f7ff fc8d 	bl	8000688 <main>

08000d6e <LoopForever>:

LoopForever:
    b LoopForever
 8000d6e:	e7fe      	b.n	8000d6e <LoopForever>
  ldr   r0, =_estack
 8000d70:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d7c:	08004dd4 	.word	0x08004dd4
  ldr r2, =_sbss
 8000d80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d84:	200001d4 	.word	0x200001d4

08000d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d88:	e7fe      	b.n	8000d88 <ADC1_2_IRQHandler>

08000d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d94:	2003      	movs	r0, #3
 8000d96:	f000 f939 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f000 f80e 	bl	8000dbc <HAL_InitTick>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d002      	beq.n	8000dac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	71fb      	strb	r3, [r7, #7]
 8000daa:	e001      	b.n	8000db0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dac:	f7ff fd0c 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000db0:	79fb      	ldrb	r3, [r7, #7]

}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000dc8:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_InitTick+0x68>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d022      	beq.n	8000e16 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_InitTick+0x6c>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_InitTick+0x68>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ddc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de4:	4618      	mov	r0, r3
 8000de6:	f000 f944 	bl	8001072 <HAL_SYSTICK_Config>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10f      	bne.n	8000e10 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b0f      	cmp	r3, #15
 8000df4:	d809      	bhi.n	8000e0a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df6:	2200      	movs	r2, #0
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfe:	f000 f910 	bl	8001022 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_InitTick+0x70>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e004      	b.n	8000e1a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
 8000e14:	e001      	b.n	8000e1a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000008 	.word	0x20000008
 8000e28:	20000000 	.word	0x20000000
 8000e2c:	20000004 	.word	0x20000004

08000e30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <HAL_IncTick+0x20>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	4a03      	ldr	r2, [pc, #12]	; (8000e4c <HAL_IncTick+0x1c>)
 8000e40:	6013      	str	r3, [r2, #0]
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	200001c0 	.word	0x200001c0
 8000e50:	20000008 	.word	0x20000008

08000e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  return uwTick;
 8000e58:	4b03      	ldr	r3, [pc, #12]	; (8000e68 <HAL_GetTick+0x14>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	200001c0 	.word	0x200001c0

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	db0b      	blt.n	8000efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	f003 021f 	and.w	r2, r3, #31
 8000ee8:	4907      	ldr	r1, [pc, #28]	; (8000f08 <__NVIC_EnableIRQ+0x38>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	095b      	lsrs	r3, r3, #5
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff29 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001030:	f7ff ff40 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8001034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	68b9      	ldr	r1, [r7, #8]
 800103a:	6978      	ldr	r0, [r7, #20]
 800103c:	f7ff ff90 	bl	8000f60 <NVIC_EncodePriority>
 8001040:	4602      	mov	r2, r0
 8001042:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001046:	4611      	mov	r1, r2
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff5f 	bl	8000f0c <__NVIC_SetPriority>
}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff33 	bl	8000ed0 <__NVIC_EnableIRQ>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff ffa4 	bl	8000fc8 <SysTick_Config>
 8001080:	4603      	mov	r3, r0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800109a:	e15a      	b.n	8001352 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	2101      	movs	r1, #1
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 814c 	beq.w	800134c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d00b      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c8:	2b11      	cmp	r3, #17
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b12      	cmp	r3, #18
 80010d2:	d130      	bne.n	8001136 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800110a:	2201      	movs	r2, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	091b      	lsrs	r3, r3, #4
 8001120:	f003 0201 	and.w	r2, r3, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d003      	beq.n	8001176 <HAL_GPIO_Init+0xea>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b12      	cmp	r3, #18
 8001174:	d123      	bne.n	80011be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001182:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	220f      	movs	r2, #15
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f003 0307 	and.w	r3, r3, #7
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	08da      	lsrs	r2, r3, #3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3208      	adds	r2, #8
 80011b8:	6939      	ldr	r1, [r7, #16]
 80011ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 0203 	and.w	r2, r3, #3
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	f000 80a6 	beq.w	800134c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001200:	4b5b      	ldr	r3, [pc, #364]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001204:	4a5a      	ldr	r2, [pc, #360]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 8001206:	f043 0301 	orr.w	r3, r3, #1
 800120a:	6613      	str	r3, [r2, #96]	; 0x60
 800120c:	4b58      	ldr	r3, [pc, #352]	; (8001370 <HAL_GPIO_Init+0x2e4>)
 800120e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001210:	f003 0301 	and.w	r3, r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001218:	4a56      	ldr	r2, [pc, #344]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	089b      	lsrs	r3, r3, #2
 800121e:	3302      	adds	r3, #2
 8001220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001242:	d01f      	beq.n	8001284 <HAL_GPIO_Init+0x1f8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <HAL_GPIO_Init+0x2ec>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d019      	beq.n	8001280 <HAL_GPIO_Init+0x1f4>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4b      	ldr	r2, [pc, #300]	; (800137c <HAL_GPIO_Init+0x2f0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_GPIO_Init+0x1f0>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4a      	ldr	r2, [pc, #296]	; (8001380 <HAL_GPIO_Init+0x2f4>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d00d      	beq.n	8001278 <HAL_GPIO_Init+0x1ec>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a49      	ldr	r2, [pc, #292]	; (8001384 <HAL_GPIO_Init+0x2f8>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_GPIO_Init+0x1e8>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4a48      	ldr	r2, [pc, #288]	; (8001388 <HAL_GPIO_Init+0x2fc>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d101      	bne.n	8001270 <HAL_GPIO_Init+0x1e4>
 800126c:	2305      	movs	r3, #5
 800126e:	e00a      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001270:	2306      	movs	r3, #6
 8001272:	e008      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001274:	2304      	movs	r3, #4
 8001276:	e006      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001278:	2303      	movs	r3, #3
 800127a:	e004      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 800127c:	2302      	movs	r3, #2
 800127e:	e002      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <HAL_GPIO_Init+0x1fa>
 8001284:	2300      	movs	r3, #0
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	4313      	orrs	r3, r2
 8001294:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001296:	4937      	ldr	r1, [pc, #220]	; (8001374 <HAL_GPIO_Init+0x2e8>)
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <HAL_GPIO_Init+0x300>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c8:	4a30      	ldr	r2, [pc, #192]	; (800138c <HAL_GPIO_Init+0x300>)
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012ce:	4b2f      	ldr	r3, [pc, #188]	; (800138c <HAL_GPIO_Init+0x300>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012f2:	4a26      	ldr	r2, [pc, #152]	; (800138c <HAL_GPIO_Init+0x300>)
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <HAL_GPIO_Init+0x300>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	43db      	mvns	r3, r3
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4013      	ands	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001314:	693a      	ldr	r2, [r7, #16]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800131c:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_GPIO_Init+0x300>)
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001322:	4b1a      	ldr	r3, [pc, #104]	; (800138c <HAL_GPIO_Init+0x300>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	43db      	mvns	r3, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4013      	ands	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d003      	beq.n	8001346 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001346:	4a11      	ldr	r2, [pc, #68]	; (800138c <HAL_GPIO_Init+0x300>)
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	f47f ae9d 	bne.w	800109c <HAL_GPIO_Init+0x10>
  }
}
 8001362:	bf00      	nop
 8001364:	bf00      	nop
 8001366:	371c      	adds	r7, #28
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40021000 	.word	0x40021000
 8001374:	40010000 	.word	0x40010000
 8001378:	48000400 	.word	0x48000400
 800137c:	48000800 	.word	0x48000800
 8001380:	48000c00 	.word	0x48000c00
 8001384:	48001000 	.word	0x48001000
 8001388:	48001400 	.word	0x48001400
 800138c:	40010400 	.word	0x40010400

08001390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
 800139c:	4613      	mov	r3, r2
 800139e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a0:	787b      	ldrb	r3, [r7, #1]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013a6:	887a      	ldrh	r2, [r7, #2]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013ac:	e002      	b.n	80013b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d141      	bne.n	8001452 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013da:	d131      	bne.n	8001440 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013e2:	4a46      	ldr	r2, [pc, #280]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	4b43      	ldr	r3, [pc, #268]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013f4:	4a41      	ldr	r2, [pc, #260]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013fc:	4b40      	ldr	r3, [pc, #256]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2232      	movs	r2, #50	; 0x32
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9b      	lsrs	r3, r3, #18
 800140e:	3301      	adds	r3, #1
 8001410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001412:	e002      	b.n	800141a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3b01      	subs	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001426:	d102      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f2      	bne.n	8001414 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800142e:	4b33      	ldr	r3, [pc, #204]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800143a:	d158      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e057      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001440:	4b2e      	ldr	r3, [pc, #184]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001446:	4a2d      	ldr	r2, [pc, #180]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001448:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800144c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001450:	e04d      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d141      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800145a:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d131      	bne.n	80014cc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800146a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800146e:	4a23      	ldr	r2, [pc, #140]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001478:	4b20      	ldr	r3, [pc, #128]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001480:	4a1e      	ldr	r2, [pc, #120]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001488:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2232      	movs	r2, #50	; 0x32
 800148e:	fb02 f303 	mul.w	r3, r2, r3
 8001492:	4a1c      	ldr	r2, [pc, #112]	; (8001504 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001494:	fba2 2303 	umull	r2, r3, r2, r3
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	3301      	adds	r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800149e:	e002      	b.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b2:	d102      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0xfa>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f2      	bne.n	80014a0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	695b      	ldr	r3, [r3, #20]
 80014be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c6:	d112      	bne.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e011      	b.n	80014f0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014dc:	e007      	b.n	80014ee <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ec:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	40007000 	.word	0x40007000
 8001500:	20000000 	.word	0x20000000
 8001504:	431bde83 	.word	0x431bde83

08001508 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001516:	6093      	str	r3, [r2, #8]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40007000 	.word	0x40007000

08001528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e308      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d075      	beq.n	8001632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001546:	4ba3      	ldr	r3, [pc, #652]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001550:	4ba0      	ldr	r3, [pc, #640]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800155a:	69bb      	ldr	r3, [r7, #24]
 800155c:	2b0c      	cmp	r3, #12
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x3e>
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d002      	beq.n	800156c <HAL_RCC_OscConfig+0x44>
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	2b08      	cmp	r3, #8
 800156a:	d10b      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	4b99      	ldr	r3, [pc, #612]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d05b      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d157      	bne.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e2e3      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d106      	bne.n	800159c <HAL_RCC_OscConfig+0x74>
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a90      	ldr	r2, [pc, #576]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0x98>
 80015a6:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a8a      	ldr	r2, [pc, #552]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b88      	ldr	r3, [pc, #544]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a87      	ldr	r2, [pc, #540]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
 80015c0:	4b84      	ldr	r3, [pc, #528]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a83      	ldr	r2, [pc, #524]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b81      	ldr	r3, [pc, #516]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a80      	ldr	r2, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc38 	bl	8000e54 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fc34 	bl	8000e54 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	; 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e2a8      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xc0>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fc24 	bl	8000e54 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc20 	bl	8000e54 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	; 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e294      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001622:	4b6c      	ldr	r3, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0xe8>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d075      	beq.n	800172a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800163e:	4b65      	ldr	r3, [pc, #404]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001648:	4b62      	ldr	r3, [pc, #392]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d102      	bne.n	800165e <HAL_RCC_OscConfig+0x136>
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d002      	beq.n	8001664 <HAL_RCC_OscConfig+0x13c>
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	2b04      	cmp	r3, #4
 8001662:	d11f      	bne.n	80016a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001664:	4b5b      	ldr	r3, [pc, #364]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_RCC_OscConfig+0x154>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e267      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167c:	4b55      	ldr	r3, [pc, #340]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	4952      	ldr	r1, [pc, #328]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001690:	4b51      	ldr	r3, [pc, #324]	; (80017d8 <HAL_RCC_OscConfig+0x2b0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff fb91 	bl	8000dbc <HAL_InitTick>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d043      	beq.n	8001728 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e253      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d023      	beq.n	80016f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ac:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a48      	ldr	r2, [pc, #288]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbcc 	bl	8000e54 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fbc8 	bl	8000e54 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e23c      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016d2:	4b40      	ldr	r3, [pc, #256]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f0      	beq.n	80016c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016de:	4b3d      	ldr	r3, [pc, #244]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	061b      	lsls	r3, r3, #24
 80016ec:	4939      	ldr	r1, [pc, #228]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	604b      	str	r3, [r1, #4]
 80016f2:	e01a      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a36      	ldr	r2, [pc, #216]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fba8 	bl	8000e54 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001708:	f7ff fba4 	bl	8000e54 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e218      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800171a:	4b2e      	ldr	r3, [pc, #184]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x1e0>
 8001726:	e000      	b.n	800172a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001728:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	2b00      	cmp	r3, #0
 8001734:	d03c      	beq.n	80017b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d01c      	beq.n	8001778 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb81 	bl	8000e54 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7ff fb7d 	bl	8000e54 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e1f1      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800176a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0ef      	beq.n	8001756 <HAL_RCC_OscConfig+0x22e>
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 800177a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177e:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001788:	f7ff fb64 	bl	8000e54 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fb60 	bl	8000e54 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e1d4      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017a2:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ef      	bne.n	8001790 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80ab 	beq.w	8001914 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80017c2:	4b04      	ldr	r3, [pc, #16]	; (80017d4 <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x2b4>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e005      	b.n	80017de <HAL_RCC_OscConfig+0x2b6>
 80017d2:	bf00      	nop
 80017d4:	40021000 	.word	0x40021000
 80017d8:	20000004 	.word	0x20000004
 80017dc:	2300      	movs	r3, #0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00d      	beq.n	80017fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	4baf      	ldr	r3, [pc, #700]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80017e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e6:	4aae      	ldr	r2, [pc, #696]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
 80017ee:	4bac      	ldr	r3, [pc, #688]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fe:	4ba9      	ldr	r3, [pc, #676]	; (8001aa4 <HAL_RCC_OscConfig+0x57c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001806:	2b00      	cmp	r3, #0
 8001808:	d118      	bne.n	800183c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800180a:	4ba6      	ldr	r3, [pc, #664]	; (8001aa4 <HAL_RCC_OscConfig+0x57c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4aa5      	ldr	r2, [pc, #660]	; (8001aa4 <HAL_RCC_OscConfig+0x57c>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001816:	f7ff fb1d 	bl	8000e54 <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fb19 	bl	8000e54 <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e18d      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <HAL_RCC_OscConfig+0x57c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001838:	2b00      	cmp	r3, #0
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_RCC_OscConfig+0x32e>
 8001844:	4b96      	ldr	r3, [pc, #600]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184a:	4a95      	ldr	r2, [pc, #596]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001854:	e024      	b.n	80018a0 <HAL_RCC_OscConfig+0x378>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b05      	cmp	r3, #5
 800185c:	d110      	bne.n	8001880 <HAL_RCC_OscConfig+0x358>
 800185e:	4b90      	ldr	r3, [pc, #576]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a8e      	ldr	r2, [pc, #568]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001866:	f043 0304 	orr.w	r3, r3, #4
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	4b8c      	ldr	r3, [pc, #560]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	4a8a      	ldr	r2, [pc, #552]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x378>
 8001880:	4b87      	ldr	r3, [pc, #540]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a86      	ldr	r2, [pc, #536]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	4b83      	ldr	r3, [pc, #524]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a82      	ldr	r2, [pc, #520]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d016      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff fad4 	bl	8000e54 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fad0 	bl	8000e54 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e142      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c6:	4b76      	ldr	r3, [pc, #472]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ed      	beq.n	80018b0 <HAL_RCC_OscConfig+0x388>
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fabd 	bl	8000e54 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fab9 	bl	8000e54 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e12b      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f4:	4b6a      	ldr	r3, [pc, #424]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ed      	bne.n	80018de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b65      	ldr	r3, [pc, #404]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a64      	ldr	r2, [pc, #400]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	4a5c      	ldr	r2, [pc, #368]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa8c 	bl	8000e54 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001940:	f7ff fa88 	bl	8000e54 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e0fc      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001952:	4b53      	ldr	r3, [pc, #332]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x418>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001962:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	4a4d      	ldr	r2, [pc, #308]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff fa6f 	bl	8000e54 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff fa6b 	bl	8000e54 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0df      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 800198e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80d3 	beq.w	8001b4a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019a4:	4b3e      	ldr	r3, [pc, #248]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b0c      	cmp	r3, #12
 80019ae:	f000 808d 	beq.w	8001acc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d15a      	bne.n	8001a70 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b39      	ldr	r3, [pc, #228]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a38      	ldr	r2, [pc, #224]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c6:	f7ff fa45 	bl	8000e54 <HAL_GetTick>
 80019ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019cc:	e008      	b.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ce:	f7ff fa41 	bl	8000e54 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0b5      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e0:	4b2f      	ldr	r3, [pc, #188]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d1f0      	bne.n	80019ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ec:	4b2c      	ldr	r3, [pc, #176]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 80019ee:	68da      	ldr	r2, [r3, #12]
 80019f0:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_OscConfig+0x580>)
 80019f2:	4013      	ands	r3, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6a11      	ldr	r1, [r2, #32]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019fc:	3a01      	subs	r2, #1
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	4311      	orrs	r1, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001a06:	0212      	lsls	r2, r2, #8
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a0e:	0852      	lsrs	r2, r2, #1
 8001a10:	3a01      	subs	r2, #1
 8001a12:	0552      	lsls	r2, r2, #21
 8001a14:	4311      	orrs	r1, r2
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a1a:	0852      	lsrs	r2, r2, #1
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	0652      	lsls	r2, r2, #25
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a26:	06d2      	lsls	r2, r2, #27
 8001a28:	430a      	orrs	r2, r1
 8001a2a:	491d      	ldr	r1, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1a      	ldr	r2, [pc, #104]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a46:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fa04 	bl	8000e54 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fa00 	bl	8000e54 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e074      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x528>
 8001a6e:	e06c      	b.n	8001b4a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a82:	f023 0303 	bic.w	r3, r3, #3
 8001a86:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a88:	4b05      	ldr	r3, [pc, #20]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a04      	ldr	r2, [pc, #16]	; (8001aa0 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a98:	f7ff f9dc 	bl	8000e54 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9e:	e00e      	b.n	8001abe <HAL_RCC_OscConfig+0x596>
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff f9d2 	bl	8000e54 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e046      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001abe:	4b25      	ldr	r3, [pc, #148]	; (8001b54 <HAL_RCC_OscConfig+0x62c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x584>
 8001aca:	e03e      	b.n	8001b4a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e039      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001ad8:	4b1e      	ldr	r3, [pc, #120]	; (8001b54 <HAL_RCC_OscConfig+0x62c>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0203 	and.w	r2, r3, #3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d12c      	bne.n	8001b46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af6:	3b01      	subs	r3, #1
 8001af8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d123      	bne.n	8001b46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d11b      	bne.n	8001b46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d113      	bne.n	8001b46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b28:	085b      	lsrs	r3, r3, #1
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d109      	bne.n	8001b46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b3c:	085b      	lsrs	r3, r3, #1
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	40021000 	.word	0x40021000

08001b58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b086      	sub	sp, #24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e11e      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b91      	ldr	r3, [pc, #580]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b8e      	ldr	r3, [pc, #568]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	498c      	ldr	r1, [pc, #560]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b8a      	ldr	r3, [pc, #552]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e106      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d073      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d129      	bne.n	8001c08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb4:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0f4      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001bc4:	f000 f99e 	bl	8001f04 <RCC_GetSysClockFreqFromPLLSource>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4a7c      	ldr	r2, [pc, #496]	; (8001dc0 <HAL_RCC_ClockConfig+0x268>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d93f      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d033      	beq.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d12f      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bfa:	4a70      	ldr	r2, [pc, #448]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e024      	b.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d107      	bne.n	8001c20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d109      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0c6      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0be      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001c30:	f000 f8ce 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4a61      	ldr	r2, [pc, #388]	; (8001dc0 <HAL_RCC_ClockConfig+0x268>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d909      	bls.n	8001c52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c46:	4a5d      	ldr	r2, [pc, #372]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c4e:	2380      	movs	r3, #128	; 0x80
 8001c50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b5a      	ldr	r3, [pc, #360]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4957      	ldr	r1, [pc, #348]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c64:	f7ff f8f6 	bl	8000e54 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f8f2 	bl	8000e54 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e095      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0304 	and.w	r3, r3, #4
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4936      	ldr	r1, [pc, #216]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b80      	cmp	r3, #128	; 0x80
 8001cec:	d105      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001cee:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001cf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d21d      	bcs.n	8001d44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f023 020f 	bic.w	r2, r3, #15
 8001d10:	4929      	ldr	r1, [pc, #164]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d18:	f7ff f89c 	bl	8000e54 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7ff f898 	bl	8000e54 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e03b      	b.n	8001dae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d36:	4b20      	ldr	r3, [pc, #128]	; (8001db8 <HAL_RCC_ClockConfig+0x260>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1ed      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d008      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4917      	ldr	r1, [pc, #92]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d009      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6e:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	490f      	ldr	r1, [pc, #60]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d82:	f000 f825 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <HAL_RCC_ClockConfig+0x264>)
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	490c      	ldr	r1, [pc, #48]	; (8001dc4 <HAL_RCC_ClockConfig+0x26c>)
 8001d94:	5ccb      	ldrb	r3, [r1, r3]
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x270>)
 8001da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_ClockConfig+0x274>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff f808 	bl	8000dbc <HAL_InitTick>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	04c4b400 	.word	0x04c4b400
 8001dc4:	08004cec 	.word	0x08004cec
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001dd6:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de2:	4b2a      	ldr	r3, [pc, #168]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e047      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de8:	4b27      	ldr	r3, [pc, #156]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e03e      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d136      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e06:	4b20      	ldr	r3, [pc, #128]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e10:	4b1d      	ldr	r3, [pc, #116]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e24:	4a1a      	ldr	r2, [pc, #104]	; (8001e90 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2e:	68d2      	ldr	r2, [r2, #12]
 8001e30:	0a12      	lsrs	r2, r2, #8
 8001e32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	617b      	str	r3, [r7, #20]
      break;
 8001e3c:	e00c      	b.n	8001e58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e3e:	4a13      	ldr	r2, [pc, #76]	; (8001e8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e48:	68d2      	ldr	r2, [r2, #12]
 8001e4a:	0a12      	lsrs	r2, r2, #8
 8001e4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	617b      	str	r3, [r7, #20]
      break;
 8001e56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0e5b      	lsrs	r3, r3, #25
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	3301      	adds	r3, #1
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	e001      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e74:	2300      	movs	r3, #0
 8001e76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e78:	693b      	ldr	r3, [r7, #16]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	371c      	adds	r7, #28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	016e3600 	.word	0x016e3600

08001e94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e98:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001eb0:	f7ff fff0 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4904      	ldr	r1, [pc, #16]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	08004cfc 	.word	0x08004cfc

08001ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001edc:	f7ff ffda 	bl	8001e94 <HAL_RCC_GetHCLKFreq>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0adb      	lsrs	r3, r3, #11
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	4904      	ldr	r1, [pc, #16]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eee:	5ccb      	ldrb	r3, [r1, r3]
 8001ef0:	f003 031f 	and.w	r3, r3, #31
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	08004cfc 	.word	0x08004cfc

08001f04 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0a:	4b1e      	ldr	r3, [pc, #120]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f14:	4b1b      	ldr	r3, [pc, #108]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	3301      	adds	r3, #1
 8001f20:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b03      	cmp	r3, #3
 8001f26:	d10c      	bne.n	8001f42 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f28:	4a17      	ldr	r2, [pc, #92]	; (8001f88 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f30:	4a14      	ldr	r2, [pc, #80]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	0a12      	lsrs	r2, r2, #8
 8001f36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f3a:	fb02 f303 	mul.w	r3, r2, r3
 8001f3e:	617b      	str	r3, [r7, #20]
    break;
 8001f40:	e00c      	b.n	8001f5c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f4c:	68d2      	ldr	r2, [r2, #12]
 8001f4e:	0a12      	lsrs	r2, r2, #8
 8001f50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f54:	fb02 f303 	mul.w	r3, r2, r3
 8001f58:	617b      	str	r3, [r7, #20]
    break;
 8001f5a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0e5b      	lsrs	r3, r3, #25
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f76:	687b      	ldr	r3, [r7, #4]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40021000 	.word	0x40021000
 8001f88:	016e3600 	.word	0x016e3600
 8001f8c:	00f42400 	.word	0x00f42400

08001f90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f98:	2300      	movs	r3, #0
 8001f9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8098 	beq.w	80020de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b43      	ldr	r3, [pc, #268]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10d      	bne.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	4b40      	ldr	r3, [pc, #256]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fca:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a39      	ldr	r2, [pc, #228]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fe6:	f7fe ff35 	bl	8000e54 <HAL_GetTick>
 8001fea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fec:	e009      	b.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7fe ff31 	bl	8000e54 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d902      	bls.n	8002002 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8002000:	e005      	b.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002002:	4b30      	ldr	r3, [pc, #192]	; (80020c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0ef      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800200e:	7cfb      	ldrb	r3, [r7, #19]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d159      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002014:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800201e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d01e      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	429a      	cmp	r2, r3
 800202e:	d019      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800204c:	4b1c      	ldr	r3, [pc, #112]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800204e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002052:	4a1b      	ldr	r2, [pc, #108]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800206e:	f7fe fef1 	bl	8000e54 <HAL_GetTick>
 8002072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002074:	e00b      	b.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe feed 	bl	8000e54 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	f241 3288 	movw	r2, #5000	; 0x1388
 8002084:	4293      	cmp	r3, r2
 8002086:	d902      	bls.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	74fb      	strb	r3, [r7, #19]
            break;
 800208c:	e006      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0ec      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10b      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a2:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020b8:	e008      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020ba:	7cfb      	ldrb	r3, [r7, #19]
 80020bc:	74bb      	strb	r3, [r7, #18]
 80020be:	e005      	b.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020c8:	7cfb      	ldrb	r3, [r7, #19]
 80020ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020cc:	7c7b      	ldrb	r3, [r7, #17]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d105      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d2:	4ba6      	ldr	r3, [pc, #664]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d6:	4aa5      	ldr	r2, [pc, #660]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00a      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ea:	4ba0      	ldr	r3, [pc, #640]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f023 0203 	bic.w	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	499c      	ldr	r1, [pc, #624]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00a      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800210c:	4b97      	ldr	r3, [pc, #604]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002112:	f023 020c 	bic.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4994      	ldr	r1, [pc, #592]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800212e:	4b8f      	ldr	r3, [pc, #572]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002134:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	498b      	ldr	r1, [pc, #556]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00a      	beq.n	8002166 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002150:	4b86      	ldr	r3, [pc, #536]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	4983      	ldr	r1, [pc, #524]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0320 	and.w	r3, r3, #32
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002172:	4b7e      	ldr	r3, [pc, #504]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
 8002180:	497a      	ldr	r1, [pc, #488]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002182:	4313      	orrs	r3, r2
 8002184:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002194:	4b75      	ldr	r3, [pc, #468]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800219a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	4972      	ldr	r1, [pc, #456]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00a      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021b6:	4b6d      	ldr	r3, [pc, #436]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69db      	ldr	r3, [r3, #28]
 80021c4:	4969      	ldr	r1, [pc, #420]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d00a      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021d8:	4b64      	ldr	r3, [pc, #400]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	4961      	ldr	r1, [pc, #388]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021e8:	4313      	orrs	r3, r2
 80021ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021fa:	4b5c      	ldr	r3, [pc, #368]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	4958      	ldr	r1, [pc, #352]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800221c:	4b53      	ldr	r3, [pc, #332]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	4950      	ldr	r1, [pc, #320]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800222c:	4313      	orrs	r3, r2
 800222e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800223a:	d105      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223c:	4b4b      	ldr	r3, [pc, #300]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a4a      	ldr	r2, [pc, #296]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002242:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002246:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002250:	2b00      	cmp	r3, #0
 8002252:	d015      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002254:	4b45      	ldr	r3, [pc, #276]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	4942      	ldr	r1, [pc, #264]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002272:	d105      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b3d      	ldr	r3, [pc, #244]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a3c      	ldr	r2, [pc, #240]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d015      	beq.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800228c:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	4934      	ldr	r1, [pc, #208]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022aa:	d105      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ac:	4b2f      	ldr	r3, [pc, #188]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a2e      	ldr	r2, [pc, #184]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d015      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c4:	4b29      	ldr	r3, [pc, #164]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	4926      	ldr	r1, [pc, #152]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022e2:	d105      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022e4:	4b21      	ldr	r3, [pc, #132]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a20      	ldr	r2, [pc, #128]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d015      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80022fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	4918      	ldr	r1, [pc, #96]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800231a:	d105      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800231c:	4b13      	ldr	r3, [pc, #76]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a12      	ldr	r2, [pc, #72]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002326:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d015      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	490a      	ldr	r1, [pc, #40]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002352:	d105      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002360:	7cbb      	ldrb	r3, [r7, #18]
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e049      	b.n	8002416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d106      	bne.n	800239c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7fe fc1a 	bl	8000bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3304      	adds	r3, #4
 80023ac:	4619      	mov	r1, r3
 80023ae:	4610      	mov	r0, r2
 80023b0:	f000 fc72 	bl	8002c98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e04a      	b.n	80024ce <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <HAL_TIM_Base_Start_IT+0xbc>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d018      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d013      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1d      	ldr	r2, [pc, #116]	; (80024e0 <HAL_TIM_Base_Start_IT+0xc0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x6c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d115      	bne.n	80024b8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d015      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024a4:	d011      	beq.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f042 0201 	orr.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024b6:	e008      	b.n	80024ca <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	e000      	b.n	80024cc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3714      	adds	r7, #20
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40000400 	.word	0x40000400
 80024e4:	40000800 	.word	0x40000800
 80024e8:	40013400 	.word	0x40013400
 80024ec:	40014000 	.word	0x40014000
 80024f0:	00010007 	.word	0x00010007

080024f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e097      	b.n	8002638 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe fb17 	bl	8000b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002538:	f023 0307 	bic.w	r3, r3, #7
 800253c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	3304      	adds	r3, #4
 8002546:	4619      	mov	r1, r3
 8002548:	4610      	mov	r0, r2
 800254a:	f000 fba5 	bl	8002c98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002576:	f023 0303 	bic.w	r3, r3, #3
 800257a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	4313      	orrs	r3, r2
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002594:	f023 030c 	bic.w	r3, r3, #12
 8002598:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68da      	ldr	r2, [r3, #12]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	4313      	orrs	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	011a      	lsls	r2, r3, #4
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	031b      	lsls	r3, r3, #12
 80025c4:	4313      	orrs	r3, r2
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80025d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80025da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	4313      	orrs	r3, r2
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3718      	adds	r7, #24
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002650:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002658:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002660:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002668:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d110      	bne.n	8002692 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002676:	7b7b      	ldrb	r3, [r7, #13]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d001      	beq.n	8002680 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e069      	b.n	8002754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2202      	movs	r2, #2
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	e031      	b.n	80026f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d110      	bne.n	80026ba <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d102      	bne.n	80026a4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800269e:	7b3b      	ldrb	r3, [r7, #12]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d001      	beq.n	80026a8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e055      	b.n	8002754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2202      	movs	r2, #2
 80026ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026b8:	e01d      	b.n	80026f6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d108      	bne.n	80026d2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d105      	bne.n	80026d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c6:	7b7b      	ldrb	r3, [r7, #13]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d102      	bne.n	80026d2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026cc:	7b3b      	ldrb	r3, [r7, #12]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03e      	b.n	8002754 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2202      	movs	r2, #2
 80026f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_TIM_Encoder_Start+0xc4>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	2b04      	cmp	r3, #4
 8002700:	d008      	beq.n	8002714 <HAL_TIM_Encoder_Start+0xd4>
 8002702:	e00f      	b.n	8002724 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2201      	movs	r2, #1
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fbef 	bl	8002ef0 <TIM_CCxChannelCmd>
      break;
 8002712:	e016      	b.n	8002742 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	2104      	movs	r1, #4
 800271c:	4618      	mov	r0, r3
 800271e:	f000 fbe7 	bl	8002ef0 <TIM_CCxChannelCmd>
      break;
 8002722:	e00e      	b.n	8002742 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	2100      	movs	r1, #0
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fbdf 	bl	8002ef0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2201      	movs	r2, #1
 8002738:	2104      	movs	r1, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fbd8 	bl	8002ef0 <TIM_CCxChannelCmd>
      break;
 8002740:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d122      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b02      	cmp	r3, #2
 800277e:	d11b      	bne.n	80027b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0202 	mvn.w	r2, #2
 8002788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa5c 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 fa4e 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa5f 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	2b04      	cmp	r3, #4
 80027c4:	d122      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d11b      	bne.n	800280c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0204 	mvn.w	r2, #4
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2202      	movs	r2, #2
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa32 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 fa24 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fa35 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b08      	cmp	r3, #8
 8002818:	d122      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	f003 0308 	and.w	r3, r3, #8
 8002824:	2b08      	cmp	r3, #8
 8002826:	d11b      	bne.n	8002860 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f06f 0208 	mvn.w	r2, #8
 8002830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2204      	movs	r2, #4
 8002836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f000 fa08 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 800284c:	e005      	b.n	800285a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f9fa 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fa0b 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b10      	cmp	r3, #16
 800286c:	d122      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b10      	cmp	r3, #16
 800287a:	d11b      	bne.n	80028b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0210 	mvn.w	r2, #16
 8002884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2208      	movs	r2, #8
 800288a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f9de 	bl	8002c5c <HAL_TIM_IC_CaptureCallback>
 80028a0:	e005      	b.n	80028ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f9d0 	bl	8002c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f9e1 	bl	8002c70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d10e      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0201 	mvn.w	r2, #1
 80028d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f7fd ff58 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f8:	2b80      	cmp	r3, #128	; 0x80
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fba4 	bl	8003054 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800291a:	d10e      	bne.n	800293a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002926:	2b80      	cmp	r3, #128	; 0x80
 8002928:	d107      	bne.n	800293a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fb97 	bl	8003068 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d10e      	bne.n	8002966 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002952:	2b40      	cmp	r3, #64	; 0x40
 8002954:	d107      	bne.n	8002966 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f98f 	bl	8002c84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b20      	cmp	r3, #32
 8002972:	d10e      	bne.n	8002992 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b20      	cmp	r3, #32
 8002980:	d107      	bne.n	8002992 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f06f 0220 	mvn.w	r2, #32
 800298a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 fb57 	bl	8003040 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800299c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029a0:	d10f      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b0:	d107      	bne.n	80029c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fb5d 	bl	800307c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d0:	d10f      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029e0:	d107      	bne.n	80029f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fb4f 	bl	8003090 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a00:	d10f      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a10:	d107      	bne.n	8002a22 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f000 fb41 	bl	80030a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a30:	d10f      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a40:	d107      	bne.n	8002a52 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fb33 	bl	80030b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_TIM_ConfigClockSource+0x18>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e0dd      	b.n	8002c30 <HAL_TIM_ConfigClockSource+0x1d4>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002a92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a62      	ldr	r2, [pc, #392]	; (8002c38 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	f000 80a9 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ab4:	4a60      	ldr	r2, [pc, #384]	; (8002c38 <HAL_TIM_ConfigClockSource+0x1dc>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f200 80ae 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002abc:	4a5f      	ldr	r2, [pc, #380]	; (8002c3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	f000 80a1 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_TIM_ConfigClockSource+0x1e0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	f200 80a6 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002acc:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	f000 8099 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ad4:	4a5a      	ldr	r2, [pc, #360]	; (8002c40 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	f200 809e 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002adc:	4a59      	ldr	r2, [pc, #356]	; (8002c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	f000 8091 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002ae4:	4a57      	ldr	r2, [pc, #348]	; (8002c44 <HAL_TIM_ConfigClockSource+0x1e8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	f200 8096 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002aec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002af0:	f000 8089 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002af4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002af8:	f200 808e 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002afc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b00:	d03e      	beq.n	8002b80 <HAL_TIM_ConfigClockSource+0x124>
 8002b02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b06:	f200 8087 	bhi.w	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	f000 8085 	beq.w	8002c1c <HAL_TIM_ConfigClockSource+0x1c0>
 8002b12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b16:	d87f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b18:	2b70      	cmp	r3, #112	; 0x70
 8002b1a:	d01a      	beq.n	8002b52 <HAL_TIM_ConfigClockSource+0xf6>
 8002b1c:	2b70      	cmp	r3, #112	; 0x70
 8002b1e:	d87b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b20:	2b60      	cmp	r3, #96	; 0x60
 8002b22:	d050      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x16a>
 8002b24:	2b60      	cmp	r3, #96	; 0x60
 8002b26:	d877      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b28:	2b50      	cmp	r3, #80	; 0x50
 8002b2a:	d03c      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x14a>
 8002b2c:	2b50      	cmp	r3, #80	; 0x50
 8002b2e:	d873      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b30:	2b40      	cmp	r3, #64	; 0x40
 8002b32:	d058      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x18a>
 8002b34:	2b40      	cmp	r3, #64	; 0x40
 8002b36:	d86f      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b38:	2b30      	cmp	r3, #48	; 0x30
 8002b3a:	d064      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002b3c:	2b30      	cmp	r3, #48	; 0x30
 8002b3e:	d86b      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d060      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002b44:	2b20      	cmp	r3, #32
 8002b46:	d867      	bhi.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05c      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
 8002b4c:	2b10      	cmp	r3, #16
 8002b4e:	d05a      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b50:	e062      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	6899      	ldr	r1, [r3, #8]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f000 f9a5 	bl	8002eb0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b74:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	609a      	str	r2, [r3, #8]
      break;
 8002b7e:	e04e      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6818      	ldr	r0, [r3, #0]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6899      	ldr	r1, [r3, #8]
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f000 f98e 	bl	8002eb0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ba2:	609a      	str	r2, [r3, #8]
      break;
 8002ba4:	e03b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f900 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2150      	movs	r1, #80	; 0x50
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f959 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e02b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f91f 	bl	8002e16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2160      	movs	r1, #96	; 0x60
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f949 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002be4:	e01b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f8e0 	bl	8002db8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2140      	movs	r1, #64	; 0x40
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f939 	bl	8002e76 <TIM_ITRx_SetConfig>
      break;
 8002c04:	e00b      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4610      	mov	r0, r2
 8002c12:	f000 f930 	bl	8002e76 <TIM_ITRx_SetConfig>
        break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8002c18:	bf00      	nop
 8002c1a:	e000      	b.n	8002c1e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8002c1c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	00100070 	.word	0x00100070
 8002c3c:	00100040 	.word	0x00100040
 8002c40:	00100030 	.word	0x00100030
 8002c44:	00100020 	.word	0x00100020

08002c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c8c:	bf00      	nop
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a3c      	ldr	r2, [pc, #240]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00f      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cb6:	d00b      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <TIM_Base_SetConfig+0x108>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d007      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a38      	ldr	r2, [pc, #224]	; (8002da4 <TIM_Base_SetConfig+0x10c>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d003      	beq.n	8002cd0 <TIM_Base_SetConfig+0x38>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a37      	ldr	r2, [pc, #220]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2d      	ldr	r2, [pc, #180]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d01b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf0:	d017      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2a      	ldr	r2, [pc, #168]	; (8002da0 <TIM_Base_SetConfig+0x108>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d013      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a29      	ldr	r2, [pc, #164]	; (8002da4 <TIM_Base_SetConfig+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00f      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00b      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a26      	ldr	r2, [pc, #152]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d003      	beq.n	8002d22 <TIM_Base_SetConfig+0x8a>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d108      	bne.n	8002d34 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a10      	ldr	r2, [pc, #64]	; (8002d9c <TIM_Base_SetConfig+0x104>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d00f      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <TIM_Base_SetConfig+0x110>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d00b      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <TIM_Base_SetConfig+0x114>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d007      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <TIM_Base_SetConfig+0x118>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d003      	beq.n	8002d80 <TIM_Base_SetConfig+0xe8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a0e      	ldr	r2, [pc, #56]	; (8002db4 <TIM_Base_SetConfig+0x11c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d103      	bne.n	8002d88 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	615a      	str	r2, [r3, #20]
}
 8002d8e:	bf00      	nop
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400
 8002da4:	40000800 	.word	0x40000800
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800

08002db8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a1b      	ldr	r3, [r3, #32]
 8002dce:	f023 0201 	bic.w	r2, r3, #1
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f023 030a 	bic.w	r3, r3, #10
 8002df4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	621a      	str	r2, [r3, #32]
}
 8002e0a:	bf00      	nop
 8002e0c:	371c      	adds	r7, #28
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b087      	sub	sp, #28
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0210 	bic.w	r2, r3, #16
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	031b      	lsls	r3, r3, #12
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002e52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f043 0307 	orr.w	r3, r3, #7
 8002e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b087      	sub	sp, #28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	021a      	lsls	r2, r3, #8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	431a      	orrs	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	697a      	ldr	r2, [r7, #20]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	609a      	str	r2, [r3, #8]
}
 8002ee4:	bf00      	nop
 8002ee6:	371c      	adds	r7, #28
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2201      	movs	r2, #1
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a1a      	ldr	r2, [r3, #32]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	bf00      	nop
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f50:	2302      	movs	r3, #2
 8002f52:	e065      	b.n	8003020 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a2c      	ldr	r2, [pc, #176]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a2b      	ldr	r2, [pc, #172]	; (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d108      	bne.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002f8e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d018      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fca:	d013      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00e      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a17      	ldr	r2, [pc, #92]	; (8003038 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d009      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a12      	ldr	r2, [pc, #72]	; (8003030 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d004      	beq.n	8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d10c      	bne.n	800300e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ffa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40012c00 	.word	0x40012c00
 8003030:	40013400 	.word	0x40013400
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800
 800303c:	40014000 	.word	0x40014000

08003040 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr

080030b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e042      	b.n	8003164 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d106      	bne.n	80030f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7fd fddf 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2224      	movs	r2, #36	; 0x24
 80030fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8c2 	bl	8003298 <UART_SetConfig>
 8003114:	4603      	mov	r3, r0
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e022      	b.n	8003164 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fb54 	bl	80037d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800313a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800314a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0201 	orr.w	r2, r2, #1
 800315a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 fbdb 	bl	8003918 <UART_CheckIdleState>
 8003162:	4603      	mov	r3, r0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	603b      	str	r3, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003182:	2b20      	cmp	r3, #32
 8003184:	f040 8083 	bne.w	800328e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Transmit+0x28>
 800318e:	88fb      	ldrh	r3, [r7, #6]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e07b      	b.n	8003290 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Transmit+0x3a>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e074      	b.n	8003290 <HAL_UART_Transmit+0x124>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2221      	movs	r2, #33	; 0x21
 80031ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031be:	f7fd fe49 	bl	8000e54 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	88fa      	ldrh	r2, [r7, #6]
 80031c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d108      	bne.n	80031f0 <HAL_UART_Transmit+0x84>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	e003      	b.n	80031f8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003200:	e02c      	b.n	800325c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2200      	movs	r2, #0
 800320a:	2180      	movs	r1, #128	; 0x80
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 fbce 	bl	80039ae <UART_WaitOnFlagUntilTimeout>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e039      	b.n	8003290 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d10b      	bne.n	800323a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	3302      	adds	r3, #2
 8003236:	61bb      	str	r3, [r7, #24]
 8003238:	e007      	b.n	800324a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	781a      	ldrb	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	3301      	adds	r3, #1
 8003248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1cc      	bne.n	8003202 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	2200      	movs	r2, #0
 8003270:	2140      	movs	r1, #64	; 0x40
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fb9b 	bl	80039ae <UART_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e006      	b.n	8003290 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003298:	b5b0      	push	{r4, r5, r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4baf      	ldr	r3, [pc, #700]	; (8003580 <UART_SetConfig+0x2e8>)
 80032c4:	4013      	ands	r3, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	69f9      	ldr	r1, [r7, #28]
 80032cc:	430b      	orrs	r3, r1
 80032ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4aa4      	ldr	r2, [pc, #656]	; (8003584 <UART_SetConfig+0x2ec>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d004      	beq.n	8003300 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	69fa      	ldr	r2, [r7, #28]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800330a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	6812      	ldr	r2, [r2, #0]
 8003312:	69f9      	ldr	r1, [r7, #28]
 8003314:	430b      	orrs	r3, r1
 8003316:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331e:	f023 010f 	bic.w	r1, r3, #15
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a95      	ldr	r2, [pc, #596]	; (8003588 <UART_SetConfig+0x2f0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d120      	bne.n	800337a <UART_SetConfig+0xe2>
 8003338:	4b94      	ldr	r3, [pc, #592]	; (800358c <UART_SetConfig+0x2f4>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b03      	cmp	r3, #3
 8003344:	d816      	bhi.n	8003374 <UART_SetConfig+0xdc>
 8003346:	a201      	add	r2, pc, #4	; (adr r2, 800334c <UART_SetConfig+0xb4>)
 8003348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334c:	0800335d 	.word	0x0800335d
 8003350:	08003369 	.word	0x08003369
 8003354:	08003363 	.word	0x08003363
 8003358:	0800336f 	.word	0x0800336f
 800335c:	2301      	movs	r3, #1
 800335e:	76fb      	strb	r3, [r7, #27]
 8003360:	e0bc      	b.n	80034dc <UART_SetConfig+0x244>
 8003362:	2302      	movs	r3, #2
 8003364:	76fb      	strb	r3, [r7, #27]
 8003366:	e0b9      	b.n	80034dc <UART_SetConfig+0x244>
 8003368:	2304      	movs	r3, #4
 800336a:	76fb      	strb	r3, [r7, #27]
 800336c:	e0b6      	b.n	80034dc <UART_SetConfig+0x244>
 800336e:	2308      	movs	r3, #8
 8003370:	76fb      	strb	r3, [r7, #27]
 8003372:	e0b3      	b.n	80034dc <UART_SetConfig+0x244>
 8003374:	2310      	movs	r3, #16
 8003376:	76fb      	strb	r3, [r7, #27]
 8003378:	e0b0      	b.n	80034dc <UART_SetConfig+0x244>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a84      	ldr	r2, [pc, #528]	; (8003590 <UART_SetConfig+0x2f8>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d132      	bne.n	80033ea <UART_SetConfig+0x152>
 8003384:	4b81      	ldr	r3, [pc, #516]	; (800358c <UART_SetConfig+0x2f4>)
 8003386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	2b0c      	cmp	r3, #12
 8003390:	d828      	bhi.n	80033e4 <UART_SetConfig+0x14c>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <UART_SetConfig+0x100>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080033e5 	.word	0x080033e5
 80033a0:	080033e5 	.word	0x080033e5
 80033a4:	080033e5 	.word	0x080033e5
 80033a8:	080033d9 	.word	0x080033d9
 80033ac:	080033e5 	.word	0x080033e5
 80033b0:	080033e5 	.word	0x080033e5
 80033b4:	080033e5 	.word	0x080033e5
 80033b8:	080033d3 	.word	0x080033d3
 80033bc:	080033e5 	.word	0x080033e5
 80033c0:	080033e5 	.word	0x080033e5
 80033c4:	080033e5 	.word	0x080033e5
 80033c8:	080033df 	.word	0x080033df
 80033cc:	2300      	movs	r3, #0
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	e084      	b.n	80034dc <UART_SetConfig+0x244>
 80033d2:	2302      	movs	r3, #2
 80033d4:	76fb      	strb	r3, [r7, #27]
 80033d6:	e081      	b.n	80034dc <UART_SetConfig+0x244>
 80033d8:	2304      	movs	r3, #4
 80033da:	76fb      	strb	r3, [r7, #27]
 80033dc:	e07e      	b.n	80034dc <UART_SetConfig+0x244>
 80033de:	2308      	movs	r3, #8
 80033e0:	76fb      	strb	r3, [r7, #27]
 80033e2:	e07b      	b.n	80034dc <UART_SetConfig+0x244>
 80033e4:	2310      	movs	r3, #16
 80033e6:	76fb      	strb	r3, [r7, #27]
 80033e8:	e078      	b.n	80034dc <UART_SetConfig+0x244>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a69      	ldr	r2, [pc, #420]	; (8003594 <UART_SetConfig+0x2fc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d120      	bne.n	8003436 <UART_SetConfig+0x19e>
 80033f4:	4b65      	ldr	r3, [pc, #404]	; (800358c <UART_SetConfig+0x2f4>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80033fe:	2b30      	cmp	r3, #48	; 0x30
 8003400:	d013      	beq.n	800342a <UART_SetConfig+0x192>
 8003402:	2b30      	cmp	r3, #48	; 0x30
 8003404:	d814      	bhi.n	8003430 <UART_SetConfig+0x198>
 8003406:	2b20      	cmp	r3, #32
 8003408:	d009      	beq.n	800341e <UART_SetConfig+0x186>
 800340a:	2b20      	cmp	r3, #32
 800340c:	d810      	bhi.n	8003430 <UART_SetConfig+0x198>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <UART_SetConfig+0x180>
 8003412:	2b10      	cmp	r3, #16
 8003414:	d006      	beq.n	8003424 <UART_SetConfig+0x18c>
 8003416:	e00b      	b.n	8003430 <UART_SetConfig+0x198>
 8003418:	2300      	movs	r3, #0
 800341a:	76fb      	strb	r3, [r7, #27]
 800341c:	e05e      	b.n	80034dc <UART_SetConfig+0x244>
 800341e:	2302      	movs	r3, #2
 8003420:	76fb      	strb	r3, [r7, #27]
 8003422:	e05b      	b.n	80034dc <UART_SetConfig+0x244>
 8003424:	2304      	movs	r3, #4
 8003426:	76fb      	strb	r3, [r7, #27]
 8003428:	e058      	b.n	80034dc <UART_SetConfig+0x244>
 800342a:	2308      	movs	r3, #8
 800342c:	76fb      	strb	r3, [r7, #27]
 800342e:	e055      	b.n	80034dc <UART_SetConfig+0x244>
 8003430:	2310      	movs	r3, #16
 8003432:	76fb      	strb	r3, [r7, #27]
 8003434:	e052      	b.n	80034dc <UART_SetConfig+0x244>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a57      	ldr	r2, [pc, #348]	; (8003598 <UART_SetConfig+0x300>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d120      	bne.n	8003482 <UART_SetConfig+0x1ea>
 8003440:	4b52      	ldr	r3, [pc, #328]	; (800358c <UART_SetConfig+0x2f4>)
 8003442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800344a:	2bc0      	cmp	r3, #192	; 0xc0
 800344c:	d013      	beq.n	8003476 <UART_SetConfig+0x1de>
 800344e:	2bc0      	cmp	r3, #192	; 0xc0
 8003450:	d814      	bhi.n	800347c <UART_SetConfig+0x1e4>
 8003452:	2b80      	cmp	r3, #128	; 0x80
 8003454:	d009      	beq.n	800346a <UART_SetConfig+0x1d2>
 8003456:	2b80      	cmp	r3, #128	; 0x80
 8003458:	d810      	bhi.n	800347c <UART_SetConfig+0x1e4>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x1cc>
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d006      	beq.n	8003470 <UART_SetConfig+0x1d8>
 8003462:	e00b      	b.n	800347c <UART_SetConfig+0x1e4>
 8003464:	2300      	movs	r3, #0
 8003466:	76fb      	strb	r3, [r7, #27]
 8003468:	e038      	b.n	80034dc <UART_SetConfig+0x244>
 800346a:	2302      	movs	r3, #2
 800346c:	76fb      	strb	r3, [r7, #27]
 800346e:	e035      	b.n	80034dc <UART_SetConfig+0x244>
 8003470:	2304      	movs	r3, #4
 8003472:	76fb      	strb	r3, [r7, #27]
 8003474:	e032      	b.n	80034dc <UART_SetConfig+0x244>
 8003476:	2308      	movs	r3, #8
 8003478:	76fb      	strb	r3, [r7, #27]
 800347a:	e02f      	b.n	80034dc <UART_SetConfig+0x244>
 800347c:	2310      	movs	r3, #16
 800347e:	76fb      	strb	r3, [r7, #27]
 8003480:	e02c      	b.n	80034dc <UART_SetConfig+0x244>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3f      	ldr	r2, [pc, #252]	; (8003584 <UART_SetConfig+0x2ec>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d125      	bne.n	80034d8 <UART_SetConfig+0x240>
 800348c:	4b3f      	ldr	r3, [pc, #252]	; (800358c <UART_SetConfig+0x2f4>)
 800348e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003492:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800349a:	d017      	beq.n	80034cc <UART_SetConfig+0x234>
 800349c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80034a0:	d817      	bhi.n	80034d2 <UART_SetConfig+0x23a>
 80034a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034a6:	d00b      	beq.n	80034c0 <UART_SetConfig+0x228>
 80034a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ac:	d811      	bhi.n	80034d2 <UART_SetConfig+0x23a>
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <UART_SetConfig+0x222>
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d006      	beq.n	80034c6 <UART_SetConfig+0x22e>
 80034b8:	e00b      	b.n	80034d2 <UART_SetConfig+0x23a>
 80034ba:	2300      	movs	r3, #0
 80034bc:	76fb      	strb	r3, [r7, #27]
 80034be:	e00d      	b.n	80034dc <UART_SetConfig+0x244>
 80034c0:	2302      	movs	r3, #2
 80034c2:	76fb      	strb	r3, [r7, #27]
 80034c4:	e00a      	b.n	80034dc <UART_SetConfig+0x244>
 80034c6:	2304      	movs	r3, #4
 80034c8:	76fb      	strb	r3, [r7, #27]
 80034ca:	e007      	b.n	80034dc <UART_SetConfig+0x244>
 80034cc:	2308      	movs	r3, #8
 80034ce:	76fb      	strb	r3, [r7, #27]
 80034d0:	e004      	b.n	80034dc <UART_SetConfig+0x244>
 80034d2:	2310      	movs	r3, #16
 80034d4:	76fb      	strb	r3, [r7, #27]
 80034d6:	e001      	b.n	80034dc <UART_SetConfig+0x244>
 80034d8:	2310      	movs	r3, #16
 80034da:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a28      	ldr	r2, [pc, #160]	; (8003584 <UART_SetConfig+0x2ec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	f040 809e 	bne.w	8003624 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034e8:	7efb      	ldrb	r3, [r7, #27]
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d823      	bhi.n	8003536 <UART_SetConfig+0x29e>
 80034ee:	a201      	add	r2, pc, #4	; (adr r2, 80034f4 <UART_SetConfig+0x25c>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003537 	.word	0x08003537
 80034fc:	08003521 	.word	0x08003521
 8003500:	08003537 	.word	0x08003537
 8003504:	08003527 	.word	0x08003527
 8003508:	08003537 	.word	0x08003537
 800350c:	08003537 	.word	0x08003537
 8003510:	08003537 	.word	0x08003537
 8003514:	0800352f 	.word	0x0800352f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7fe fcc8 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800351c:	6178      	str	r0, [r7, #20]
        break;
 800351e:	e00f      	b.n	8003540 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <UART_SetConfig+0x304>)
 8003522:	617b      	str	r3, [r7, #20]
        break;
 8003524:	e00c      	b.n	8003540 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003526:	f7fe fc53 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800352a:	6178      	str	r0, [r7, #20]
        break;
 800352c:	e008      	b.n	8003540 <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	617b      	str	r3, [r7, #20]
        break;
 8003534:	e004      	b.n	8003540 <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	76bb      	strb	r3, [r7, #26]
        break;
 800353e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 812e 	beq.w	80037a4 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <UART_SetConfig+0x308>)
 800354e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003552:	461a      	mov	r2, r3
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fbb3 f3f2 	udiv	r3, r3, r2
 800355a:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d305      	bcc.n	8003578 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	d915      	bls.n	80035a4 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	76bb      	strb	r3, [r7, #26]
 800357c:	e112      	b.n	80037a4 <UART_SetConfig+0x50c>
 800357e:	bf00      	nop
 8003580:	cfff69f3 	.word	0xcfff69f3
 8003584:	40008000 	.word	0x40008000
 8003588:	40013800 	.word	0x40013800
 800358c:	40021000 	.word	0x40021000
 8003590:	40004400 	.word	0x40004400
 8003594:	40004800 	.word	0x40004800
 8003598:	40004c00 	.word	0x40004c00
 800359c:	00f42400 	.word	0x00f42400
 80035a0:	08004d04 	.word	0x08004d04
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	4a86      	ldr	r2, [pc, #536]	; (80037cc <UART_SetConfig+0x534>)
 80035b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f7fc fe80 	bl	80002c0 <__aeabi_uldivmod>
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	f04f 0300 	mov.w	r3, #0
 80035d0:	020b      	lsls	r3, r1, #8
 80035d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80035d6:	0202      	lsls	r2, r0, #8
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	6849      	ldr	r1, [r1, #4]
 80035dc:	0849      	lsrs	r1, r1, #1
 80035de:	4608      	mov	r0, r1
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	1814      	adds	r4, r2, r0
 80035e6:	eb43 0501 	adc.w	r5, r3, r1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	461a      	mov	r2, r3
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	4620      	mov	r0, r4
 80035f6:	4629      	mov	r1, r5
 80035f8:	f7fc fe62 	bl	80002c0 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800360a:	d308      	bcc.n	800361e <UART_SetConfig+0x386>
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003612:	d204      	bcs.n	800361e <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e0c2      	b.n	80037a4 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	76bb      	strb	r3, [r7, #26]
 8003622:	e0bf      	b.n	80037a4 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800362c:	d165      	bne.n	80036fa <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800362e:	7efb      	ldrb	r3, [r7, #27]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d828      	bhi.n	8003686 <UART_SetConfig+0x3ee>
 8003634:	a201      	add	r2, pc, #4	; (adr r2, 800363c <UART_SetConfig+0x3a4>)
 8003636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363a:	bf00      	nop
 800363c:	08003661 	.word	0x08003661
 8003640:	08003669 	.word	0x08003669
 8003644:	08003671 	.word	0x08003671
 8003648:	08003687 	.word	0x08003687
 800364c:	08003677 	.word	0x08003677
 8003650:	08003687 	.word	0x08003687
 8003654:	08003687 	.word	0x08003687
 8003658:	08003687 	.word	0x08003687
 800365c:	0800367f 	.word	0x0800367f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003660:	f7fe fc24 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003664:	6178      	str	r0, [r7, #20]
        break;
 8003666:	e013      	b.n	8003690 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003668:	f7fe fc36 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 800366c:	6178      	str	r0, [r7, #20]
        break;
 800366e:	e00f      	b.n	8003690 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003670:	4b57      	ldr	r3, [pc, #348]	; (80037d0 <UART_SetConfig+0x538>)
 8003672:	617b      	str	r3, [r7, #20]
        break;
 8003674:	e00c      	b.n	8003690 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003676:	f7fe fbab 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 800367a:	6178      	str	r0, [r7, #20]
        break;
 800367c:	e008      	b.n	8003690 <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800367e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003682:	617b      	str	r3, [r7, #20]
        break;
 8003684:	e004      	b.n	8003690 <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	76bb      	strb	r3, [r7, #26]
        break;
 800368e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f000 8086 	beq.w	80037a4 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	4a4b      	ldr	r2, [pc, #300]	; (80037cc <UART_SetConfig+0x534>)
 800369e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036a2:	461a      	mov	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80036aa:	005a      	lsls	r2, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	085b      	lsrs	r3, r3, #1
 80036b2:	441a      	add	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036bc:	b29b      	uxth	r3, r3
 80036be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	d916      	bls.n	80036f4 <UART_SetConfig+0x45c>
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036cc:	d212      	bcs.n	80036f4 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f023 030f 	bic.w	r3, r3, #15
 80036d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	b29b      	uxth	r3, r3
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	89fb      	ldrh	r3, [r7, #14]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	89fa      	ldrh	r2, [r7, #14]
 80036f0:	60da      	str	r2, [r3, #12]
 80036f2:	e057      	b.n	80037a4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	76bb      	strb	r3, [r7, #26]
 80036f8:	e054      	b.n	80037a4 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036fa:	7efb      	ldrb	r3, [r7, #27]
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d828      	bhi.n	8003752 <UART_SetConfig+0x4ba>
 8003700:	a201      	add	r2, pc, #4	; (adr r2, 8003708 <UART_SetConfig+0x470>)
 8003702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003706:	bf00      	nop
 8003708:	0800372d 	.word	0x0800372d
 800370c:	08003735 	.word	0x08003735
 8003710:	0800373d 	.word	0x0800373d
 8003714:	08003753 	.word	0x08003753
 8003718:	08003743 	.word	0x08003743
 800371c:	08003753 	.word	0x08003753
 8003720:	08003753 	.word	0x08003753
 8003724:	08003753 	.word	0x08003753
 8003728:	0800374b 	.word	0x0800374b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800372c:	f7fe fbbe 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8003730:	6178      	str	r0, [r7, #20]
        break;
 8003732:	e013      	b.n	800375c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003734:	f7fe fbd0 	bl	8001ed8 <HAL_RCC_GetPCLK2Freq>
 8003738:	6178      	str	r0, [r7, #20]
        break;
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800373c:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <UART_SetConfig+0x538>)
 800373e:	617b      	str	r3, [r7, #20]
        break;
 8003740:	e00c      	b.n	800375c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003742:	f7fe fb45 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8003746:	6178      	str	r0, [r7, #20]
        break;
 8003748:	e008      	b.n	800375c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800374a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800374e:	617b      	str	r3, [r7, #20]
        break;
 8003750:	e004      	b.n	800375c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	76bb      	strb	r3, [r7, #26]
        break;
 800375a:	bf00      	nop
    }

    if (pclk != 0U)
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d020      	beq.n	80037a4 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	4a19      	ldr	r2, [pc, #100]	; (80037cc <UART_SetConfig+0x534>)
 8003768:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800376c:	461a      	mov	r2, r3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	fbb3 f2f2 	udiv	r2, r3, r2
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	085b      	lsrs	r3, r3, #1
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	fbb2 f3f3 	udiv	r3, r2, r3
 8003784:	b29b      	uxth	r3, r3
 8003786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b0f      	cmp	r3, #15
 800378c:	d908      	bls.n	80037a0 <UART_SetConfig+0x508>
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d204      	bcs.n	80037a0 <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	e001      	b.n	80037a4 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80037c0:	7ebb      	ldrb	r3, [r7, #26]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ca:	bf00      	nop
 80037cc:	08004d04 	.word	0x08004d04
 80037d0:	00f42400 	.word	0x00f42400

080037d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00a      	beq.n	80037fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003824:	f003 0304 	and.w	r3, r3, #4
 8003828:	2b00      	cmp	r3, #0
 800382a:	d00a      	beq.n	8003842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	430a      	orrs	r2, r1
 8003840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003868:	f003 0310 	and.w	r3, r3, #16
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388a:	f003 0320 	and.w	r3, r3, #32
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00a      	beq.n	80038a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d01a      	beq.n	80038ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	430a      	orrs	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038d2:	d10a      	bne.n	80038ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00a      	beq.n	800390c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af02      	add	r7, sp, #8
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003928:	f7fd fa94 	bl	8000e54 <HAL_GetTick>
 800392c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0308 	and.w	r3, r3, #8
 8003938:	2b08      	cmp	r3, #8
 800393a:	d10e      	bne.n	800395a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f82f 	bl	80039ae <UART_WaitOnFlagUntilTimeout>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d001      	beq.n	800395a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e025      	b.n	80039a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b04      	cmp	r3, #4
 8003966:	d10e      	bne.n	8003986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f819 	bl	80039ae <UART_WaitOnFlagUntilTimeout>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e00f      	b.n	80039a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b084      	sub	sp, #16
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	603b      	str	r3, [r7, #0]
 80039ba:	4613      	mov	r3, r2
 80039bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039be:	e062      	b.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d05e      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c8:	f7fd fa44 	bl	8000e54 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d302      	bcc.n	80039de <UART_WaitOnFlagUntilTimeout+0x30>
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11d      	bne.n	8003a1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e045      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d02e      	beq.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a36:	d126      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2220      	movs	r2, #32
 8003a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e00f      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69da      	ldr	r2, [r3, #28]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	bf0c      	ite	eq
 8003a96:	2301      	moveq	r3, #1
 8003a98:	2300      	movne	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	79fb      	ldrb	r3, [r7, #7]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d08d      	beq.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}

08003aae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b085      	sub	sp, #20
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e027      	b.n	8003b14 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003af2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e02d      	b.n	8003b94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2224      	movs	r2, #36	; 0x24
 8003b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0201 	bic.w	r2, r2, #1
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f84f 	bl	8003c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d101      	bne.n	8003bb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	e02d      	b.n	8003c10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2224      	movs	r2, #36	; 0x24
 8003bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f811 	bl	8003c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d108      	bne.n	8003c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c38:	e031      	b.n	8003c9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c3a:	2308      	movs	r3, #8
 8003c3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c3e:	2308      	movs	r3, #8
 8003c40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	0e5b      	lsrs	r3, r3, #25
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	0f5b      	lsrs	r3, r3, #29
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	f003 0307 	and.w	r3, r3, #7
 8003c60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c62:	7bbb      	ldrb	r3, [r7, #14]
 8003c64:	7b3a      	ldrb	r2, [r7, #12]
 8003c66:	4911      	ldr	r1, [pc, #68]	; (8003cac <UARTEx_SetNbDataToProcess+0x94>)
 8003c68:	5c8a      	ldrb	r2, [r1, r2]
 8003c6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c6e:	7b3a      	ldrb	r2, [r7, #12]
 8003c70:	490f      	ldr	r1, [pc, #60]	; (8003cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8003c72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c80:	7bfb      	ldrb	r3, [r7, #15]
 8003c82:	7b7a      	ldrb	r2, [r7, #13]
 8003c84:	4909      	ldr	r1, [pc, #36]	; (8003cac <UARTEx_SetNbDataToProcess+0x94>)
 8003c86:	5c8a      	ldrb	r2, [r1, r2]
 8003c88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c8c:	7b7a      	ldrb	r2, [r7, #13]
 8003c8e:	4908      	ldr	r1, [pc, #32]	; (8003cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8003c90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003c9e:	bf00      	nop
 8003ca0:	3714      	adds	r7, #20
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	08004d1c 	.word	0x08004d1c
 8003cb0:	08004d24 	.word	0x08004d24

08003cb4 <__errno>:
 8003cb4:	4b01      	ldr	r3, [pc, #4]	; (8003cbc <__errno+0x8>)
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	2000000c 	.word	0x2000000c

08003cc0 <__libc_init_array>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4d0d      	ldr	r5, [pc, #52]	; (8003cf8 <__libc_init_array+0x38>)
 8003cc4:	4c0d      	ldr	r4, [pc, #52]	; (8003cfc <__libc_init_array+0x3c>)
 8003cc6:	1b64      	subs	r4, r4, r5
 8003cc8:	10a4      	asrs	r4, r4, #2
 8003cca:	2600      	movs	r6, #0
 8003ccc:	42a6      	cmp	r6, r4
 8003cce:	d109      	bne.n	8003ce4 <__libc_init_array+0x24>
 8003cd0:	4d0b      	ldr	r5, [pc, #44]	; (8003d00 <__libc_init_array+0x40>)
 8003cd2:	4c0c      	ldr	r4, [pc, #48]	; (8003d04 <__libc_init_array+0x44>)
 8003cd4:	f000 ffec 	bl	8004cb0 <_init>
 8003cd8:	1b64      	subs	r4, r4, r5
 8003cda:	10a4      	asrs	r4, r4, #2
 8003cdc:	2600      	movs	r6, #0
 8003cde:	42a6      	cmp	r6, r4
 8003ce0:	d105      	bne.n	8003cee <__libc_init_array+0x2e>
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce8:	4798      	blx	r3
 8003cea:	3601      	adds	r6, #1
 8003cec:	e7ee      	b.n	8003ccc <__libc_init_array+0xc>
 8003cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf2:	4798      	blx	r3
 8003cf4:	3601      	adds	r6, #1
 8003cf6:	e7f2      	b.n	8003cde <__libc_init_array+0x1e>
 8003cf8:	08004dcc 	.word	0x08004dcc
 8003cfc:	08004dcc 	.word	0x08004dcc
 8003d00:	08004dcc 	.word	0x08004dcc
 8003d04:	08004dd0 	.word	0x08004dd0

08003d08 <memset>:
 8003d08:	4402      	add	r2, r0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d100      	bne.n	8003d12 <memset+0xa>
 8003d10:	4770      	bx	lr
 8003d12:	f803 1b01 	strb.w	r1, [r3], #1
 8003d16:	e7f9      	b.n	8003d0c <memset+0x4>

08003d18 <iprintf>:
 8003d18:	b40f      	push	{r0, r1, r2, r3}
 8003d1a:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <iprintf+0x2c>)
 8003d1c:	b513      	push	{r0, r1, r4, lr}
 8003d1e:	681c      	ldr	r4, [r3, #0]
 8003d20:	b124      	cbz	r4, 8003d2c <iprintf+0x14>
 8003d22:	69a3      	ldr	r3, [r4, #24]
 8003d24:	b913      	cbnz	r3, 8003d2c <iprintf+0x14>
 8003d26:	4620      	mov	r0, r4
 8003d28:	f000 fa5e 	bl	80041e8 <__sinit>
 8003d2c:	ab05      	add	r3, sp, #20
 8003d2e:	9a04      	ldr	r2, [sp, #16]
 8003d30:	68a1      	ldr	r1, [r4, #8]
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	4620      	mov	r0, r4
 8003d36:	f000 fc2f 	bl	8004598 <_vfiprintf_r>
 8003d3a:	b002      	add	sp, #8
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	b004      	add	sp, #16
 8003d42:	4770      	bx	lr
 8003d44:	2000000c 	.word	0x2000000c

08003d48 <_puts_r>:
 8003d48:	b570      	push	{r4, r5, r6, lr}
 8003d4a:	460e      	mov	r6, r1
 8003d4c:	4605      	mov	r5, r0
 8003d4e:	b118      	cbz	r0, 8003d58 <_puts_r+0x10>
 8003d50:	6983      	ldr	r3, [r0, #24]
 8003d52:	b90b      	cbnz	r3, 8003d58 <_puts_r+0x10>
 8003d54:	f000 fa48 	bl	80041e8 <__sinit>
 8003d58:	69ab      	ldr	r3, [r5, #24]
 8003d5a:	68ac      	ldr	r4, [r5, #8]
 8003d5c:	b913      	cbnz	r3, 8003d64 <_puts_r+0x1c>
 8003d5e:	4628      	mov	r0, r5
 8003d60:	f000 fa42 	bl	80041e8 <__sinit>
 8003d64:	4b2c      	ldr	r3, [pc, #176]	; (8003e18 <_puts_r+0xd0>)
 8003d66:	429c      	cmp	r4, r3
 8003d68:	d120      	bne.n	8003dac <_puts_r+0x64>
 8003d6a:	686c      	ldr	r4, [r5, #4]
 8003d6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d6e:	07db      	lsls	r3, r3, #31
 8003d70:	d405      	bmi.n	8003d7e <_puts_r+0x36>
 8003d72:	89a3      	ldrh	r3, [r4, #12]
 8003d74:	0598      	lsls	r0, r3, #22
 8003d76:	d402      	bmi.n	8003d7e <_puts_r+0x36>
 8003d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d7a:	f000 fad3 	bl	8004324 <__retarget_lock_acquire_recursive>
 8003d7e:	89a3      	ldrh	r3, [r4, #12]
 8003d80:	0719      	lsls	r1, r3, #28
 8003d82:	d51d      	bpl.n	8003dc0 <_puts_r+0x78>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	b1db      	cbz	r3, 8003dc0 <_puts_r+0x78>
 8003d88:	3e01      	subs	r6, #1
 8003d8a:	68a3      	ldr	r3, [r4, #8]
 8003d8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d90:	3b01      	subs	r3, #1
 8003d92:	60a3      	str	r3, [r4, #8]
 8003d94:	bb39      	cbnz	r1, 8003de6 <_puts_r+0x9e>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	da38      	bge.n	8003e0c <_puts_r+0xc4>
 8003d9a:	4622      	mov	r2, r4
 8003d9c:	210a      	movs	r1, #10
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f848 	bl	8003e34 <__swbuf_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d011      	beq.n	8003dcc <_puts_r+0x84>
 8003da8:	250a      	movs	r5, #10
 8003daa:	e011      	b.n	8003dd0 <_puts_r+0x88>
 8003dac:	4b1b      	ldr	r3, [pc, #108]	; (8003e1c <_puts_r+0xd4>)
 8003dae:	429c      	cmp	r4, r3
 8003db0:	d101      	bne.n	8003db6 <_puts_r+0x6e>
 8003db2:	68ac      	ldr	r4, [r5, #8]
 8003db4:	e7da      	b.n	8003d6c <_puts_r+0x24>
 8003db6:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <_puts_r+0xd8>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	bf08      	it	eq
 8003dbc:	68ec      	ldreq	r4, [r5, #12]
 8003dbe:	e7d5      	b.n	8003d6c <_puts_r+0x24>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 f888 	bl	8003ed8 <__swsetup_r>
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	d0dd      	beq.n	8003d88 <_puts_r+0x40>
 8003dcc:	f04f 35ff 	mov.w	r5, #4294967295
 8003dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd2:	07da      	lsls	r2, r3, #31
 8003dd4:	d405      	bmi.n	8003de2 <_puts_r+0x9a>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	059b      	lsls	r3, r3, #22
 8003dda:	d402      	bmi.n	8003de2 <_puts_r+0x9a>
 8003ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dde:	f000 faa2 	bl	8004326 <__retarget_lock_release_recursive>
 8003de2:	4628      	mov	r0, r5
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da04      	bge.n	8003df4 <_puts_r+0xac>
 8003dea:	69a2      	ldr	r2, [r4, #24]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	dc06      	bgt.n	8003dfe <_puts_r+0xb6>
 8003df0:	290a      	cmp	r1, #10
 8003df2:	d004      	beq.n	8003dfe <_puts_r+0xb6>
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	6022      	str	r2, [r4, #0]
 8003dfa:	7019      	strb	r1, [r3, #0]
 8003dfc:	e7c5      	b.n	8003d8a <_puts_r+0x42>
 8003dfe:	4622      	mov	r2, r4
 8003e00:	4628      	mov	r0, r5
 8003e02:	f000 f817 	bl	8003e34 <__swbuf_r>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d1bf      	bne.n	8003d8a <_puts_r+0x42>
 8003e0a:	e7df      	b.n	8003dcc <_puts_r+0x84>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	250a      	movs	r5, #10
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	701d      	strb	r5, [r3, #0]
 8003e16:	e7db      	b.n	8003dd0 <_puts_r+0x88>
 8003e18:	08004d50 	.word	0x08004d50
 8003e1c:	08004d70 	.word	0x08004d70
 8003e20:	08004d30 	.word	0x08004d30

08003e24 <puts>:
 8003e24:	4b02      	ldr	r3, [pc, #8]	; (8003e30 <puts+0xc>)
 8003e26:	4601      	mov	r1, r0
 8003e28:	6818      	ldr	r0, [r3, #0]
 8003e2a:	f7ff bf8d 	b.w	8003d48 <_puts_r>
 8003e2e:	bf00      	nop
 8003e30:	2000000c 	.word	0x2000000c

08003e34 <__swbuf_r>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	460e      	mov	r6, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	4605      	mov	r5, r0
 8003e3c:	b118      	cbz	r0, 8003e46 <__swbuf_r+0x12>
 8003e3e:	6983      	ldr	r3, [r0, #24]
 8003e40:	b90b      	cbnz	r3, 8003e46 <__swbuf_r+0x12>
 8003e42:	f000 f9d1 	bl	80041e8 <__sinit>
 8003e46:	4b21      	ldr	r3, [pc, #132]	; (8003ecc <__swbuf_r+0x98>)
 8003e48:	429c      	cmp	r4, r3
 8003e4a:	d12b      	bne.n	8003ea4 <__swbuf_r+0x70>
 8003e4c:	686c      	ldr	r4, [r5, #4]
 8003e4e:	69a3      	ldr	r3, [r4, #24]
 8003e50:	60a3      	str	r3, [r4, #8]
 8003e52:	89a3      	ldrh	r3, [r4, #12]
 8003e54:	071a      	lsls	r2, r3, #28
 8003e56:	d52f      	bpl.n	8003eb8 <__swbuf_r+0x84>
 8003e58:	6923      	ldr	r3, [r4, #16]
 8003e5a:	b36b      	cbz	r3, 8003eb8 <__swbuf_r+0x84>
 8003e5c:	6923      	ldr	r3, [r4, #16]
 8003e5e:	6820      	ldr	r0, [r4, #0]
 8003e60:	1ac0      	subs	r0, r0, r3
 8003e62:	6963      	ldr	r3, [r4, #20]
 8003e64:	b2f6      	uxtb	r6, r6
 8003e66:	4283      	cmp	r3, r0
 8003e68:	4637      	mov	r7, r6
 8003e6a:	dc04      	bgt.n	8003e76 <__swbuf_r+0x42>
 8003e6c:	4621      	mov	r1, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	f000 f926 	bl	80040c0 <_fflush_r>
 8003e74:	bb30      	cbnz	r0, 8003ec4 <__swbuf_r+0x90>
 8003e76:	68a3      	ldr	r3, [r4, #8]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	60a3      	str	r3, [r4, #8]
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	6022      	str	r2, [r4, #0]
 8003e82:	701e      	strb	r6, [r3, #0]
 8003e84:	6963      	ldr	r3, [r4, #20]
 8003e86:	3001      	adds	r0, #1
 8003e88:	4283      	cmp	r3, r0
 8003e8a:	d004      	beq.n	8003e96 <__swbuf_r+0x62>
 8003e8c:	89a3      	ldrh	r3, [r4, #12]
 8003e8e:	07db      	lsls	r3, r3, #31
 8003e90:	d506      	bpl.n	8003ea0 <__swbuf_r+0x6c>
 8003e92:	2e0a      	cmp	r6, #10
 8003e94:	d104      	bne.n	8003ea0 <__swbuf_r+0x6c>
 8003e96:	4621      	mov	r1, r4
 8003e98:	4628      	mov	r0, r5
 8003e9a:	f000 f911 	bl	80040c0 <_fflush_r>
 8003e9e:	b988      	cbnz	r0, 8003ec4 <__swbuf_r+0x90>
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <__swbuf_r+0x9c>)
 8003ea6:	429c      	cmp	r4, r3
 8003ea8:	d101      	bne.n	8003eae <__swbuf_r+0x7a>
 8003eaa:	68ac      	ldr	r4, [r5, #8]
 8003eac:	e7cf      	b.n	8003e4e <__swbuf_r+0x1a>
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <__swbuf_r+0xa0>)
 8003eb0:	429c      	cmp	r4, r3
 8003eb2:	bf08      	it	eq
 8003eb4:	68ec      	ldreq	r4, [r5, #12]
 8003eb6:	e7ca      	b.n	8003e4e <__swbuf_r+0x1a>
 8003eb8:	4621      	mov	r1, r4
 8003eba:	4628      	mov	r0, r5
 8003ebc:	f000 f80c 	bl	8003ed8 <__swsetup_r>
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d0cb      	beq.n	8003e5c <__swbuf_r+0x28>
 8003ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ec8:	e7ea      	b.n	8003ea0 <__swbuf_r+0x6c>
 8003eca:	bf00      	nop
 8003ecc:	08004d50 	.word	0x08004d50
 8003ed0:	08004d70 	.word	0x08004d70
 8003ed4:	08004d30 	.word	0x08004d30

08003ed8 <__swsetup_r>:
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <__swsetup_r+0xcc>)
 8003eda:	b570      	push	{r4, r5, r6, lr}
 8003edc:	681d      	ldr	r5, [r3, #0]
 8003ede:	4606      	mov	r6, r0
 8003ee0:	460c      	mov	r4, r1
 8003ee2:	b125      	cbz	r5, 8003eee <__swsetup_r+0x16>
 8003ee4:	69ab      	ldr	r3, [r5, #24]
 8003ee6:	b913      	cbnz	r3, 8003eee <__swsetup_r+0x16>
 8003ee8:	4628      	mov	r0, r5
 8003eea:	f000 f97d 	bl	80041e8 <__sinit>
 8003eee:	4b2e      	ldr	r3, [pc, #184]	; (8003fa8 <__swsetup_r+0xd0>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	d10f      	bne.n	8003f14 <__swsetup_r+0x3c>
 8003ef4:	686c      	ldr	r4, [r5, #4]
 8003ef6:	89a3      	ldrh	r3, [r4, #12]
 8003ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003efc:	0719      	lsls	r1, r3, #28
 8003efe:	d42c      	bmi.n	8003f5a <__swsetup_r+0x82>
 8003f00:	06dd      	lsls	r5, r3, #27
 8003f02:	d411      	bmi.n	8003f28 <__swsetup_r+0x50>
 8003f04:	2309      	movs	r3, #9
 8003f06:	6033      	str	r3, [r6, #0]
 8003f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003f0c:	81a3      	strh	r3, [r4, #12]
 8003f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f12:	e03e      	b.n	8003f92 <__swsetup_r+0xba>
 8003f14:	4b25      	ldr	r3, [pc, #148]	; (8003fac <__swsetup_r+0xd4>)
 8003f16:	429c      	cmp	r4, r3
 8003f18:	d101      	bne.n	8003f1e <__swsetup_r+0x46>
 8003f1a:	68ac      	ldr	r4, [r5, #8]
 8003f1c:	e7eb      	b.n	8003ef6 <__swsetup_r+0x1e>
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <__swsetup_r+0xd8>)
 8003f20:	429c      	cmp	r4, r3
 8003f22:	bf08      	it	eq
 8003f24:	68ec      	ldreq	r4, [r5, #12]
 8003f26:	e7e6      	b.n	8003ef6 <__swsetup_r+0x1e>
 8003f28:	0758      	lsls	r0, r3, #29
 8003f2a:	d512      	bpl.n	8003f52 <__swsetup_r+0x7a>
 8003f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f2e:	b141      	cbz	r1, 8003f42 <__swsetup_r+0x6a>
 8003f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f34:	4299      	cmp	r1, r3
 8003f36:	d002      	beq.n	8003f3e <__swsetup_r+0x66>
 8003f38:	4630      	mov	r0, r6
 8003f3a:	f000 fa59 	bl	80043f0 <_free_r>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6363      	str	r3, [r4, #52]	; 0x34
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	b94b      	cbnz	r3, 8003f72 <__swsetup_r+0x9a>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f68:	d003      	beq.n	8003f72 <__swsetup_r+0x9a>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f000 f9ff 	bl	8004370 <__smakebuf_r>
 8003f72:	89a0      	ldrh	r0, [r4, #12]
 8003f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f78:	f010 0301 	ands.w	r3, r0, #1
 8003f7c:	d00a      	beq.n	8003f94 <__swsetup_r+0xbc>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60a3      	str	r3, [r4, #8]
 8003f82:	6963      	ldr	r3, [r4, #20]
 8003f84:	425b      	negs	r3, r3
 8003f86:	61a3      	str	r3, [r4, #24]
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	b943      	cbnz	r3, 8003f9e <__swsetup_r+0xc6>
 8003f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f90:	d1ba      	bne.n	8003f08 <__swsetup_r+0x30>
 8003f92:	bd70      	pop	{r4, r5, r6, pc}
 8003f94:	0781      	lsls	r1, r0, #30
 8003f96:	bf58      	it	pl
 8003f98:	6963      	ldrpl	r3, [r4, #20]
 8003f9a:	60a3      	str	r3, [r4, #8]
 8003f9c:	e7f4      	b.n	8003f88 <__swsetup_r+0xb0>
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	e7f7      	b.n	8003f92 <__swsetup_r+0xba>
 8003fa2:	bf00      	nop
 8003fa4:	2000000c 	.word	0x2000000c
 8003fa8:	08004d50 	.word	0x08004d50
 8003fac:	08004d70 	.word	0x08004d70
 8003fb0:	08004d30 	.word	0x08004d30

08003fb4 <__sflush_r>:
 8003fb4:	898a      	ldrh	r2, [r1, #12]
 8003fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fba:	4605      	mov	r5, r0
 8003fbc:	0710      	lsls	r0, r2, #28
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	d458      	bmi.n	8004074 <__sflush_r+0xc0>
 8003fc2:	684b      	ldr	r3, [r1, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	dc05      	bgt.n	8003fd4 <__sflush_r+0x20>
 8003fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	dc02      	bgt.n	8003fd4 <__sflush_r+0x20>
 8003fce:	2000      	movs	r0, #0
 8003fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	d0f9      	beq.n	8003fce <__sflush_r+0x1a>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fe0:	682f      	ldr	r7, [r5, #0]
 8003fe2:	602b      	str	r3, [r5, #0]
 8003fe4:	d032      	beq.n	800404c <__sflush_r+0x98>
 8003fe6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fe8:	89a3      	ldrh	r3, [r4, #12]
 8003fea:	075a      	lsls	r2, r3, #29
 8003fec:	d505      	bpl.n	8003ffa <__sflush_r+0x46>
 8003fee:	6863      	ldr	r3, [r4, #4]
 8003ff0:	1ac0      	subs	r0, r0, r3
 8003ff2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ff4:	b10b      	cbz	r3, 8003ffa <__sflush_r+0x46>
 8003ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ff8:	1ac0      	subs	r0, r0, r3
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004000:	6a21      	ldr	r1, [r4, #32]
 8004002:	4628      	mov	r0, r5
 8004004:	47b0      	blx	r6
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	d106      	bne.n	800401a <__sflush_r+0x66>
 800400c:	6829      	ldr	r1, [r5, #0]
 800400e:	291d      	cmp	r1, #29
 8004010:	d82c      	bhi.n	800406c <__sflush_r+0xb8>
 8004012:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <__sflush_r+0x108>)
 8004014:	40ca      	lsrs	r2, r1
 8004016:	07d6      	lsls	r6, r2, #31
 8004018:	d528      	bpl.n	800406c <__sflush_r+0xb8>
 800401a:	2200      	movs	r2, #0
 800401c:	6062      	str	r2, [r4, #4]
 800401e:	04d9      	lsls	r1, r3, #19
 8004020:	6922      	ldr	r2, [r4, #16]
 8004022:	6022      	str	r2, [r4, #0]
 8004024:	d504      	bpl.n	8004030 <__sflush_r+0x7c>
 8004026:	1c42      	adds	r2, r0, #1
 8004028:	d101      	bne.n	800402e <__sflush_r+0x7a>
 800402a:	682b      	ldr	r3, [r5, #0]
 800402c:	b903      	cbnz	r3, 8004030 <__sflush_r+0x7c>
 800402e:	6560      	str	r0, [r4, #84]	; 0x54
 8004030:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004032:	602f      	str	r7, [r5, #0]
 8004034:	2900      	cmp	r1, #0
 8004036:	d0ca      	beq.n	8003fce <__sflush_r+0x1a>
 8004038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800403c:	4299      	cmp	r1, r3
 800403e:	d002      	beq.n	8004046 <__sflush_r+0x92>
 8004040:	4628      	mov	r0, r5
 8004042:	f000 f9d5 	bl	80043f0 <_free_r>
 8004046:	2000      	movs	r0, #0
 8004048:	6360      	str	r0, [r4, #52]	; 0x34
 800404a:	e7c1      	b.n	8003fd0 <__sflush_r+0x1c>
 800404c:	6a21      	ldr	r1, [r4, #32]
 800404e:	2301      	movs	r3, #1
 8004050:	4628      	mov	r0, r5
 8004052:	47b0      	blx	r6
 8004054:	1c41      	adds	r1, r0, #1
 8004056:	d1c7      	bne.n	8003fe8 <__sflush_r+0x34>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0c4      	beq.n	8003fe8 <__sflush_r+0x34>
 800405e:	2b1d      	cmp	r3, #29
 8004060:	d001      	beq.n	8004066 <__sflush_r+0xb2>
 8004062:	2b16      	cmp	r3, #22
 8004064:	d101      	bne.n	800406a <__sflush_r+0xb6>
 8004066:	602f      	str	r7, [r5, #0]
 8004068:	e7b1      	b.n	8003fce <__sflush_r+0x1a>
 800406a:	89a3      	ldrh	r3, [r4, #12]
 800406c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004070:	81a3      	strh	r3, [r4, #12]
 8004072:	e7ad      	b.n	8003fd0 <__sflush_r+0x1c>
 8004074:	690f      	ldr	r7, [r1, #16]
 8004076:	2f00      	cmp	r7, #0
 8004078:	d0a9      	beq.n	8003fce <__sflush_r+0x1a>
 800407a:	0793      	lsls	r3, r2, #30
 800407c:	680e      	ldr	r6, [r1, #0]
 800407e:	bf08      	it	eq
 8004080:	694b      	ldreq	r3, [r1, #20]
 8004082:	600f      	str	r7, [r1, #0]
 8004084:	bf18      	it	ne
 8004086:	2300      	movne	r3, #0
 8004088:	eba6 0807 	sub.w	r8, r6, r7
 800408c:	608b      	str	r3, [r1, #8]
 800408e:	f1b8 0f00 	cmp.w	r8, #0
 8004092:	dd9c      	ble.n	8003fce <__sflush_r+0x1a>
 8004094:	6a21      	ldr	r1, [r4, #32]
 8004096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004098:	4643      	mov	r3, r8
 800409a:	463a      	mov	r2, r7
 800409c:	4628      	mov	r0, r5
 800409e:	47b0      	blx	r6
 80040a0:	2800      	cmp	r0, #0
 80040a2:	dc06      	bgt.n	80040b2 <__sflush_r+0xfe>
 80040a4:	89a3      	ldrh	r3, [r4, #12]
 80040a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	f04f 30ff 	mov.w	r0, #4294967295
 80040b0:	e78e      	b.n	8003fd0 <__sflush_r+0x1c>
 80040b2:	4407      	add	r7, r0
 80040b4:	eba8 0800 	sub.w	r8, r8, r0
 80040b8:	e7e9      	b.n	800408e <__sflush_r+0xda>
 80040ba:	bf00      	nop
 80040bc:	20400001 	.word	0x20400001

080040c0 <_fflush_r>:
 80040c0:	b538      	push	{r3, r4, r5, lr}
 80040c2:	690b      	ldr	r3, [r1, #16]
 80040c4:	4605      	mov	r5, r0
 80040c6:	460c      	mov	r4, r1
 80040c8:	b913      	cbnz	r3, 80040d0 <_fflush_r+0x10>
 80040ca:	2500      	movs	r5, #0
 80040cc:	4628      	mov	r0, r5
 80040ce:	bd38      	pop	{r3, r4, r5, pc}
 80040d0:	b118      	cbz	r0, 80040da <_fflush_r+0x1a>
 80040d2:	6983      	ldr	r3, [r0, #24]
 80040d4:	b90b      	cbnz	r3, 80040da <_fflush_r+0x1a>
 80040d6:	f000 f887 	bl	80041e8 <__sinit>
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <_fflush_r+0x6c>)
 80040dc:	429c      	cmp	r4, r3
 80040de:	d11b      	bne.n	8004118 <_fflush_r+0x58>
 80040e0:	686c      	ldr	r4, [r5, #4]
 80040e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0ef      	beq.n	80040ca <_fflush_r+0xa>
 80040ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040ec:	07d0      	lsls	r0, r2, #31
 80040ee:	d404      	bmi.n	80040fa <_fflush_r+0x3a>
 80040f0:	0599      	lsls	r1, r3, #22
 80040f2:	d402      	bmi.n	80040fa <_fflush_r+0x3a>
 80040f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040f6:	f000 f915 	bl	8004324 <__retarget_lock_acquire_recursive>
 80040fa:	4628      	mov	r0, r5
 80040fc:	4621      	mov	r1, r4
 80040fe:	f7ff ff59 	bl	8003fb4 <__sflush_r>
 8004102:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004104:	07da      	lsls	r2, r3, #31
 8004106:	4605      	mov	r5, r0
 8004108:	d4e0      	bmi.n	80040cc <_fflush_r+0xc>
 800410a:	89a3      	ldrh	r3, [r4, #12]
 800410c:	059b      	lsls	r3, r3, #22
 800410e:	d4dd      	bmi.n	80040cc <_fflush_r+0xc>
 8004110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004112:	f000 f908 	bl	8004326 <__retarget_lock_release_recursive>
 8004116:	e7d9      	b.n	80040cc <_fflush_r+0xc>
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <_fflush_r+0x70>)
 800411a:	429c      	cmp	r4, r3
 800411c:	d101      	bne.n	8004122 <_fflush_r+0x62>
 800411e:	68ac      	ldr	r4, [r5, #8]
 8004120:	e7df      	b.n	80040e2 <_fflush_r+0x22>
 8004122:	4b04      	ldr	r3, [pc, #16]	; (8004134 <_fflush_r+0x74>)
 8004124:	429c      	cmp	r4, r3
 8004126:	bf08      	it	eq
 8004128:	68ec      	ldreq	r4, [r5, #12]
 800412a:	e7da      	b.n	80040e2 <_fflush_r+0x22>
 800412c:	08004d50 	.word	0x08004d50
 8004130:	08004d70 	.word	0x08004d70
 8004134:	08004d30 	.word	0x08004d30

08004138 <std>:
 8004138:	2300      	movs	r3, #0
 800413a:	b510      	push	{r4, lr}
 800413c:	4604      	mov	r4, r0
 800413e:	e9c0 3300 	strd	r3, r3, [r0]
 8004142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004146:	6083      	str	r3, [r0, #8]
 8004148:	8181      	strh	r1, [r0, #12]
 800414a:	6643      	str	r3, [r0, #100]	; 0x64
 800414c:	81c2      	strh	r2, [r0, #14]
 800414e:	6183      	str	r3, [r0, #24]
 8004150:	4619      	mov	r1, r3
 8004152:	2208      	movs	r2, #8
 8004154:	305c      	adds	r0, #92	; 0x5c
 8004156:	f7ff fdd7 	bl	8003d08 <memset>
 800415a:	4b05      	ldr	r3, [pc, #20]	; (8004170 <std+0x38>)
 800415c:	6263      	str	r3, [r4, #36]	; 0x24
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <std+0x3c>)
 8004160:	62a3      	str	r3, [r4, #40]	; 0x28
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <std+0x40>)
 8004164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004166:	4b05      	ldr	r3, [pc, #20]	; (800417c <std+0x44>)
 8004168:	6224      	str	r4, [r4, #32]
 800416a:	6323      	str	r3, [r4, #48]	; 0x30
 800416c:	bd10      	pop	{r4, pc}
 800416e:	bf00      	nop
 8004170:	08004b41 	.word	0x08004b41
 8004174:	08004b63 	.word	0x08004b63
 8004178:	08004b9b 	.word	0x08004b9b
 800417c:	08004bbf 	.word	0x08004bbf

08004180 <_cleanup_r>:
 8004180:	4901      	ldr	r1, [pc, #4]	; (8004188 <_cleanup_r+0x8>)
 8004182:	f000 b8af 	b.w	80042e4 <_fwalk_reent>
 8004186:	bf00      	nop
 8004188:	080040c1 	.word	0x080040c1

0800418c <__sfmoreglue>:
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	1e4a      	subs	r2, r1, #1
 8004190:	2568      	movs	r5, #104	; 0x68
 8004192:	4355      	muls	r5, r2
 8004194:	460e      	mov	r6, r1
 8004196:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800419a:	f000 f979 	bl	8004490 <_malloc_r>
 800419e:	4604      	mov	r4, r0
 80041a0:	b140      	cbz	r0, 80041b4 <__sfmoreglue+0x28>
 80041a2:	2100      	movs	r1, #0
 80041a4:	e9c0 1600 	strd	r1, r6, [r0]
 80041a8:	300c      	adds	r0, #12
 80041aa:	60a0      	str	r0, [r4, #8]
 80041ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041b0:	f7ff fdaa 	bl	8003d08 <memset>
 80041b4:	4620      	mov	r0, r4
 80041b6:	bd70      	pop	{r4, r5, r6, pc}

080041b8 <__sfp_lock_acquire>:
 80041b8:	4801      	ldr	r0, [pc, #4]	; (80041c0 <__sfp_lock_acquire+0x8>)
 80041ba:	f000 b8b3 	b.w	8004324 <__retarget_lock_acquire_recursive>
 80041be:	bf00      	nop
 80041c0:	200001cc 	.word	0x200001cc

080041c4 <__sfp_lock_release>:
 80041c4:	4801      	ldr	r0, [pc, #4]	; (80041cc <__sfp_lock_release+0x8>)
 80041c6:	f000 b8ae 	b.w	8004326 <__retarget_lock_release_recursive>
 80041ca:	bf00      	nop
 80041cc:	200001cc 	.word	0x200001cc

080041d0 <__sinit_lock_acquire>:
 80041d0:	4801      	ldr	r0, [pc, #4]	; (80041d8 <__sinit_lock_acquire+0x8>)
 80041d2:	f000 b8a7 	b.w	8004324 <__retarget_lock_acquire_recursive>
 80041d6:	bf00      	nop
 80041d8:	200001c7 	.word	0x200001c7

080041dc <__sinit_lock_release>:
 80041dc:	4801      	ldr	r0, [pc, #4]	; (80041e4 <__sinit_lock_release+0x8>)
 80041de:	f000 b8a2 	b.w	8004326 <__retarget_lock_release_recursive>
 80041e2:	bf00      	nop
 80041e4:	200001c7 	.word	0x200001c7

080041e8 <__sinit>:
 80041e8:	b510      	push	{r4, lr}
 80041ea:	4604      	mov	r4, r0
 80041ec:	f7ff fff0 	bl	80041d0 <__sinit_lock_acquire>
 80041f0:	69a3      	ldr	r3, [r4, #24]
 80041f2:	b11b      	cbz	r3, 80041fc <__sinit+0x14>
 80041f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041f8:	f7ff bff0 	b.w	80041dc <__sinit_lock_release>
 80041fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004200:	6523      	str	r3, [r4, #80]	; 0x50
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <__sinit+0x68>)
 8004204:	4a13      	ldr	r2, [pc, #76]	; (8004254 <__sinit+0x6c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	62a2      	str	r2, [r4, #40]	; 0x28
 800420a:	42a3      	cmp	r3, r4
 800420c:	bf04      	itt	eq
 800420e:	2301      	moveq	r3, #1
 8004210:	61a3      	streq	r3, [r4, #24]
 8004212:	4620      	mov	r0, r4
 8004214:	f000 f820 	bl	8004258 <__sfp>
 8004218:	6060      	str	r0, [r4, #4]
 800421a:	4620      	mov	r0, r4
 800421c:	f000 f81c 	bl	8004258 <__sfp>
 8004220:	60a0      	str	r0, [r4, #8]
 8004222:	4620      	mov	r0, r4
 8004224:	f000 f818 	bl	8004258 <__sfp>
 8004228:	2200      	movs	r2, #0
 800422a:	60e0      	str	r0, [r4, #12]
 800422c:	2104      	movs	r1, #4
 800422e:	6860      	ldr	r0, [r4, #4]
 8004230:	f7ff ff82 	bl	8004138 <std>
 8004234:	68a0      	ldr	r0, [r4, #8]
 8004236:	2201      	movs	r2, #1
 8004238:	2109      	movs	r1, #9
 800423a:	f7ff ff7d 	bl	8004138 <std>
 800423e:	68e0      	ldr	r0, [r4, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	2112      	movs	r1, #18
 8004244:	f7ff ff78 	bl	8004138 <std>
 8004248:	2301      	movs	r3, #1
 800424a:	61a3      	str	r3, [r4, #24]
 800424c:	e7d2      	b.n	80041f4 <__sinit+0xc>
 800424e:	bf00      	nop
 8004250:	08004d2c 	.word	0x08004d2c
 8004254:	08004181 	.word	0x08004181

08004258 <__sfp>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	4607      	mov	r7, r0
 800425c:	f7ff ffac 	bl	80041b8 <__sfp_lock_acquire>
 8004260:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <__sfp+0x84>)
 8004262:	681e      	ldr	r6, [r3, #0]
 8004264:	69b3      	ldr	r3, [r6, #24]
 8004266:	b913      	cbnz	r3, 800426e <__sfp+0x16>
 8004268:	4630      	mov	r0, r6
 800426a:	f7ff ffbd 	bl	80041e8 <__sinit>
 800426e:	3648      	adds	r6, #72	; 0x48
 8004270:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004274:	3b01      	subs	r3, #1
 8004276:	d503      	bpl.n	8004280 <__sfp+0x28>
 8004278:	6833      	ldr	r3, [r6, #0]
 800427a:	b30b      	cbz	r3, 80042c0 <__sfp+0x68>
 800427c:	6836      	ldr	r6, [r6, #0]
 800427e:	e7f7      	b.n	8004270 <__sfp+0x18>
 8004280:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004284:	b9d5      	cbnz	r5, 80042bc <__sfp+0x64>
 8004286:	4b16      	ldr	r3, [pc, #88]	; (80042e0 <__sfp+0x88>)
 8004288:	60e3      	str	r3, [r4, #12]
 800428a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800428e:	6665      	str	r5, [r4, #100]	; 0x64
 8004290:	f000 f847 	bl	8004322 <__retarget_lock_init_recursive>
 8004294:	f7ff ff96 	bl	80041c4 <__sfp_lock_release>
 8004298:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800429c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042a0:	6025      	str	r5, [r4, #0]
 80042a2:	61a5      	str	r5, [r4, #24]
 80042a4:	2208      	movs	r2, #8
 80042a6:	4629      	mov	r1, r5
 80042a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042ac:	f7ff fd2c 	bl	8003d08 <memset>
 80042b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042b8:	4620      	mov	r0, r4
 80042ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042bc:	3468      	adds	r4, #104	; 0x68
 80042be:	e7d9      	b.n	8004274 <__sfp+0x1c>
 80042c0:	2104      	movs	r1, #4
 80042c2:	4638      	mov	r0, r7
 80042c4:	f7ff ff62 	bl	800418c <__sfmoreglue>
 80042c8:	4604      	mov	r4, r0
 80042ca:	6030      	str	r0, [r6, #0]
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d1d5      	bne.n	800427c <__sfp+0x24>
 80042d0:	f7ff ff78 	bl	80041c4 <__sfp_lock_release>
 80042d4:	230c      	movs	r3, #12
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	e7ee      	b.n	80042b8 <__sfp+0x60>
 80042da:	bf00      	nop
 80042dc:	08004d2c 	.word	0x08004d2c
 80042e0:	ffff0001 	.word	0xffff0001

080042e4 <_fwalk_reent>:
 80042e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042e8:	4606      	mov	r6, r0
 80042ea:	4688      	mov	r8, r1
 80042ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042f0:	2700      	movs	r7, #0
 80042f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042f6:	f1b9 0901 	subs.w	r9, r9, #1
 80042fa:	d505      	bpl.n	8004308 <_fwalk_reent+0x24>
 80042fc:	6824      	ldr	r4, [r4, #0]
 80042fe:	2c00      	cmp	r4, #0
 8004300:	d1f7      	bne.n	80042f2 <_fwalk_reent+0xe>
 8004302:	4638      	mov	r0, r7
 8004304:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004308:	89ab      	ldrh	r3, [r5, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d907      	bls.n	800431e <_fwalk_reent+0x3a>
 800430e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004312:	3301      	adds	r3, #1
 8004314:	d003      	beq.n	800431e <_fwalk_reent+0x3a>
 8004316:	4629      	mov	r1, r5
 8004318:	4630      	mov	r0, r6
 800431a:	47c0      	blx	r8
 800431c:	4307      	orrs	r7, r0
 800431e:	3568      	adds	r5, #104	; 0x68
 8004320:	e7e9      	b.n	80042f6 <_fwalk_reent+0x12>

08004322 <__retarget_lock_init_recursive>:
 8004322:	4770      	bx	lr

08004324 <__retarget_lock_acquire_recursive>:
 8004324:	4770      	bx	lr

08004326 <__retarget_lock_release_recursive>:
 8004326:	4770      	bx	lr

08004328 <__swhatbuf_r>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	460e      	mov	r6, r1
 800432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004330:	2900      	cmp	r1, #0
 8004332:	b096      	sub	sp, #88	; 0x58
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	da07      	bge.n	800434a <__swhatbuf_r+0x22>
 800433a:	2300      	movs	r3, #0
 800433c:	602b      	str	r3, [r5, #0]
 800433e:	89b3      	ldrh	r3, [r6, #12]
 8004340:	061a      	lsls	r2, r3, #24
 8004342:	d410      	bmi.n	8004366 <__swhatbuf_r+0x3e>
 8004344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004348:	e00e      	b.n	8004368 <__swhatbuf_r+0x40>
 800434a:	466a      	mov	r2, sp
 800434c:	f000 fc5e 	bl	8004c0c <_fstat_r>
 8004350:	2800      	cmp	r0, #0
 8004352:	dbf2      	blt.n	800433a <__swhatbuf_r+0x12>
 8004354:	9a01      	ldr	r2, [sp, #4]
 8004356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800435a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800435e:	425a      	negs	r2, r3
 8004360:	415a      	adcs	r2, r3
 8004362:	602a      	str	r2, [r5, #0]
 8004364:	e7ee      	b.n	8004344 <__swhatbuf_r+0x1c>
 8004366:	2340      	movs	r3, #64	; 0x40
 8004368:	2000      	movs	r0, #0
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	b016      	add	sp, #88	; 0x58
 800436e:	bd70      	pop	{r4, r5, r6, pc}

08004370 <__smakebuf_r>:
 8004370:	898b      	ldrh	r3, [r1, #12]
 8004372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004374:	079d      	lsls	r5, r3, #30
 8004376:	4606      	mov	r6, r0
 8004378:	460c      	mov	r4, r1
 800437a:	d507      	bpl.n	800438c <__smakebuf_r+0x1c>
 800437c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004380:	6023      	str	r3, [r4, #0]
 8004382:	6123      	str	r3, [r4, #16]
 8004384:	2301      	movs	r3, #1
 8004386:	6163      	str	r3, [r4, #20]
 8004388:	b002      	add	sp, #8
 800438a:	bd70      	pop	{r4, r5, r6, pc}
 800438c:	ab01      	add	r3, sp, #4
 800438e:	466a      	mov	r2, sp
 8004390:	f7ff ffca 	bl	8004328 <__swhatbuf_r>
 8004394:	9900      	ldr	r1, [sp, #0]
 8004396:	4605      	mov	r5, r0
 8004398:	4630      	mov	r0, r6
 800439a:	f000 f879 	bl	8004490 <_malloc_r>
 800439e:	b948      	cbnz	r0, 80043b4 <__smakebuf_r+0x44>
 80043a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043a4:	059a      	lsls	r2, r3, #22
 80043a6:	d4ef      	bmi.n	8004388 <__smakebuf_r+0x18>
 80043a8:	f023 0303 	bic.w	r3, r3, #3
 80043ac:	f043 0302 	orr.w	r3, r3, #2
 80043b0:	81a3      	strh	r3, [r4, #12]
 80043b2:	e7e3      	b.n	800437c <__smakebuf_r+0xc>
 80043b4:	4b0d      	ldr	r3, [pc, #52]	; (80043ec <__smakebuf_r+0x7c>)
 80043b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	6020      	str	r0, [r4, #0]
 80043bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c0:	81a3      	strh	r3, [r4, #12]
 80043c2:	9b00      	ldr	r3, [sp, #0]
 80043c4:	6163      	str	r3, [r4, #20]
 80043c6:	9b01      	ldr	r3, [sp, #4]
 80043c8:	6120      	str	r0, [r4, #16]
 80043ca:	b15b      	cbz	r3, 80043e4 <__smakebuf_r+0x74>
 80043cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043d0:	4630      	mov	r0, r6
 80043d2:	f000 fc2d 	bl	8004c30 <_isatty_r>
 80043d6:	b128      	cbz	r0, 80043e4 <__smakebuf_r+0x74>
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	f023 0303 	bic.w	r3, r3, #3
 80043de:	f043 0301 	orr.w	r3, r3, #1
 80043e2:	81a3      	strh	r3, [r4, #12]
 80043e4:	89a0      	ldrh	r0, [r4, #12]
 80043e6:	4305      	orrs	r5, r0
 80043e8:	81a5      	strh	r5, [r4, #12]
 80043ea:	e7cd      	b.n	8004388 <__smakebuf_r+0x18>
 80043ec:	08004181 	.word	0x08004181

080043f0 <_free_r>:
 80043f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043f2:	2900      	cmp	r1, #0
 80043f4:	d048      	beq.n	8004488 <_free_r+0x98>
 80043f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fa:	9001      	str	r0, [sp, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f1a1 0404 	sub.w	r4, r1, #4
 8004402:	bfb8      	it	lt
 8004404:	18e4      	addlt	r4, r4, r3
 8004406:	f000 fc35 	bl	8004c74 <__malloc_lock>
 800440a:	4a20      	ldr	r2, [pc, #128]	; (800448c <_free_r+0x9c>)
 800440c:	9801      	ldr	r0, [sp, #4]
 800440e:	6813      	ldr	r3, [r2, #0]
 8004410:	4615      	mov	r5, r2
 8004412:	b933      	cbnz	r3, 8004422 <_free_r+0x32>
 8004414:	6063      	str	r3, [r4, #4]
 8004416:	6014      	str	r4, [r2, #0]
 8004418:	b003      	add	sp, #12
 800441a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800441e:	f000 bc2f 	b.w	8004c80 <__malloc_unlock>
 8004422:	42a3      	cmp	r3, r4
 8004424:	d90b      	bls.n	800443e <_free_r+0x4e>
 8004426:	6821      	ldr	r1, [r4, #0]
 8004428:	1862      	adds	r2, r4, r1
 800442a:	4293      	cmp	r3, r2
 800442c:	bf04      	itt	eq
 800442e:	681a      	ldreq	r2, [r3, #0]
 8004430:	685b      	ldreq	r3, [r3, #4]
 8004432:	6063      	str	r3, [r4, #4]
 8004434:	bf04      	itt	eq
 8004436:	1852      	addeq	r2, r2, r1
 8004438:	6022      	streq	r2, [r4, #0]
 800443a:	602c      	str	r4, [r5, #0]
 800443c:	e7ec      	b.n	8004418 <_free_r+0x28>
 800443e:	461a      	mov	r2, r3
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	b10b      	cbz	r3, 8004448 <_free_r+0x58>
 8004444:	42a3      	cmp	r3, r4
 8004446:	d9fa      	bls.n	800443e <_free_r+0x4e>
 8004448:	6811      	ldr	r1, [r2, #0]
 800444a:	1855      	adds	r5, r2, r1
 800444c:	42a5      	cmp	r5, r4
 800444e:	d10b      	bne.n	8004468 <_free_r+0x78>
 8004450:	6824      	ldr	r4, [r4, #0]
 8004452:	4421      	add	r1, r4
 8004454:	1854      	adds	r4, r2, r1
 8004456:	42a3      	cmp	r3, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	d1dd      	bne.n	8004418 <_free_r+0x28>
 800445c:	681c      	ldr	r4, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	6053      	str	r3, [r2, #4]
 8004462:	4421      	add	r1, r4
 8004464:	6011      	str	r1, [r2, #0]
 8004466:	e7d7      	b.n	8004418 <_free_r+0x28>
 8004468:	d902      	bls.n	8004470 <_free_r+0x80>
 800446a:	230c      	movs	r3, #12
 800446c:	6003      	str	r3, [r0, #0]
 800446e:	e7d3      	b.n	8004418 <_free_r+0x28>
 8004470:	6825      	ldr	r5, [r4, #0]
 8004472:	1961      	adds	r1, r4, r5
 8004474:	428b      	cmp	r3, r1
 8004476:	bf04      	itt	eq
 8004478:	6819      	ldreq	r1, [r3, #0]
 800447a:	685b      	ldreq	r3, [r3, #4]
 800447c:	6063      	str	r3, [r4, #4]
 800447e:	bf04      	itt	eq
 8004480:	1949      	addeq	r1, r1, r5
 8004482:	6021      	streq	r1, [r4, #0]
 8004484:	6054      	str	r4, [r2, #4]
 8004486:	e7c7      	b.n	8004418 <_free_r+0x28>
 8004488:	b003      	add	sp, #12
 800448a:	bd30      	pop	{r4, r5, pc}
 800448c:	20000090 	.word	0x20000090

08004490 <_malloc_r>:
 8004490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004492:	1ccd      	adds	r5, r1, #3
 8004494:	f025 0503 	bic.w	r5, r5, #3
 8004498:	3508      	adds	r5, #8
 800449a:	2d0c      	cmp	r5, #12
 800449c:	bf38      	it	cc
 800449e:	250c      	movcc	r5, #12
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	4606      	mov	r6, r0
 80044a4:	db01      	blt.n	80044aa <_malloc_r+0x1a>
 80044a6:	42a9      	cmp	r1, r5
 80044a8:	d903      	bls.n	80044b2 <_malloc_r+0x22>
 80044aa:	230c      	movs	r3, #12
 80044ac:	6033      	str	r3, [r6, #0]
 80044ae:	2000      	movs	r0, #0
 80044b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044b2:	f000 fbdf 	bl	8004c74 <__malloc_lock>
 80044b6:	4921      	ldr	r1, [pc, #132]	; (800453c <_malloc_r+0xac>)
 80044b8:	680a      	ldr	r2, [r1, #0]
 80044ba:	4614      	mov	r4, r2
 80044bc:	b99c      	cbnz	r4, 80044e6 <_malloc_r+0x56>
 80044be:	4f20      	ldr	r7, [pc, #128]	; (8004540 <_malloc_r+0xb0>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	b923      	cbnz	r3, 80044ce <_malloc_r+0x3e>
 80044c4:	4621      	mov	r1, r4
 80044c6:	4630      	mov	r0, r6
 80044c8:	f000 fb2a 	bl	8004b20 <_sbrk_r>
 80044cc:	6038      	str	r0, [r7, #0]
 80044ce:	4629      	mov	r1, r5
 80044d0:	4630      	mov	r0, r6
 80044d2:	f000 fb25 	bl	8004b20 <_sbrk_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	d123      	bne.n	8004522 <_malloc_r+0x92>
 80044da:	230c      	movs	r3, #12
 80044dc:	6033      	str	r3, [r6, #0]
 80044de:	4630      	mov	r0, r6
 80044e0:	f000 fbce 	bl	8004c80 <__malloc_unlock>
 80044e4:	e7e3      	b.n	80044ae <_malloc_r+0x1e>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	1b5b      	subs	r3, r3, r5
 80044ea:	d417      	bmi.n	800451c <_malloc_r+0x8c>
 80044ec:	2b0b      	cmp	r3, #11
 80044ee:	d903      	bls.n	80044f8 <_malloc_r+0x68>
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	441c      	add	r4, r3
 80044f4:	6025      	str	r5, [r4, #0]
 80044f6:	e004      	b.n	8004502 <_malloc_r+0x72>
 80044f8:	6863      	ldr	r3, [r4, #4]
 80044fa:	42a2      	cmp	r2, r4
 80044fc:	bf0c      	ite	eq
 80044fe:	600b      	streq	r3, [r1, #0]
 8004500:	6053      	strne	r3, [r2, #4]
 8004502:	4630      	mov	r0, r6
 8004504:	f000 fbbc 	bl	8004c80 <__malloc_unlock>
 8004508:	f104 000b 	add.w	r0, r4, #11
 800450c:	1d23      	adds	r3, r4, #4
 800450e:	f020 0007 	bic.w	r0, r0, #7
 8004512:	1ac2      	subs	r2, r0, r3
 8004514:	d0cc      	beq.n	80044b0 <_malloc_r+0x20>
 8004516:	1a1b      	subs	r3, r3, r0
 8004518:	50a3      	str	r3, [r4, r2]
 800451a:	e7c9      	b.n	80044b0 <_malloc_r+0x20>
 800451c:	4622      	mov	r2, r4
 800451e:	6864      	ldr	r4, [r4, #4]
 8004520:	e7cc      	b.n	80044bc <_malloc_r+0x2c>
 8004522:	1cc4      	adds	r4, r0, #3
 8004524:	f024 0403 	bic.w	r4, r4, #3
 8004528:	42a0      	cmp	r0, r4
 800452a:	d0e3      	beq.n	80044f4 <_malloc_r+0x64>
 800452c:	1a21      	subs	r1, r4, r0
 800452e:	4630      	mov	r0, r6
 8004530:	f000 faf6 	bl	8004b20 <_sbrk_r>
 8004534:	3001      	adds	r0, #1
 8004536:	d1dd      	bne.n	80044f4 <_malloc_r+0x64>
 8004538:	e7cf      	b.n	80044da <_malloc_r+0x4a>
 800453a:	bf00      	nop
 800453c:	20000090 	.word	0x20000090
 8004540:	20000094 	.word	0x20000094

08004544 <__sfputc_r>:
 8004544:	6893      	ldr	r3, [r2, #8]
 8004546:	3b01      	subs	r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	b410      	push	{r4}
 800454c:	6093      	str	r3, [r2, #8]
 800454e:	da08      	bge.n	8004562 <__sfputc_r+0x1e>
 8004550:	6994      	ldr	r4, [r2, #24]
 8004552:	42a3      	cmp	r3, r4
 8004554:	db01      	blt.n	800455a <__sfputc_r+0x16>
 8004556:	290a      	cmp	r1, #10
 8004558:	d103      	bne.n	8004562 <__sfputc_r+0x1e>
 800455a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455e:	f7ff bc69 	b.w	8003e34 <__swbuf_r>
 8004562:	6813      	ldr	r3, [r2, #0]
 8004564:	1c58      	adds	r0, r3, #1
 8004566:	6010      	str	r0, [r2, #0]
 8004568:	7019      	strb	r1, [r3, #0]
 800456a:	4608      	mov	r0, r1
 800456c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004570:	4770      	bx	lr

08004572 <__sfputs_r>:
 8004572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004574:	4606      	mov	r6, r0
 8004576:	460f      	mov	r7, r1
 8004578:	4614      	mov	r4, r2
 800457a:	18d5      	adds	r5, r2, r3
 800457c:	42ac      	cmp	r4, r5
 800457e:	d101      	bne.n	8004584 <__sfputs_r+0x12>
 8004580:	2000      	movs	r0, #0
 8004582:	e007      	b.n	8004594 <__sfputs_r+0x22>
 8004584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004588:	463a      	mov	r2, r7
 800458a:	4630      	mov	r0, r6
 800458c:	f7ff ffda 	bl	8004544 <__sfputc_r>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d1f3      	bne.n	800457c <__sfputs_r+0xa>
 8004594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004598 <_vfiprintf_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	460d      	mov	r5, r1
 800459e:	b09d      	sub	sp, #116	; 0x74
 80045a0:	4614      	mov	r4, r2
 80045a2:	4698      	mov	r8, r3
 80045a4:	4606      	mov	r6, r0
 80045a6:	b118      	cbz	r0, 80045b0 <_vfiprintf_r+0x18>
 80045a8:	6983      	ldr	r3, [r0, #24]
 80045aa:	b90b      	cbnz	r3, 80045b0 <_vfiprintf_r+0x18>
 80045ac:	f7ff fe1c 	bl	80041e8 <__sinit>
 80045b0:	4b89      	ldr	r3, [pc, #548]	; (80047d8 <_vfiprintf_r+0x240>)
 80045b2:	429d      	cmp	r5, r3
 80045b4:	d11b      	bne.n	80045ee <_vfiprintf_r+0x56>
 80045b6:	6875      	ldr	r5, [r6, #4]
 80045b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045ba:	07d9      	lsls	r1, r3, #31
 80045bc:	d405      	bmi.n	80045ca <_vfiprintf_r+0x32>
 80045be:	89ab      	ldrh	r3, [r5, #12]
 80045c0:	059a      	lsls	r2, r3, #22
 80045c2:	d402      	bmi.n	80045ca <_vfiprintf_r+0x32>
 80045c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045c6:	f7ff fead 	bl	8004324 <__retarget_lock_acquire_recursive>
 80045ca:	89ab      	ldrh	r3, [r5, #12]
 80045cc:	071b      	lsls	r3, r3, #28
 80045ce:	d501      	bpl.n	80045d4 <_vfiprintf_r+0x3c>
 80045d0:	692b      	ldr	r3, [r5, #16]
 80045d2:	b9eb      	cbnz	r3, 8004610 <_vfiprintf_r+0x78>
 80045d4:	4629      	mov	r1, r5
 80045d6:	4630      	mov	r0, r6
 80045d8:	f7ff fc7e 	bl	8003ed8 <__swsetup_r>
 80045dc:	b1c0      	cbz	r0, 8004610 <_vfiprintf_r+0x78>
 80045de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045e0:	07dc      	lsls	r4, r3, #31
 80045e2:	d50e      	bpl.n	8004602 <_vfiprintf_r+0x6a>
 80045e4:	f04f 30ff 	mov.w	r0, #4294967295
 80045e8:	b01d      	add	sp, #116	; 0x74
 80045ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <_vfiprintf_r+0x244>)
 80045f0:	429d      	cmp	r5, r3
 80045f2:	d101      	bne.n	80045f8 <_vfiprintf_r+0x60>
 80045f4:	68b5      	ldr	r5, [r6, #8]
 80045f6:	e7df      	b.n	80045b8 <_vfiprintf_r+0x20>
 80045f8:	4b79      	ldr	r3, [pc, #484]	; (80047e0 <_vfiprintf_r+0x248>)
 80045fa:	429d      	cmp	r5, r3
 80045fc:	bf08      	it	eq
 80045fe:	68f5      	ldreq	r5, [r6, #12]
 8004600:	e7da      	b.n	80045b8 <_vfiprintf_r+0x20>
 8004602:	89ab      	ldrh	r3, [r5, #12]
 8004604:	0598      	lsls	r0, r3, #22
 8004606:	d4ed      	bmi.n	80045e4 <_vfiprintf_r+0x4c>
 8004608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800460a:	f7ff fe8c 	bl	8004326 <__retarget_lock_release_recursive>
 800460e:	e7e9      	b.n	80045e4 <_vfiprintf_r+0x4c>
 8004610:	2300      	movs	r3, #0
 8004612:	9309      	str	r3, [sp, #36]	; 0x24
 8004614:	2320      	movs	r3, #32
 8004616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800461a:	f8cd 800c 	str.w	r8, [sp, #12]
 800461e:	2330      	movs	r3, #48	; 0x30
 8004620:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047e4 <_vfiprintf_r+0x24c>
 8004624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004628:	f04f 0901 	mov.w	r9, #1
 800462c:	4623      	mov	r3, r4
 800462e:	469a      	mov	sl, r3
 8004630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004634:	b10a      	cbz	r2, 800463a <_vfiprintf_r+0xa2>
 8004636:	2a25      	cmp	r2, #37	; 0x25
 8004638:	d1f9      	bne.n	800462e <_vfiprintf_r+0x96>
 800463a:	ebba 0b04 	subs.w	fp, sl, r4
 800463e:	d00b      	beq.n	8004658 <_vfiprintf_r+0xc0>
 8004640:	465b      	mov	r3, fp
 8004642:	4622      	mov	r2, r4
 8004644:	4629      	mov	r1, r5
 8004646:	4630      	mov	r0, r6
 8004648:	f7ff ff93 	bl	8004572 <__sfputs_r>
 800464c:	3001      	adds	r0, #1
 800464e:	f000 80aa 	beq.w	80047a6 <_vfiprintf_r+0x20e>
 8004652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004654:	445a      	add	r2, fp
 8004656:	9209      	str	r2, [sp, #36]	; 0x24
 8004658:	f89a 3000 	ldrb.w	r3, [sl]
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80a2 	beq.w	80047a6 <_vfiprintf_r+0x20e>
 8004662:	2300      	movs	r3, #0
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800466c:	f10a 0a01 	add.w	sl, sl, #1
 8004670:	9304      	str	r3, [sp, #16]
 8004672:	9307      	str	r3, [sp, #28]
 8004674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004678:	931a      	str	r3, [sp, #104]	; 0x68
 800467a:	4654      	mov	r4, sl
 800467c:	2205      	movs	r2, #5
 800467e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004682:	4858      	ldr	r0, [pc, #352]	; (80047e4 <_vfiprintf_r+0x24c>)
 8004684:	f7fb fdcc 	bl	8000220 <memchr>
 8004688:	9a04      	ldr	r2, [sp, #16]
 800468a:	b9d8      	cbnz	r0, 80046c4 <_vfiprintf_r+0x12c>
 800468c:	06d1      	lsls	r1, r2, #27
 800468e:	bf44      	itt	mi
 8004690:	2320      	movmi	r3, #32
 8004692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004696:	0713      	lsls	r3, r2, #28
 8004698:	bf44      	itt	mi
 800469a:	232b      	movmi	r3, #43	; 0x2b
 800469c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046a0:	f89a 3000 	ldrb.w	r3, [sl]
 80046a4:	2b2a      	cmp	r3, #42	; 0x2a
 80046a6:	d015      	beq.n	80046d4 <_vfiprintf_r+0x13c>
 80046a8:	9a07      	ldr	r2, [sp, #28]
 80046aa:	4654      	mov	r4, sl
 80046ac:	2000      	movs	r0, #0
 80046ae:	f04f 0c0a 	mov.w	ip, #10
 80046b2:	4621      	mov	r1, r4
 80046b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b8:	3b30      	subs	r3, #48	; 0x30
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	d94e      	bls.n	800475c <_vfiprintf_r+0x1c4>
 80046be:	b1b0      	cbz	r0, 80046ee <_vfiprintf_r+0x156>
 80046c0:	9207      	str	r2, [sp, #28]
 80046c2:	e014      	b.n	80046ee <_vfiprintf_r+0x156>
 80046c4:	eba0 0308 	sub.w	r3, r0, r8
 80046c8:	fa09 f303 	lsl.w	r3, r9, r3
 80046cc:	4313      	orrs	r3, r2
 80046ce:	9304      	str	r3, [sp, #16]
 80046d0:	46a2      	mov	sl, r4
 80046d2:	e7d2      	b.n	800467a <_vfiprintf_r+0xe2>
 80046d4:	9b03      	ldr	r3, [sp, #12]
 80046d6:	1d19      	adds	r1, r3, #4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	9103      	str	r1, [sp, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfbb      	ittet	lt
 80046e0:	425b      	neglt	r3, r3
 80046e2:	f042 0202 	orrlt.w	r2, r2, #2
 80046e6:	9307      	strge	r3, [sp, #28]
 80046e8:	9307      	strlt	r3, [sp, #28]
 80046ea:	bfb8      	it	lt
 80046ec:	9204      	strlt	r2, [sp, #16]
 80046ee:	7823      	ldrb	r3, [r4, #0]
 80046f0:	2b2e      	cmp	r3, #46	; 0x2e
 80046f2:	d10c      	bne.n	800470e <_vfiprintf_r+0x176>
 80046f4:	7863      	ldrb	r3, [r4, #1]
 80046f6:	2b2a      	cmp	r3, #42	; 0x2a
 80046f8:	d135      	bne.n	8004766 <_vfiprintf_r+0x1ce>
 80046fa:	9b03      	ldr	r3, [sp, #12]
 80046fc:	1d1a      	adds	r2, r3, #4
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	9203      	str	r2, [sp, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfb8      	it	lt
 8004706:	f04f 33ff 	movlt.w	r3, #4294967295
 800470a:	3402      	adds	r4, #2
 800470c:	9305      	str	r3, [sp, #20]
 800470e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047f4 <_vfiprintf_r+0x25c>
 8004712:	7821      	ldrb	r1, [r4, #0]
 8004714:	2203      	movs	r2, #3
 8004716:	4650      	mov	r0, sl
 8004718:	f7fb fd82 	bl	8000220 <memchr>
 800471c:	b140      	cbz	r0, 8004730 <_vfiprintf_r+0x198>
 800471e:	2340      	movs	r3, #64	; 0x40
 8004720:	eba0 000a 	sub.w	r0, r0, sl
 8004724:	fa03 f000 	lsl.w	r0, r3, r0
 8004728:	9b04      	ldr	r3, [sp, #16]
 800472a:	4303      	orrs	r3, r0
 800472c:	3401      	adds	r4, #1
 800472e:	9304      	str	r3, [sp, #16]
 8004730:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004734:	482c      	ldr	r0, [pc, #176]	; (80047e8 <_vfiprintf_r+0x250>)
 8004736:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800473a:	2206      	movs	r2, #6
 800473c:	f7fb fd70 	bl	8000220 <memchr>
 8004740:	2800      	cmp	r0, #0
 8004742:	d03f      	beq.n	80047c4 <_vfiprintf_r+0x22c>
 8004744:	4b29      	ldr	r3, [pc, #164]	; (80047ec <_vfiprintf_r+0x254>)
 8004746:	bb1b      	cbnz	r3, 8004790 <_vfiprintf_r+0x1f8>
 8004748:	9b03      	ldr	r3, [sp, #12]
 800474a:	3307      	adds	r3, #7
 800474c:	f023 0307 	bic.w	r3, r3, #7
 8004750:	3308      	adds	r3, #8
 8004752:	9303      	str	r3, [sp, #12]
 8004754:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004756:	443b      	add	r3, r7
 8004758:	9309      	str	r3, [sp, #36]	; 0x24
 800475a:	e767      	b.n	800462c <_vfiprintf_r+0x94>
 800475c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004760:	460c      	mov	r4, r1
 8004762:	2001      	movs	r0, #1
 8004764:	e7a5      	b.n	80046b2 <_vfiprintf_r+0x11a>
 8004766:	2300      	movs	r3, #0
 8004768:	3401      	adds	r4, #1
 800476a:	9305      	str	r3, [sp, #20]
 800476c:	4619      	mov	r1, r3
 800476e:	f04f 0c0a 	mov.w	ip, #10
 8004772:	4620      	mov	r0, r4
 8004774:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004778:	3a30      	subs	r2, #48	; 0x30
 800477a:	2a09      	cmp	r2, #9
 800477c:	d903      	bls.n	8004786 <_vfiprintf_r+0x1ee>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0c5      	beq.n	800470e <_vfiprintf_r+0x176>
 8004782:	9105      	str	r1, [sp, #20]
 8004784:	e7c3      	b.n	800470e <_vfiprintf_r+0x176>
 8004786:	fb0c 2101 	mla	r1, ip, r1, r2
 800478a:	4604      	mov	r4, r0
 800478c:	2301      	movs	r3, #1
 800478e:	e7f0      	b.n	8004772 <_vfiprintf_r+0x1da>
 8004790:	ab03      	add	r3, sp, #12
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	462a      	mov	r2, r5
 8004796:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <_vfiprintf_r+0x258>)
 8004798:	a904      	add	r1, sp, #16
 800479a:	4630      	mov	r0, r6
 800479c:	f3af 8000 	nop.w
 80047a0:	4607      	mov	r7, r0
 80047a2:	1c78      	adds	r0, r7, #1
 80047a4:	d1d6      	bne.n	8004754 <_vfiprintf_r+0x1bc>
 80047a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047a8:	07d9      	lsls	r1, r3, #31
 80047aa:	d405      	bmi.n	80047b8 <_vfiprintf_r+0x220>
 80047ac:	89ab      	ldrh	r3, [r5, #12]
 80047ae:	059a      	lsls	r2, r3, #22
 80047b0:	d402      	bmi.n	80047b8 <_vfiprintf_r+0x220>
 80047b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047b4:	f7ff fdb7 	bl	8004326 <__retarget_lock_release_recursive>
 80047b8:	89ab      	ldrh	r3, [r5, #12]
 80047ba:	065b      	lsls	r3, r3, #25
 80047bc:	f53f af12 	bmi.w	80045e4 <_vfiprintf_r+0x4c>
 80047c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047c2:	e711      	b.n	80045e8 <_vfiprintf_r+0x50>
 80047c4:	ab03      	add	r3, sp, #12
 80047c6:	9300      	str	r3, [sp, #0]
 80047c8:	462a      	mov	r2, r5
 80047ca:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <_vfiprintf_r+0x258>)
 80047cc:	a904      	add	r1, sp, #16
 80047ce:	4630      	mov	r0, r6
 80047d0:	f000 f880 	bl	80048d4 <_printf_i>
 80047d4:	e7e4      	b.n	80047a0 <_vfiprintf_r+0x208>
 80047d6:	bf00      	nop
 80047d8:	08004d50 	.word	0x08004d50
 80047dc:	08004d70 	.word	0x08004d70
 80047e0:	08004d30 	.word	0x08004d30
 80047e4:	08004d90 	.word	0x08004d90
 80047e8:	08004d9a 	.word	0x08004d9a
 80047ec:	00000000 	.word	0x00000000
 80047f0:	08004573 	.word	0x08004573
 80047f4:	08004d96 	.word	0x08004d96

080047f8 <_printf_common>:
 80047f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047fc:	4616      	mov	r6, r2
 80047fe:	4699      	mov	r9, r3
 8004800:	688a      	ldr	r2, [r1, #8]
 8004802:	690b      	ldr	r3, [r1, #16]
 8004804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004808:	4293      	cmp	r3, r2
 800480a:	bfb8      	it	lt
 800480c:	4613      	movlt	r3, r2
 800480e:	6033      	str	r3, [r6, #0]
 8004810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004814:	4607      	mov	r7, r0
 8004816:	460c      	mov	r4, r1
 8004818:	b10a      	cbz	r2, 800481e <_printf_common+0x26>
 800481a:	3301      	adds	r3, #1
 800481c:	6033      	str	r3, [r6, #0]
 800481e:	6823      	ldr	r3, [r4, #0]
 8004820:	0699      	lsls	r1, r3, #26
 8004822:	bf42      	ittt	mi
 8004824:	6833      	ldrmi	r3, [r6, #0]
 8004826:	3302      	addmi	r3, #2
 8004828:	6033      	strmi	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	f015 0506 	ands.w	r5, r5, #6
 8004830:	d106      	bne.n	8004840 <_printf_common+0x48>
 8004832:	f104 0a19 	add.w	sl, r4, #25
 8004836:	68e3      	ldr	r3, [r4, #12]
 8004838:	6832      	ldr	r2, [r6, #0]
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	42ab      	cmp	r3, r5
 800483e:	dc26      	bgt.n	800488e <_printf_common+0x96>
 8004840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004844:	1e13      	subs	r3, r2, #0
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	bf18      	it	ne
 800484a:	2301      	movne	r3, #1
 800484c:	0692      	lsls	r2, r2, #26
 800484e:	d42b      	bmi.n	80048a8 <_printf_common+0xb0>
 8004850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004854:	4649      	mov	r1, r9
 8004856:	4638      	mov	r0, r7
 8004858:	47c0      	blx	r8
 800485a:	3001      	adds	r0, #1
 800485c:	d01e      	beq.n	800489c <_printf_common+0xa4>
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	68e5      	ldr	r5, [r4, #12]
 8004862:	6832      	ldr	r2, [r6, #0]
 8004864:	f003 0306 	and.w	r3, r3, #6
 8004868:	2b04      	cmp	r3, #4
 800486a:	bf08      	it	eq
 800486c:	1aad      	subeq	r5, r5, r2
 800486e:	68a3      	ldr	r3, [r4, #8]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	bf0c      	ite	eq
 8004874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004878:	2500      	movne	r5, #0
 800487a:	4293      	cmp	r3, r2
 800487c:	bfc4      	itt	gt
 800487e:	1a9b      	subgt	r3, r3, r2
 8004880:	18ed      	addgt	r5, r5, r3
 8004882:	2600      	movs	r6, #0
 8004884:	341a      	adds	r4, #26
 8004886:	42b5      	cmp	r5, r6
 8004888:	d11a      	bne.n	80048c0 <_printf_common+0xc8>
 800488a:	2000      	movs	r0, #0
 800488c:	e008      	b.n	80048a0 <_printf_common+0xa8>
 800488e:	2301      	movs	r3, #1
 8004890:	4652      	mov	r2, sl
 8004892:	4649      	mov	r1, r9
 8004894:	4638      	mov	r0, r7
 8004896:	47c0      	blx	r8
 8004898:	3001      	adds	r0, #1
 800489a:	d103      	bne.n	80048a4 <_printf_common+0xac>
 800489c:	f04f 30ff 	mov.w	r0, #4294967295
 80048a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048a4:	3501      	adds	r5, #1
 80048a6:	e7c6      	b.n	8004836 <_printf_common+0x3e>
 80048a8:	18e1      	adds	r1, r4, r3
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	2030      	movs	r0, #48	; 0x30
 80048ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048b2:	4422      	add	r2, r4
 80048b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048bc:	3302      	adds	r3, #2
 80048be:	e7c7      	b.n	8004850 <_printf_common+0x58>
 80048c0:	2301      	movs	r3, #1
 80048c2:	4622      	mov	r2, r4
 80048c4:	4649      	mov	r1, r9
 80048c6:	4638      	mov	r0, r7
 80048c8:	47c0      	blx	r8
 80048ca:	3001      	adds	r0, #1
 80048cc:	d0e6      	beq.n	800489c <_printf_common+0xa4>
 80048ce:	3601      	adds	r6, #1
 80048d0:	e7d9      	b.n	8004886 <_printf_common+0x8e>
	...

080048d4 <_printf_i>:
 80048d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048d8:	460c      	mov	r4, r1
 80048da:	4691      	mov	r9, r2
 80048dc:	7e27      	ldrb	r7, [r4, #24]
 80048de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048e0:	2f78      	cmp	r7, #120	; 0x78
 80048e2:	4680      	mov	r8, r0
 80048e4:	469a      	mov	sl, r3
 80048e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048ea:	d807      	bhi.n	80048fc <_printf_i+0x28>
 80048ec:	2f62      	cmp	r7, #98	; 0x62
 80048ee:	d80a      	bhi.n	8004906 <_printf_i+0x32>
 80048f0:	2f00      	cmp	r7, #0
 80048f2:	f000 80d8 	beq.w	8004aa6 <_printf_i+0x1d2>
 80048f6:	2f58      	cmp	r7, #88	; 0x58
 80048f8:	f000 80a3 	beq.w	8004a42 <_printf_i+0x16e>
 80048fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004904:	e03a      	b.n	800497c <_printf_i+0xa8>
 8004906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800490a:	2b15      	cmp	r3, #21
 800490c:	d8f6      	bhi.n	80048fc <_printf_i+0x28>
 800490e:	a001      	add	r0, pc, #4	; (adr r0, 8004914 <_printf_i+0x40>)
 8004910:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004914:	0800496d 	.word	0x0800496d
 8004918:	08004981 	.word	0x08004981
 800491c:	080048fd 	.word	0x080048fd
 8004920:	080048fd 	.word	0x080048fd
 8004924:	080048fd 	.word	0x080048fd
 8004928:	080048fd 	.word	0x080048fd
 800492c:	08004981 	.word	0x08004981
 8004930:	080048fd 	.word	0x080048fd
 8004934:	080048fd 	.word	0x080048fd
 8004938:	080048fd 	.word	0x080048fd
 800493c:	080048fd 	.word	0x080048fd
 8004940:	08004a8d 	.word	0x08004a8d
 8004944:	080049b1 	.word	0x080049b1
 8004948:	08004a6f 	.word	0x08004a6f
 800494c:	080048fd 	.word	0x080048fd
 8004950:	080048fd 	.word	0x080048fd
 8004954:	08004aaf 	.word	0x08004aaf
 8004958:	080048fd 	.word	0x080048fd
 800495c:	080049b1 	.word	0x080049b1
 8004960:	080048fd 	.word	0x080048fd
 8004964:	080048fd 	.word	0x080048fd
 8004968:	08004a77 	.word	0x08004a77
 800496c:	680b      	ldr	r3, [r1, #0]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	600a      	str	r2, [r1, #0]
 8004974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800497c:	2301      	movs	r3, #1
 800497e:	e0a3      	b.n	8004ac8 <_printf_i+0x1f4>
 8004980:	6825      	ldr	r5, [r4, #0]
 8004982:	6808      	ldr	r0, [r1, #0]
 8004984:	062e      	lsls	r6, r5, #24
 8004986:	f100 0304 	add.w	r3, r0, #4
 800498a:	d50a      	bpl.n	80049a2 <_printf_i+0xce>
 800498c:	6805      	ldr	r5, [r0, #0]
 800498e:	600b      	str	r3, [r1, #0]
 8004990:	2d00      	cmp	r5, #0
 8004992:	da03      	bge.n	800499c <_printf_i+0xc8>
 8004994:	232d      	movs	r3, #45	; 0x2d
 8004996:	426d      	negs	r5, r5
 8004998:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800499c:	485e      	ldr	r0, [pc, #376]	; (8004b18 <_printf_i+0x244>)
 800499e:	230a      	movs	r3, #10
 80049a0:	e019      	b.n	80049d6 <_printf_i+0x102>
 80049a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80049a6:	6805      	ldr	r5, [r0, #0]
 80049a8:	600b      	str	r3, [r1, #0]
 80049aa:	bf18      	it	ne
 80049ac:	b22d      	sxthne	r5, r5
 80049ae:	e7ef      	b.n	8004990 <_printf_i+0xbc>
 80049b0:	680b      	ldr	r3, [r1, #0]
 80049b2:	6825      	ldr	r5, [r4, #0]
 80049b4:	1d18      	adds	r0, r3, #4
 80049b6:	6008      	str	r0, [r1, #0]
 80049b8:	0628      	lsls	r0, r5, #24
 80049ba:	d501      	bpl.n	80049c0 <_printf_i+0xec>
 80049bc:	681d      	ldr	r5, [r3, #0]
 80049be:	e002      	b.n	80049c6 <_printf_i+0xf2>
 80049c0:	0669      	lsls	r1, r5, #25
 80049c2:	d5fb      	bpl.n	80049bc <_printf_i+0xe8>
 80049c4:	881d      	ldrh	r5, [r3, #0]
 80049c6:	4854      	ldr	r0, [pc, #336]	; (8004b18 <_printf_i+0x244>)
 80049c8:	2f6f      	cmp	r7, #111	; 0x6f
 80049ca:	bf0c      	ite	eq
 80049cc:	2308      	moveq	r3, #8
 80049ce:	230a      	movne	r3, #10
 80049d0:	2100      	movs	r1, #0
 80049d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049d6:	6866      	ldr	r6, [r4, #4]
 80049d8:	60a6      	str	r6, [r4, #8]
 80049da:	2e00      	cmp	r6, #0
 80049dc:	bfa2      	ittt	ge
 80049de:	6821      	ldrge	r1, [r4, #0]
 80049e0:	f021 0104 	bicge.w	r1, r1, #4
 80049e4:	6021      	strge	r1, [r4, #0]
 80049e6:	b90d      	cbnz	r5, 80049ec <_printf_i+0x118>
 80049e8:	2e00      	cmp	r6, #0
 80049ea:	d04d      	beq.n	8004a88 <_printf_i+0x1b4>
 80049ec:	4616      	mov	r6, r2
 80049ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80049f2:	fb03 5711 	mls	r7, r3, r1, r5
 80049f6:	5dc7      	ldrb	r7, [r0, r7]
 80049f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049fc:	462f      	mov	r7, r5
 80049fe:	42bb      	cmp	r3, r7
 8004a00:	460d      	mov	r5, r1
 8004a02:	d9f4      	bls.n	80049ee <_printf_i+0x11a>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d10b      	bne.n	8004a20 <_printf_i+0x14c>
 8004a08:	6823      	ldr	r3, [r4, #0]
 8004a0a:	07df      	lsls	r7, r3, #31
 8004a0c:	d508      	bpl.n	8004a20 <_printf_i+0x14c>
 8004a0e:	6923      	ldr	r3, [r4, #16]
 8004a10:	6861      	ldr	r1, [r4, #4]
 8004a12:	4299      	cmp	r1, r3
 8004a14:	bfde      	ittt	le
 8004a16:	2330      	movle	r3, #48	; 0x30
 8004a18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004a1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004a20:	1b92      	subs	r2, r2, r6
 8004a22:	6122      	str	r2, [r4, #16]
 8004a24:	f8cd a000 	str.w	sl, [sp]
 8004a28:	464b      	mov	r3, r9
 8004a2a:	aa03      	add	r2, sp, #12
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4640      	mov	r0, r8
 8004a30:	f7ff fee2 	bl	80047f8 <_printf_common>
 8004a34:	3001      	adds	r0, #1
 8004a36:	d14c      	bne.n	8004ad2 <_printf_i+0x1fe>
 8004a38:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3c:	b004      	add	sp, #16
 8004a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a42:	4835      	ldr	r0, [pc, #212]	; (8004b18 <_printf_i+0x244>)
 8004a44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a48:	6823      	ldr	r3, [r4, #0]
 8004a4a:	680e      	ldr	r6, [r1, #0]
 8004a4c:	061f      	lsls	r7, r3, #24
 8004a4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a52:	600e      	str	r6, [r1, #0]
 8004a54:	d514      	bpl.n	8004a80 <_printf_i+0x1ac>
 8004a56:	07d9      	lsls	r1, r3, #31
 8004a58:	bf44      	itt	mi
 8004a5a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a5e:	6023      	strmi	r3, [r4, #0]
 8004a60:	b91d      	cbnz	r5, 8004a6a <_printf_i+0x196>
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	f023 0320 	bic.w	r3, r3, #32
 8004a68:	6023      	str	r3, [r4, #0]
 8004a6a:	2310      	movs	r3, #16
 8004a6c:	e7b0      	b.n	80049d0 <_printf_i+0xfc>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	f043 0320 	orr.w	r3, r3, #32
 8004a74:	6023      	str	r3, [r4, #0]
 8004a76:	2378      	movs	r3, #120	; 0x78
 8004a78:	4828      	ldr	r0, [pc, #160]	; (8004b1c <_printf_i+0x248>)
 8004a7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a7e:	e7e3      	b.n	8004a48 <_printf_i+0x174>
 8004a80:	065e      	lsls	r6, r3, #25
 8004a82:	bf48      	it	mi
 8004a84:	b2ad      	uxthmi	r5, r5
 8004a86:	e7e6      	b.n	8004a56 <_printf_i+0x182>
 8004a88:	4616      	mov	r6, r2
 8004a8a:	e7bb      	b.n	8004a04 <_printf_i+0x130>
 8004a8c:	680b      	ldr	r3, [r1, #0]
 8004a8e:	6826      	ldr	r6, [r4, #0]
 8004a90:	6960      	ldr	r0, [r4, #20]
 8004a92:	1d1d      	adds	r5, r3, #4
 8004a94:	600d      	str	r5, [r1, #0]
 8004a96:	0635      	lsls	r5, r6, #24
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	d501      	bpl.n	8004aa0 <_printf_i+0x1cc>
 8004a9c:	6018      	str	r0, [r3, #0]
 8004a9e:	e002      	b.n	8004aa6 <_printf_i+0x1d2>
 8004aa0:	0671      	lsls	r1, r6, #25
 8004aa2:	d5fb      	bpl.n	8004a9c <_printf_i+0x1c8>
 8004aa4:	8018      	strh	r0, [r3, #0]
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6123      	str	r3, [r4, #16]
 8004aaa:	4616      	mov	r6, r2
 8004aac:	e7ba      	b.n	8004a24 <_printf_i+0x150>
 8004aae:	680b      	ldr	r3, [r1, #0]
 8004ab0:	1d1a      	adds	r2, r3, #4
 8004ab2:	600a      	str	r2, [r1, #0]
 8004ab4:	681e      	ldr	r6, [r3, #0]
 8004ab6:	6862      	ldr	r2, [r4, #4]
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7fb fbb0 	bl	8000220 <memchr>
 8004ac0:	b108      	cbz	r0, 8004ac6 <_printf_i+0x1f2>
 8004ac2:	1b80      	subs	r0, r0, r6
 8004ac4:	6060      	str	r0, [r4, #4]
 8004ac6:	6863      	ldr	r3, [r4, #4]
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	2300      	movs	r3, #0
 8004acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad0:	e7a8      	b.n	8004a24 <_printf_i+0x150>
 8004ad2:	6923      	ldr	r3, [r4, #16]
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	4649      	mov	r1, r9
 8004ad8:	4640      	mov	r0, r8
 8004ada:	47d0      	blx	sl
 8004adc:	3001      	adds	r0, #1
 8004ade:	d0ab      	beq.n	8004a38 <_printf_i+0x164>
 8004ae0:	6823      	ldr	r3, [r4, #0]
 8004ae2:	079b      	lsls	r3, r3, #30
 8004ae4:	d413      	bmi.n	8004b0e <_printf_i+0x23a>
 8004ae6:	68e0      	ldr	r0, [r4, #12]
 8004ae8:	9b03      	ldr	r3, [sp, #12]
 8004aea:	4298      	cmp	r0, r3
 8004aec:	bfb8      	it	lt
 8004aee:	4618      	movlt	r0, r3
 8004af0:	e7a4      	b.n	8004a3c <_printf_i+0x168>
 8004af2:	2301      	movs	r3, #1
 8004af4:	4632      	mov	r2, r6
 8004af6:	4649      	mov	r1, r9
 8004af8:	4640      	mov	r0, r8
 8004afa:	47d0      	blx	sl
 8004afc:	3001      	adds	r0, #1
 8004afe:	d09b      	beq.n	8004a38 <_printf_i+0x164>
 8004b00:	3501      	adds	r5, #1
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	9903      	ldr	r1, [sp, #12]
 8004b06:	1a5b      	subs	r3, r3, r1
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dcf2      	bgt.n	8004af2 <_printf_i+0x21e>
 8004b0c:	e7eb      	b.n	8004ae6 <_printf_i+0x212>
 8004b0e:	2500      	movs	r5, #0
 8004b10:	f104 0619 	add.w	r6, r4, #25
 8004b14:	e7f5      	b.n	8004b02 <_printf_i+0x22e>
 8004b16:	bf00      	nop
 8004b18:	08004da1 	.word	0x08004da1
 8004b1c:	08004db2 	.word	0x08004db2

08004b20 <_sbrk_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	4d06      	ldr	r5, [pc, #24]	; (8004b3c <_sbrk_r+0x1c>)
 8004b24:	2300      	movs	r3, #0
 8004b26:	4604      	mov	r4, r0
 8004b28:	4608      	mov	r0, r1
 8004b2a:	602b      	str	r3, [r5, #0]
 8004b2c:	f7fb ff24 	bl	8000978 <_sbrk>
 8004b30:	1c43      	adds	r3, r0, #1
 8004b32:	d102      	bne.n	8004b3a <_sbrk_r+0x1a>
 8004b34:	682b      	ldr	r3, [r5, #0]
 8004b36:	b103      	cbz	r3, 8004b3a <_sbrk_r+0x1a>
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	bd38      	pop	{r3, r4, r5, pc}
 8004b3c:	200001d0 	.word	0x200001d0

08004b40 <__sread>:
 8004b40:	b510      	push	{r4, lr}
 8004b42:	460c      	mov	r4, r1
 8004b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b48:	f000 f8a0 	bl	8004c8c <_read_r>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	bfab      	itete	ge
 8004b50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b52:	89a3      	ldrhlt	r3, [r4, #12]
 8004b54:	181b      	addge	r3, r3, r0
 8004b56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b5a:	bfac      	ite	ge
 8004b5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b5e:	81a3      	strhlt	r3, [r4, #12]
 8004b60:	bd10      	pop	{r4, pc}

08004b62 <__swrite>:
 8004b62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b66:	461f      	mov	r7, r3
 8004b68:	898b      	ldrh	r3, [r1, #12]
 8004b6a:	05db      	lsls	r3, r3, #23
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	460c      	mov	r4, r1
 8004b70:	4616      	mov	r6, r2
 8004b72:	d505      	bpl.n	8004b80 <__swrite+0x1e>
 8004b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b78:	2302      	movs	r3, #2
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f000 f868 	bl	8004c50 <_lseek_r>
 8004b80:	89a3      	ldrh	r3, [r4, #12]
 8004b82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b8a:	81a3      	strh	r3, [r4, #12]
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	463b      	mov	r3, r7
 8004b90:	4628      	mov	r0, r5
 8004b92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b96:	f000 b817 	b.w	8004bc8 <_write_r>

08004b9a <__sseek>:
 8004b9a:	b510      	push	{r4, lr}
 8004b9c:	460c      	mov	r4, r1
 8004b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ba2:	f000 f855 	bl	8004c50 <_lseek_r>
 8004ba6:	1c43      	adds	r3, r0, #1
 8004ba8:	89a3      	ldrh	r3, [r4, #12]
 8004baa:	bf15      	itete	ne
 8004bac:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bb6:	81a3      	strheq	r3, [r4, #12]
 8004bb8:	bf18      	it	ne
 8004bba:	81a3      	strhne	r3, [r4, #12]
 8004bbc:	bd10      	pop	{r4, pc}

08004bbe <__sclose>:
 8004bbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc2:	f000 b813 	b.w	8004bec <_close_r>
	...

08004bc8 <_write_r>:
 8004bc8:	b538      	push	{r3, r4, r5, lr}
 8004bca:	4d07      	ldr	r5, [pc, #28]	; (8004be8 <_write_r+0x20>)
 8004bcc:	4604      	mov	r4, r0
 8004bce:	4608      	mov	r0, r1
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	f7fb fe7d 	bl	80008d6 <_write>
 8004bdc:	1c43      	adds	r3, r0, #1
 8004bde:	d102      	bne.n	8004be6 <_write_r+0x1e>
 8004be0:	682b      	ldr	r3, [r5, #0]
 8004be2:	b103      	cbz	r3, 8004be6 <_write_r+0x1e>
 8004be4:	6023      	str	r3, [r4, #0]
 8004be6:	bd38      	pop	{r3, r4, r5, pc}
 8004be8:	200001d0 	.word	0x200001d0

08004bec <_close_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4d06      	ldr	r5, [pc, #24]	; (8004c08 <_close_r+0x1c>)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	f7fb fe89 	bl	800090e <_close>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_close_r+0x1a>
 8004c00:	682b      	ldr	r3, [r5, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_close_r+0x1a>
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	200001d0 	.word	0x200001d0

08004c0c <_fstat_r>:
 8004c0c:	b538      	push	{r3, r4, r5, lr}
 8004c0e:	4d07      	ldr	r5, [pc, #28]	; (8004c2c <_fstat_r+0x20>)
 8004c10:	2300      	movs	r3, #0
 8004c12:	4604      	mov	r4, r0
 8004c14:	4608      	mov	r0, r1
 8004c16:	4611      	mov	r1, r2
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	f7fb fe84 	bl	8000926 <_fstat>
 8004c1e:	1c43      	adds	r3, r0, #1
 8004c20:	d102      	bne.n	8004c28 <_fstat_r+0x1c>
 8004c22:	682b      	ldr	r3, [r5, #0]
 8004c24:	b103      	cbz	r3, 8004c28 <_fstat_r+0x1c>
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	bd38      	pop	{r3, r4, r5, pc}
 8004c2a:	bf00      	nop
 8004c2c:	200001d0 	.word	0x200001d0

08004c30 <_isatty_r>:
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	4d06      	ldr	r5, [pc, #24]	; (8004c4c <_isatty_r+0x1c>)
 8004c34:	2300      	movs	r3, #0
 8004c36:	4604      	mov	r4, r0
 8004c38:	4608      	mov	r0, r1
 8004c3a:	602b      	str	r3, [r5, #0]
 8004c3c:	f7fb fe83 	bl	8000946 <_isatty>
 8004c40:	1c43      	adds	r3, r0, #1
 8004c42:	d102      	bne.n	8004c4a <_isatty_r+0x1a>
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	b103      	cbz	r3, 8004c4a <_isatty_r+0x1a>
 8004c48:	6023      	str	r3, [r4, #0]
 8004c4a:	bd38      	pop	{r3, r4, r5, pc}
 8004c4c:	200001d0 	.word	0x200001d0

08004c50 <_lseek_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	4d07      	ldr	r5, [pc, #28]	; (8004c70 <_lseek_r+0x20>)
 8004c54:	4604      	mov	r4, r0
 8004c56:	4608      	mov	r0, r1
 8004c58:	4611      	mov	r1, r2
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	602a      	str	r2, [r5, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	f7fb fe7c 	bl	800095c <_lseek>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	d102      	bne.n	8004c6e <_lseek_r+0x1e>
 8004c68:	682b      	ldr	r3, [r5, #0]
 8004c6a:	b103      	cbz	r3, 8004c6e <_lseek_r+0x1e>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	200001d0 	.word	0x200001d0

08004c74 <__malloc_lock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__malloc_lock+0x8>)
 8004c76:	f7ff bb55 	b.w	8004324 <__retarget_lock_acquire_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	200001c8 	.word	0x200001c8

08004c80 <__malloc_unlock>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__malloc_unlock+0x8>)
 8004c82:	f7ff bb50 	b.w	8004326 <__retarget_lock_release_recursive>
 8004c86:	bf00      	nop
 8004c88:	200001c8 	.word	0x200001c8

08004c8c <_read_r>:
 8004c8c:	b538      	push	{r3, r4, r5, lr}
 8004c8e:	4d07      	ldr	r5, [pc, #28]	; (8004cac <_read_r+0x20>)
 8004c90:	4604      	mov	r4, r0
 8004c92:	4608      	mov	r0, r1
 8004c94:	4611      	mov	r1, r2
 8004c96:	2200      	movs	r2, #0
 8004c98:	602a      	str	r2, [r5, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f7fb fdfe 	bl	800089c <_read>
 8004ca0:	1c43      	adds	r3, r0, #1
 8004ca2:	d102      	bne.n	8004caa <_read_r+0x1e>
 8004ca4:	682b      	ldr	r3, [r5, #0]
 8004ca6:	b103      	cbz	r3, 8004caa <_read_r+0x1e>
 8004ca8:	6023      	str	r3, [r4, #0]
 8004caa:	bd38      	pop	{r3, r4, r5, pc}
 8004cac:	200001d0 	.word	0x200001d0

08004cb0 <_init>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr

08004cbc <_fini>:
 8004cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cbe:	bf00      	nop
 8004cc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cc2:	bc08      	pop	{r3}
 8004cc4:	469e      	mov	lr, r3
 8004cc6:	4770      	bx	lr
