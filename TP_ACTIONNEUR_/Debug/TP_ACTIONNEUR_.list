
TP_ACTIONNEUR_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e90  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007070  08007070  00017070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007354  08007354  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800735c  0800735c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000070  080073d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  080073d4  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a6a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003184  00000000  00000000  00038b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  0003bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003ce70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002051a  00000000  00000000  0003df08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014604  00000000  00000000  0005e422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70aa  00000000  00000000  00072a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00139ad0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000534c  00000000  00000000  00139b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007058 	.word	0x08007058

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08007058 	.word	0x08007058

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_dmul>:
 80002e0:	b570      	push	{r4, r5, r6, lr}
 80002e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ee:	bf1d      	ittte	ne
 80002f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002f4:	ea94 0f0c 	teqne	r4, ip
 80002f8:	ea95 0f0c 	teqne	r5, ip
 80002fc:	f000 f8de 	bleq	80004bc <__aeabi_dmul+0x1dc>
 8000300:	442c      	add	r4, r5
 8000302:	ea81 0603 	eor.w	r6, r1, r3
 8000306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800030a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800030e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000312:	bf18      	it	ne
 8000314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800031c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000320:	d038      	beq.n	8000394 <__aeabi_dmul+0xb4>
 8000322:	fba0 ce02 	umull	ip, lr, r0, r2
 8000326:	f04f 0500 	mov.w	r5, #0
 800032a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800032e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000332:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000336:	f04f 0600 	mov.w	r6, #0
 800033a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800033e:	f09c 0f00 	teq	ip, #0
 8000342:	bf18      	it	ne
 8000344:	f04e 0e01 	orrne.w	lr, lr, #1
 8000348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800034c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000354:	d204      	bcs.n	8000360 <__aeabi_dmul+0x80>
 8000356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800035a:	416d      	adcs	r5, r5
 800035c:	eb46 0606 	adc.w	r6, r6, r6
 8000360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800036c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000378:	bf88      	it	hi
 800037a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800037e:	d81e      	bhi.n	80003be <__aeabi_dmul+0xde>
 8000380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000384:	bf08      	it	eq
 8000386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800038a:	f150 0000 	adcs.w	r0, r0, #0
 800038e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000398:	ea46 0101 	orr.w	r1, r6, r1
 800039c:	ea40 0002 	orr.w	r0, r0, r2
 80003a0:	ea81 0103 	eor.w	r1, r1, r3
 80003a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80003a8:	bfc2      	ittt	gt
 80003aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80003ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80003b2:	bd70      	popgt	{r4, r5, r6, pc}
 80003b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80003b8:	f04f 0e00 	mov.w	lr, #0
 80003bc:	3c01      	subs	r4, #1
 80003be:	f300 80ab 	bgt.w	8000518 <__aeabi_dmul+0x238>
 80003c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003c6:	bfde      	ittt	le
 80003c8:	2000      	movle	r0, #0
 80003ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ce:	bd70      	pople	{r4, r5, r6, pc}
 80003d0:	f1c4 0400 	rsb	r4, r4, #0
 80003d4:	3c20      	subs	r4, #32
 80003d6:	da35      	bge.n	8000444 <__aeabi_dmul+0x164>
 80003d8:	340c      	adds	r4, #12
 80003da:	dc1b      	bgt.n	8000414 <__aeabi_dmul+0x134>
 80003dc:	f104 0414 	add.w	r4, r4, #20
 80003e0:	f1c4 0520 	rsb	r5, r4, #32
 80003e4:	fa00 f305 	lsl.w	r3, r0, r5
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f205 	lsl.w	r2, r1, r5
 80003f0:	ea40 0002 	orr.w	r0, r0, r2
 80003f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000400:	fa21 f604 	lsr.w	r6, r1, r4
 8000404:	eb42 0106 	adc.w	r1, r2, r6
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 040c 	rsb	r4, r4, #12
 8000418:	f1c4 0520 	rsb	r5, r4, #32
 800041c:	fa00 f304 	lsl.w	r3, r0, r4
 8000420:	fa20 f005 	lsr.w	r0, r0, r5
 8000424:	fa01 f204 	lsl.w	r2, r1, r4
 8000428:	ea40 0002 	orr.w	r0, r0, r2
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000434:	f141 0100 	adc.w	r1, r1, #0
 8000438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800043c:	bf08      	it	eq
 800043e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000442:	bd70      	pop	{r4, r5, r6, pc}
 8000444:	f1c4 0520 	rsb	r5, r4, #32
 8000448:	fa00 f205 	lsl.w	r2, r0, r5
 800044c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000450:	fa20 f304 	lsr.w	r3, r0, r4
 8000454:	fa01 f205 	lsl.w	r2, r1, r5
 8000458:	ea43 0302 	orr.w	r3, r3, r2
 800045c:	fa21 f004 	lsr.w	r0, r1, r4
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	fa21 f204 	lsr.w	r2, r1, r4
 8000468:	ea20 0002 	bic.w	r0, r0, r2
 800046c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000474:	bf08      	it	eq
 8000476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800047a:	bd70      	pop	{r4, r5, r6, pc}
 800047c:	f094 0f00 	teq	r4, #0
 8000480:	d10f      	bne.n	80004a2 <__aeabi_dmul+0x1c2>
 8000482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000486:	0040      	lsls	r0, r0, #1
 8000488:	eb41 0101 	adc.w	r1, r1, r1
 800048c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3c01      	subeq	r4, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1a6>
 8000496:	ea41 0106 	orr.w	r1, r1, r6
 800049a:	f095 0f00 	teq	r5, #0
 800049e:	bf18      	it	ne
 80004a0:	4770      	bxne	lr
 80004a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80004a6:	0052      	lsls	r2, r2, #1
 80004a8:	eb43 0303 	adc.w	r3, r3, r3
 80004ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80004b0:	bf08      	it	eq
 80004b2:	3d01      	subeq	r5, #1
 80004b4:	d0f7      	beq.n	80004a6 <__aeabi_dmul+0x1c6>
 80004b6:	ea43 0306 	orr.w	r3, r3, r6
 80004ba:	4770      	bx	lr
 80004bc:	ea94 0f0c 	teq	r4, ip
 80004c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004c4:	bf18      	it	ne
 80004c6:	ea95 0f0c 	teqne	r5, ip
 80004ca:	d00c      	beq.n	80004e6 <__aeabi_dmul+0x206>
 80004cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004d0:	bf18      	it	ne
 80004d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d6:	d1d1      	bne.n	800047c <__aeabi_dmul+0x19c>
 80004d8:	ea81 0103 	eor.w	r1, r1, r3
 80004dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	f04f 0000 	mov.w	r0, #0
 80004e4:	bd70      	pop	{r4, r5, r6, pc}
 80004e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ea:	bf06      	itte	eq
 80004ec:	4610      	moveq	r0, r2
 80004ee:	4619      	moveq	r1, r3
 80004f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004f4:	d019      	beq.n	800052a <__aeabi_dmul+0x24a>
 80004f6:	ea94 0f0c 	teq	r4, ip
 80004fa:	d102      	bne.n	8000502 <__aeabi_dmul+0x222>
 80004fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000500:	d113      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000502:	ea95 0f0c 	teq	r5, ip
 8000506:	d105      	bne.n	8000514 <__aeabi_dmul+0x234>
 8000508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800050c:	bf1c      	itt	ne
 800050e:	4610      	movne	r0, r2
 8000510:	4619      	movne	r1, r3
 8000512:	d10a      	bne.n	800052a <__aeabi_dmul+0x24a>
 8000514:	ea81 0103 	eor.w	r1, r1, r3
 8000518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800051c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd70      	pop	{r4, r5, r6, pc}
 800052a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800052e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000532:	bd70      	pop	{r4, r5, r6, pc}

08000534 <__aeabi_drsub>:
 8000534:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e002      	b.n	8000540 <__adddf3>
 800053a:	bf00      	nop

0800053c <__aeabi_dsub>:
 800053c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000540 <__adddf3>:
 8000540:	b530      	push	{r4, r5, lr}
 8000542:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000546:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800054a:	ea94 0f05 	teq	r4, r5
 800054e:	bf08      	it	eq
 8000550:	ea90 0f02 	teqeq	r0, r2
 8000554:	bf1f      	itttt	ne
 8000556:	ea54 0c00 	orrsne.w	ip, r4, r0
 800055a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800055e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000562:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000566:	f000 80e2 	beq.w	800072e <__adddf3+0x1ee>
 800056a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800056e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000572:	bfb8      	it	lt
 8000574:	426d      	neglt	r5, r5
 8000576:	dd0c      	ble.n	8000592 <__adddf3+0x52>
 8000578:	442c      	add	r4, r5
 800057a:	ea80 0202 	eor.w	r2, r0, r2
 800057e:	ea81 0303 	eor.w	r3, r1, r3
 8000582:	ea82 0000 	eor.w	r0, r2, r0
 8000586:	ea83 0101 	eor.w	r1, r3, r1
 800058a:	ea80 0202 	eor.w	r2, r0, r2
 800058e:	ea81 0303 	eor.w	r3, r1, r3
 8000592:	2d36      	cmp	r5, #54	; 0x36
 8000594:	bf88      	it	hi
 8000596:	bd30      	pophi	{r4, r5, pc}
 8000598:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800059c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005a8:	d002      	beq.n	80005b0 <__adddf3+0x70>
 80005aa:	4240      	negs	r0, r0
 80005ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005bc:	d002      	beq.n	80005c4 <__adddf3+0x84>
 80005be:	4252      	negs	r2, r2
 80005c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005c4:	ea94 0f05 	teq	r4, r5
 80005c8:	f000 80a7 	beq.w	800071a <__adddf3+0x1da>
 80005cc:	f1a4 0401 	sub.w	r4, r4, #1
 80005d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005d4:	db0d      	blt.n	80005f2 <__adddf3+0xb2>
 80005d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005da:	fa22 f205 	lsr.w	r2, r2, r5
 80005de:	1880      	adds	r0, r0, r2
 80005e0:	f141 0100 	adc.w	r1, r1, #0
 80005e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005e8:	1880      	adds	r0, r0, r2
 80005ea:	fa43 f305 	asr.w	r3, r3, r5
 80005ee:	4159      	adcs	r1, r3
 80005f0:	e00e      	b.n	8000610 <__adddf3+0xd0>
 80005f2:	f1a5 0520 	sub.w	r5, r5, #32
 80005f6:	f10e 0e20 	add.w	lr, lr, #32
 80005fa:	2a01      	cmp	r2, #1
 80005fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000600:	bf28      	it	cs
 8000602:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000606:	fa43 f305 	asr.w	r3, r3, r5
 800060a:	18c0      	adds	r0, r0, r3
 800060c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	d507      	bpl.n	8000626 <__adddf3+0xe6>
 8000616:	f04f 0e00 	mov.w	lr, #0
 800061a:	f1dc 0c00 	rsbs	ip, ip, #0
 800061e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000622:	eb6e 0101 	sbc.w	r1, lr, r1
 8000626:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800062a:	d31b      	bcc.n	8000664 <__adddf3+0x124>
 800062c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000630:	d30c      	bcc.n	800064c <__adddf3+0x10c>
 8000632:	0849      	lsrs	r1, r1, #1
 8000634:	ea5f 0030 	movs.w	r0, r0, rrx
 8000638:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800063c:	f104 0401 	add.w	r4, r4, #1
 8000640:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000644:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000648:	f080 809a 	bcs.w	8000780 <__adddf3+0x240>
 800064c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000656:	f150 0000 	adcs.w	r0, r0, #0
 800065a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065e:	ea41 0105 	orr.w	r1, r1, r5
 8000662:	bd30      	pop	{r4, r5, pc}
 8000664:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000668:	4140      	adcs	r0, r0
 800066a:	eb41 0101 	adc.w	r1, r1, r1
 800066e:	3c01      	subs	r4, #1
 8000670:	bf28      	it	cs
 8000672:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000676:	d2e9      	bcs.n	800064c <__adddf3+0x10c>
 8000678:	f091 0f00 	teq	r1, #0
 800067c:	bf04      	itt	eq
 800067e:	4601      	moveq	r1, r0
 8000680:	2000      	moveq	r0, #0
 8000682:	fab1 f381 	clz	r3, r1
 8000686:	bf08      	it	eq
 8000688:	3320      	addeq	r3, #32
 800068a:	f1a3 030b 	sub.w	r3, r3, #11
 800068e:	f1b3 0220 	subs.w	r2, r3, #32
 8000692:	da0c      	bge.n	80006ae <__adddf3+0x16e>
 8000694:	320c      	adds	r2, #12
 8000696:	dd08      	ble.n	80006aa <__adddf3+0x16a>
 8000698:	f102 0c14 	add.w	ip, r2, #20
 800069c:	f1c2 020c 	rsb	r2, r2, #12
 80006a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006a4:	fa21 f102 	lsr.w	r1, r1, r2
 80006a8:	e00c      	b.n	80006c4 <__adddf3+0x184>
 80006aa:	f102 0214 	add.w	r2, r2, #20
 80006ae:	bfd8      	it	le
 80006b0:	f1c2 0c20 	rsble	ip, r2, #32
 80006b4:	fa01 f102 	lsl.w	r1, r1, r2
 80006b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006bc:	bfdc      	itt	le
 80006be:	ea41 010c 	orrle.w	r1, r1, ip
 80006c2:	4090      	lslle	r0, r2
 80006c4:	1ae4      	subs	r4, r4, r3
 80006c6:	bfa2      	ittt	ge
 80006c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006cc:	4329      	orrge	r1, r5
 80006ce:	bd30      	popge	{r4, r5, pc}
 80006d0:	ea6f 0404 	mvn.w	r4, r4
 80006d4:	3c1f      	subs	r4, #31
 80006d6:	da1c      	bge.n	8000712 <__adddf3+0x1d2>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc0e      	bgt.n	80006fa <__adddf3+0x1ba>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0220 	rsb	r2, r4, #32
 80006e4:	fa20 f004 	lsr.w	r0, r0, r4
 80006e8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ec:	ea40 0003 	orr.w	r0, r0, r3
 80006f0:	fa21 f304 	lsr.w	r3, r1, r4
 80006f4:	ea45 0103 	orr.w	r1, r5, r3
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f1c4 040c 	rsb	r4, r4, #12
 80006fe:	f1c4 0220 	rsb	r2, r4, #32
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 f304 	lsl.w	r3, r1, r4
 800070a:	ea40 0003 	orr.w	r0, r0, r3
 800070e:	4629      	mov	r1, r5
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	fa21 f004 	lsr.w	r0, r1, r4
 8000716:	4629      	mov	r1, r5
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f094 0f00 	teq	r4, #0
 800071e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000722:	bf06      	itte	eq
 8000724:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000728:	3401      	addeq	r4, #1
 800072a:	3d01      	subne	r5, #1
 800072c:	e74e      	b.n	80005cc <__adddf3+0x8c>
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf18      	it	ne
 8000734:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000738:	d029      	beq.n	800078e <__adddf3+0x24e>
 800073a:	ea94 0f05 	teq	r4, r5
 800073e:	bf08      	it	eq
 8000740:	ea90 0f02 	teqeq	r0, r2
 8000744:	d005      	beq.n	8000752 <__adddf3+0x212>
 8000746:	ea54 0c00 	orrs.w	ip, r4, r0
 800074a:	bf04      	itt	eq
 800074c:	4619      	moveq	r1, r3
 800074e:	4610      	moveq	r0, r2
 8000750:	bd30      	pop	{r4, r5, pc}
 8000752:	ea91 0f03 	teq	r1, r3
 8000756:	bf1e      	ittt	ne
 8000758:	2100      	movne	r1, #0
 800075a:	2000      	movne	r0, #0
 800075c:	bd30      	popne	{r4, r5, pc}
 800075e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000762:	d105      	bne.n	8000770 <__adddf3+0x230>
 8000764:	0040      	lsls	r0, r0, #1
 8000766:	4149      	adcs	r1, r1
 8000768:	bf28      	it	cs
 800076a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800076e:	bd30      	pop	{r4, r5, pc}
 8000770:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000774:	bf3c      	itt	cc
 8000776:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800077a:	bd30      	popcc	{r4, r5, pc}
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000784:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd30      	pop	{r4, r5, pc}
 800078e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000792:	bf1a      	itte	ne
 8000794:	4619      	movne	r1, r3
 8000796:	4610      	movne	r0, r2
 8000798:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800079c:	bf1c      	itt	ne
 800079e:	460b      	movne	r3, r1
 80007a0:	4602      	movne	r2, r0
 80007a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007a6:	bf06      	itte	eq
 80007a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007ac:	ea91 0f03 	teqeq	r1, r3
 80007b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007b4:	bd30      	pop	{r4, r5, pc}
 80007b6:	bf00      	nop

080007b8 <__aeabi_ui2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f04f 0500 	mov.w	r5, #0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e750      	b.n	8000678 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_i2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007f0:	bf48      	it	mi
 80007f2:	4240      	negmi	r0, r0
 80007f4:	f04f 0100 	mov.w	r1, #0
 80007f8:	e73e      	b.n	8000678 <__adddf3+0x138>
 80007fa:	bf00      	nop

080007fc <__aeabi_f2d>:
 80007fc:	0042      	lsls	r2, r0, #1
 80007fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000802:	ea4f 0131 	mov.w	r1, r1, rrx
 8000806:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800080a:	bf1f      	itttt	ne
 800080c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000810:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000814:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000818:	4770      	bxne	lr
 800081a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800081e:	bf08      	it	eq
 8000820:	4770      	bxeq	lr
 8000822:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000826:	bf04      	itt	eq
 8000828:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800082c:	4770      	bxeq	lr
 800082e:	b530      	push	{r4, r5, lr}
 8000830:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000834:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000838:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800083c:	e71c      	b.n	8000678 <__adddf3+0x138>
 800083e:	bf00      	nop

08000840 <__aeabi_ul2d>:
 8000840:	ea50 0201 	orrs.w	r2, r0, r1
 8000844:	bf08      	it	eq
 8000846:	4770      	bxeq	lr
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	f04f 0500 	mov.w	r5, #0
 800084e:	e00a      	b.n	8000866 <__aeabi_l2d+0x16>

08000850 <__aeabi_l2d>:
 8000850:	ea50 0201 	orrs.w	r2, r0, r1
 8000854:	bf08      	it	eq
 8000856:	4770      	bxeq	lr
 8000858:	b530      	push	{r4, r5, lr}
 800085a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800085e:	d502      	bpl.n	8000866 <__aeabi_l2d+0x16>
 8000860:	4240      	negs	r0, r0
 8000862:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000866:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800086a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800086e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000872:	f43f aed8 	beq.w	8000626 <__adddf3+0xe6>
 8000876:	f04f 0203 	mov.w	r2, #3
 800087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087e:	bf18      	it	ne
 8000880:	3203      	addne	r2, #3
 8000882:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000886:	bf18      	it	ne
 8000888:	3203      	addne	r2, #3
 800088a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800088e:	f1c2 0320 	rsb	r3, r2, #32
 8000892:	fa00 fc03 	lsl.w	ip, r0, r3
 8000896:	fa20 f002 	lsr.w	r0, r0, r2
 800089a:	fa01 fe03 	lsl.w	lr, r1, r3
 800089e:	ea40 000e 	orr.w	r0, r0, lr
 80008a2:	fa21 f102 	lsr.w	r1, r1, r2
 80008a6:	4414      	add	r4, r2
 80008a8:	e6bd      	b.n	8000626 <__adddf3+0xe6>
 80008aa:	bf00      	nop

080008ac <__aeabi_d2uiz>:
 80008ac:	004a      	lsls	r2, r1, #1
 80008ae:	d211      	bcs.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008b4:	d211      	bcs.n	80008da <__aeabi_d2uiz+0x2e>
 80008b6:	d50d      	bpl.n	80008d4 <__aeabi_d2uiz+0x28>
 80008b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008c0:	d40e      	bmi.n	80008e0 <__aeabi_d2uiz+0x34>
 80008c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ce:	fa23 f002 	lsr.w	r0, r3, r2
 80008d2:	4770      	bx	lr
 80008d4:	f04f 0000 	mov.w	r0, #0
 80008d8:	4770      	bx	lr
 80008da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008de:	d102      	bne.n	80008e6 <__aeabi_d2uiz+0x3a>
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	4770      	bx	lr
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	4770      	bx	lr

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08c      	sub	sp, #48	; 0x30
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b5b      	ldr	r3, [pc, #364]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a5a      	ldr	r2, [pc, #360]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b58      	ldr	r3, [pc, #352]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	61bb      	str	r3, [r7, #24]
 8000c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c12:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a54      	ldr	r2, [pc, #336]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	617b      	str	r3, [r7, #20]
 8000c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	4b4f      	ldr	r3, [pc, #316]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a4e      	ldr	r2, [pc, #312]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b4c      	ldr	r3, [pc, #304]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c3e:	613b      	str	r3, [r7, #16]
 8000c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b49      	ldr	r3, [pc, #292]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a48      	ldr	r2, [pc, #288]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b46      	ldr	r3, [pc, #280]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	4a42      	ldr	r2, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c66:	4b40      	ldr	r3, [pc, #256]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c72:	4b3d      	ldr	r3, [pc, #244]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a3c      	ldr	r2, [pc, #240]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c78:	f043 0308 	orr.w	r3, r3, #8
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b3a      	ldr	r3, [pc, #232]	; (8000d68 <MX_GPIO_Init+0x184>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	607b      	str	r3, [r7, #4]
 8000c88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(start_GPIO_Port, start_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2110      	movs	r1, #16
 8000c8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c92:	f001 f9a3 	bl	8001fdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MOTOR_BUTTON_Pin;
 8000c96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9c:	4b33      	ldr	r3, [pc, #204]	; (8000d6c <MX_GPIO_Init+0x188>)
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MOTOR_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	f107 031c 	add.w	r3, r7, #28
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4831      	ldr	r0, [pc, #196]	; (8000d70 <MX_GPIO_Init+0x18c>)
 8000cac:	f001 f814 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC0 PC3
                           PC4 PC5 PC6 PC7
                           PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_3
 8000cb0:	f64d 73f9 	movw	r3, #57337	; 0xdff9
 8000cb4:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbe:	f107 031c 	add.w	r3, r7, #28
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	482a      	ldr	r0, [pc, #168]	; (8000d70 <MX_GPIO_Init+0x18c>)
 8000cc6:	f001 f807 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4825      	ldr	r0, [pc, #148]	; (8000d74 <MX_GPIO_Init+0x190>)
 8000ce0:	f000 fffa 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000ce4:	f649 73e3 	movw	r3, #40931	; 0x9fe3
 8000ce8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 031c 	add.w	r3, r7, #28
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfc:	f000 ffec 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = start_Pin;
 8000d00:	2310      	movs	r3, #16
 8000d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(start_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d1a:	f000 ffdd 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 PB11 PB12
                           PB13 PB14 PB15 PB3
                           PB4 PB5 PB6 PB7
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
 8000d1e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000d22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	; (8000d78 <MX_GPIO_Init+0x194>)
 8000d34:	f000 ffd0 	bl	8001cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_GPIO_Init+0x198>)
 8000d4c:	f000 ffc4 	bl	8001cd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2100      	movs	r1, #0
 8000d54:	2028      	movs	r0, #40	; 0x28
 8000d56:	f000 fed7 	bl	8001b08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d5a:	2028      	movs	r0, #40	; 0x28
 8000d5c:	f000 feee 	bl	8001b3c <HAL_NVIC_EnableIRQ>

}
 8000d60:	bf00      	nop
 8000d62:	3730      	adds	r7, #48	; 0x30
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48001800 	.word	0x48001800
 8000d78:	48000400 	.word	0x48000400
 8000d7c:	48000c00 	.word	0x48000c00

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fdd1 	bl	800192a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f812 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f7ff ff2a 	bl	8000be4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d90:	f000 fd0c 	bl	80017ac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d94:	f000 fbf4 	bl	8001580 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	printf("\r\n -------------- TP ACTIONNEUR -------------- \r\n");
 8000d98:	4804      	ldr	r0, [pc, #16]	; (8000dac <main+0x2c>)
 8000d9a:	f005 f989 	bl	80060b0 <puts>

	SHELL_init();
 8000d9e:	f000 f93f 	bl	8001020 <SHELL_init>
	MOTOR_init();
 8000da2:	f000 f881 	bl	8000ea8 <MOTOR_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		SHELL();
 8000da6:	f000 f969 	bl	800107c <SHELL>
 8000daa:	e7fc      	b.n	8000da6 <main+0x26>
 8000dac:	08007070 	.word	0x08007070

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0a4      	sub	sp, #144	; 0x90
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dba:	2238      	movs	r2, #56	; 0x38
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 f8e8 	bl	8005f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dd4:	463b      	mov	r3, r7
 8000dd6:	2244      	movs	r2, #68	; 0x44
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f005 f8da 	bl	8005f94 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de0:	2000      	movs	r0, #0
 8000de2:	f001 f92b 	bl	800203c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de6:	2302      	movs	r3, #2
 8000de8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dee:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2340      	movs	r3, #64	; 0x40
 8000df2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e00:	2355      	movs	r3, #85	; 0x55
 8000e02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 f9c1 	bl	80021a4 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000e28:	f000 f838 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2303      	movs	r3, #3
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e44:	2104      	movs	r1, #4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fcc4 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000e52:	f000 f823 	bl	8000e9c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e56:	2302      	movs	r3, #2
 8000e58:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 ff05 	bl	8002c70 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e6c:	f000 f816 	bl	8000e9c <Error_Handler>
  }
}
 8000e70:	bf00      	nop
 8000e72:	3790      	adds	r7, #144	; 0x90
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8a:	f000 fd67 	bl	800195c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40001000 	.word	0x40001000

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <Error_Handler+0x8>
	...

08000ea8 <MOTOR_init>:

#include <motor.h>

uint8_t motorStatus = 0;

uint8_t MOTOR_init(){
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(start_GPIO_Port, start_Pin, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eba:	f001 f88f 	bl	8001fdc <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ebe:	2108      	movs	r1, #8
 8000ec0:	4819      	ldr	r0, [pc, #100]	; (8000f28 <MOTOR_init+0x80>)
 8000ec2:	f002 f9e9 	bl	8003298 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	4817      	ldr	r0, [pc, #92]	; (8000f28 <MOTOR_init+0x80>)
 8000eca:	f002 f9e5 	bl	8003298 <HAL_TIM_PWM_Start>

	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4815      	ldr	r0, [pc, #84]	; (8000f28 <MOTOR_init+0x80>)
 8000ed2:	f003 f945 	bl	8004160 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4813      	ldr	r0, [pc, #76]	; (8000f28 <MOTOR_init+0x80>)
 8000eda:	f003 f941 	bl	8004160 <HAL_TIMEx_PWMN_Start>

	// Réglage des 4 PWM en complémentaire décalée
	TIM1->CCR2 = (uint32_t)(0.6*TIM1->ARR);
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MOTOR_init+0x84>)
 8000ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fc68 	bl	80007b8 <__aeabi_ui2d>
 8000ee8:	a30d      	add	r3, pc, #52	; (adr r3, 8000f20 <MOTOR_init+0x78>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff f9f7 	bl	80002e0 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4c0d      	ldr	r4, [pc, #52]	; (8000f2c <MOTOR_init+0x84>)
 8000ef8:	4610      	mov	r0, r2
 8000efa:	4619      	mov	r1, r3
 8000efc:	f7ff fcd6 	bl	80008ac <__aeabi_d2uiz>
 8000f00:	4603      	mov	r3, r0
 8000f02:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = (uint32_t)(TIM1->ARR - TIM1->CCR2);
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MOTOR_init+0x84>)
 8000f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MOTOR_init+0x84>)
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <MOTOR_init+0x84>)
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	63cb      	str	r3, [r1, #60]	; 0x3c

	return ret;
 8000f12:	79fb      	ldrb	r3, [r7, #7]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd90      	pop	{r4, r7, pc}
 8000f1c:	f3af 8000 	nop.w
 8000f20:	33333333 	.word	0x33333333
 8000f24:	3fe33333 	.word	0x3fe33333
 8000f28:	2000010c 	.word	0x2000010c
 8000f2c:	40012c00 	.word	0x40012c00

08000f30 <MOTOR_start>:

uint8_t MOTOR_start(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71fb      	strb	r3, [r7, #7]
	printf("Power ON\r\n");
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <MOTOR_start+0x2c>)
 8000f3c:	f005 f8b8 	bl	80060b0 <puts>
	HAL_GPIO_WritePin(start_GPIO_Port, start_Pin, GPIO_PIN_SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2110      	movs	r1, #16
 8000f44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f48:	f001 f848 	bl	8001fdc <HAL_GPIO_WritePin>
	motorStatus = 1;
 8000f4c:	4b04      	ldr	r3, [pc, #16]	; (8000f60 <MOTOR_start+0x30>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
	return ret;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	080070a4 	.word	0x080070a4
 8000f60:	2000008c 	.word	0x2000008c

08000f64 <MOTOR_stop>:

uint8_t MOTOR_stop(){
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint8_t ret = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
	printf("Power OFF\r\n");
 8000f6e:	4808      	ldr	r0, [pc, #32]	; (8000f90 <MOTOR_stop+0x2c>)
 8000f70:	f005 f89e 	bl	80060b0 <puts>
	HAL_GPIO_WritePin(start_GPIO_Port, start_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2110      	movs	r1, #16
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7c:	f001 f82e 	bl	8001fdc <HAL_GPIO_WritePin>
	motorStatus = 0;
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <MOTOR_stop+0x30>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
	return ret;
 8000f86:	79fb      	ldrb	r3, [r7, #7]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	080070b0 	.word	0x080070b0
 8000f94:	2000008c 	.word	0x2000008c

08000f98 <MOTOR_setSpeed>:

uint8_t MOTOR_setSpeed(int motorSpeed){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	uint8_t ret = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]

	if(motorSpeed <= TIM1->ARR){
 8000fa4:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d30a      	bcc.n	8000fc4 <MOTOR_setSpeed+0x2c>
		TIM1->CCR2 = (uint32_t)motorSpeed;
 8000fae:	4a0c      	ldr	r2, [pc, #48]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = (uint32_t)(TIM1->ARR - TIM1->CCR2);
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbc:	4908      	ldr	r1, [pc, #32]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	63cb      	str	r3, [r1, #60]	; 0x3c
 8000fc2:	e007      	b.n	8000fd4 <MOTOR_setSpeed+0x3c>
	}else{
		ret = MOTOR_ERROR_SPEED;
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	73fb      	strb	r3, [r7, #15]
		printf("ERROR - La vitesse doit être comprise entre 0 et %ld\r\n",TIM1->ARR);
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <MOTOR_setSpeed+0x48>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MOTOR_setSpeed+0x4c>)
 8000fd0:	f004 ffe8 	bl	8005fa4 <iprintf>
	}
	return ret;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	080070bc 	.word	0x080070bc

08000fe8 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == MOTOR_BUTTON_Pin){
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff8:	d10c      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x2c>
		if(motorStatus == 0){
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <HAL_GPIO_EXTI_Callback+0x34>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d102      	bne.n	8001008 <HAL_GPIO_EXTI_Callback+0x20>
			MOTOR_start();
 8001002:	f7ff ff95 	bl	8000f30 <MOTOR_start>
		}else if(motorStatus == 1){
			MOTOR_stop();
		}
	}
}
 8001006:	e005      	b.n	8001014 <HAL_GPIO_EXTI_Callback+0x2c>
		}else if(motorStatus == 1){
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <HAL_GPIO_EXTI_Callback+0x34>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d101      	bne.n	8001014 <HAL_GPIO_EXTI_Callback+0x2c>
			MOTOR_stop();
 8001010:	f7ff ffa8 	bl	8000f64 <MOTOR_stop>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000008c 	.word	0x2000008c

08001020 <SHELL_init>:
char bufMesg[MSG_BUFFER_SIZE];
uint8_t cptr_buf;

char bufMotorSpeed[4];

void SHELL_init(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
	it_uart = 0;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <SHELL_init+0x48>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	msg[0] = 0;
 800102c:	4b0f      	ldr	r3, [pc, #60]	; (800106c <SHELL_init+0x4c>)
 800102e:	2200      	movs	r2, #0
 8001030:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<(MSG_BUFFER_SIZE+1);i++){
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	e007      	b.n	8001048 <SHELL_init+0x28>
		bufMesg[i] = 0;
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <SHELL_init+0x50>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<(MSG_BUFFER_SIZE+1);i++){
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b14      	cmp	r3, #20
 800104c:	ddf4      	ble.n	8001038 <SHELL_init+0x18>
	}
	cptr_buf = 0;
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <SHELL_init+0x54>)
 8001050:	2200      	movs	r2, #0
 8001052:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart2,(uint8_t*)msg,1);
 8001054:	2201      	movs	r2, #1
 8001056:	4905      	ldr	r1, [pc, #20]	; (800106c <SHELL_init+0x4c>)
 8001058:	4807      	ldr	r0, [pc, #28]	; (8001078 <SHELL_init+0x58>)
 800105a:	f003 fba9 	bl	80047b0 <HAL_UART_Receive_IT>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000b0 	.word	0x200000b0
 800106c:	200000b4 	.word	0x200000b4
 8001070:	2000009c 	.word	0x2000009c
 8001074:	200000bc 	.word	0x200000bc
 8001078:	20000158 	.word	0x20000158

0800107c <SHELL>:

void SHELL(){
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	if(it_uart){
 8001082:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <SHELL+0x134>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 808e 	beq.w	80011a8 <SHELL+0x12c>
		if(msg[0] == '\r'){
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <SHELL+0x138>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b0d      	cmp	r3, #13
 8001092:	d172      	bne.n	800117a <SHELL+0xfe>
			printf("\r\n");
 8001094:	4848      	ldr	r0, [pc, #288]	; (80011b8 <SHELL+0x13c>)
 8001096:	f005 f80b 	bl	80060b0 <puts>
			bufMesg[cptr_buf] = '\0';
 800109a:	4b48      	ldr	r3, [pc, #288]	; (80011bc <SHELL+0x140>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	461a      	mov	r2, r3
 80010a0:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <SHELL+0x144>)
 80010a2:	2100      	movs	r1, #0
 80010a4:	5499      	strb	r1, [r3, r2]
			if(strcmp(bufMesg,"help") == 0){
 80010a6:	4947      	ldr	r1, [pc, #284]	; (80011c4 <SHELL+0x148>)
 80010a8:	4845      	ldr	r0, [pc, #276]	; (80011c0 <SHELL+0x144>)
 80010aa:	f7ff f8b9 	bl	8000220 <strcmp>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <SHELL+0x3e>
				SHELL_help();
 80010b4:	f000 f898 	bl	80011e8 <SHELL_help>
 80010b8:	e049      	b.n	800114e <SHELL+0xd2>
			}else if(strcmp(bufMesg,"pinout") == 0){
 80010ba:	4943      	ldr	r1, [pc, #268]	; (80011c8 <SHELL+0x14c>)
 80010bc:	4840      	ldr	r0, [pc, #256]	; (80011c0 <SHELL+0x144>)
 80010be:	f7ff f8af 	bl	8000220 <strcmp>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d103      	bne.n	80010d0 <SHELL+0x54>
				printf("Fonction pinout à faire !\r\n");
 80010c8:	4840      	ldr	r0, [pc, #256]	; (80011cc <SHELL+0x150>)
 80010ca:	f004 fff1 	bl	80060b0 <puts>
 80010ce:	e03e      	b.n	800114e <SHELL+0xd2>
			}else if(strcmp(bufMesg,"start") == 0){
 80010d0:	493f      	ldr	r1, [pc, #252]	; (80011d0 <SHELL+0x154>)
 80010d2:	483b      	ldr	r0, [pc, #236]	; (80011c0 <SHELL+0x144>)
 80010d4:	f7ff f8a4 	bl	8000220 <strcmp>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d102      	bne.n	80010e4 <SHELL+0x68>
				MOTOR_start();
 80010de:	f7ff ff27 	bl	8000f30 <MOTOR_start>
 80010e2:	e034      	b.n	800114e <SHELL+0xd2>
			}else if(strcmp(bufMesg,"stop") == 0){
 80010e4:	493b      	ldr	r1, [pc, #236]	; (80011d4 <SHELL+0x158>)
 80010e6:	4836      	ldr	r0, [pc, #216]	; (80011c0 <SHELL+0x144>)
 80010e8:	f7ff f89a 	bl	8000220 <strcmp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <SHELL+0x7c>
				MOTOR_stop();
 80010f2:	f7ff ff37 	bl	8000f64 <MOTOR_stop>
 80010f6:	e02a      	b.n	800114e <SHELL+0xd2>
			}else if(strcmp(bufMesg,"") == 0){
 80010f8:	4b31      	ldr	r3, [pc, #196]	; (80011c0 <SHELL+0x144>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d026      	beq.n	800114e <SHELL+0xd2>
			}else{
				for(int i=0; i<4; i++){
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	e00b      	b.n	800111e <SHELL+0xa2>
					bufMotorSpeed[i] = bufMesg[i+6];
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3306      	adds	r3, #6
 800110a:	4a2d      	ldr	r2, [pc, #180]	; (80011c0 <SHELL+0x144>)
 800110c:	5cd1      	ldrb	r1, [r2, r3]
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <SHELL+0x15c>)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4413      	add	r3, r2
 8001114:	460a      	mov	r2, r1
 8001116:	701a      	strb	r2, [r3, #0]
				for(int i=0; i<4; i++){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3301      	adds	r3, #1
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b03      	cmp	r3, #3
 8001122:	ddf0      	ble.n	8001106 <SHELL+0x8a>
				}
				bufMesg[6] = '\0';
 8001124:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <SHELL+0x144>)
 8001126:	2200      	movs	r2, #0
 8001128:	719a      	strb	r2, [r3, #6]
				if(strcmp(bufMesg,"speed=") == 0){
 800112a:	492c      	ldr	r1, [pc, #176]	; (80011dc <SHELL+0x160>)
 800112c:	4824      	ldr	r0, [pc, #144]	; (80011c0 <SHELL+0x144>)
 800112e:	f7ff f877 	bl	8000220 <strcmp>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d107      	bne.n	8001148 <SHELL+0xcc>
					MOTOR_setSpeed(atoi(bufMotorSpeed));
 8001138:	4827      	ldr	r0, [pc, #156]	; (80011d8 <SHELL+0x15c>)
 800113a:	f004 fefd 	bl	8005f38 <atoi>
 800113e:	4603      	mov	r3, r0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ff29 	bl	8000f98 <MOTOR_setSpeed>
 8001146:	e002      	b.n	800114e <SHELL+0xd2>
				}else{
					printf("Command not found\r\n");
 8001148:	4825      	ldr	r0, [pc, #148]	; (80011e0 <SHELL+0x164>)
 800114a:	f004 ffb1 	bl	80060b0 <puts>
				}
			}
			for(int i=0; i<(cptr_buf+1); i++){
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	e008      	b.n	8001166 <SHELL+0xea>
				bufMesg[cptr_buf] = 0;
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <SHELL+0x140>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <SHELL+0x144>)
 800115c:	2100      	movs	r1, #0
 800115e:	5499      	strb	r1, [r3, r2]
			for(int i=0; i<(cptr_buf+1); i++){
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <SHELL+0x140>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	461a      	mov	r2, r3
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	4293      	cmp	r3, r2
 8001170:	ddf0      	ble.n	8001154 <SHELL+0xd8>
			}
			cptr_buf = 0;
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <SHELL+0x140>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e013      	b.n	80011a2 <SHELL+0x126>
		}else{
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, 1, HAL_MAX_DELAY);
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	2201      	movs	r2, #1
 8001180:	490c      	ldr	r1, [pc, #48]	; (80011b4 <SHELL+0x138>)
 8001182:	4818      	ldr	r0, [pc, #96]	; (80011e4 <SHELL+0x168>)
 8001184:	f003 fa7d 	bl	8004682 <HAL_UART_Transmit>
			bufMesg[cptr_buf] = msg[0];
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <SHELL+0x140>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	461a      	mov	r2, r3
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <SHELL+0x138>)
 8001190:	7819      	ldrb	r1, [r3, #0]
 8001192:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <SHELL+0x144>)
 8001194:	5499      	strb	r1, [r3, r2]
			cptr_buf++;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <SHELL+0x140>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <SHELL+0x140>)
 80011a0:	701a      	strb	r2, [r3, #0]
		}
		it_uart = 0;
 80011a2:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <SHELL+0x134>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
	}
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	200000b0 	.word	0x200000b0
 80011b4:	200000b4 	.word	0x200000b4
 80011b8:	080070f4 	.word	0x080070f4
 80011bc:	200000bc 	.word	0x200000bc
 80011c0:	2000009c 	.word	0x2000009c
 80011c4:	080070f8 	.word	0x080070f8
 80011c8:	08007100 	.word	0x08007100
 80011cc:	08007108 	.word	0x08007108
 80011d0:	08007124 	.word	0x08007124
 80011d4:	0800712c 	.word	0x0800712c
 80011d8:	200000b8 	.word	0x200000b8
 80011dc:	08007134 	.word	0x08007134
 80011e0:	0800713c 	.word	0x0800713c
 80011e4:	20000158 	.word	0x20000158

080011e8 <SHELL_help>:

void SHELL_help(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	printf(" pinout\r\n start\r\n stop\r\n speed=XXXX\r\n");
 80011ec:	4802      	ldr	r0, [pc, #8]	; (80011f8 <SHELL_help+0x10>)
 80011ee:	f004 ff5f 	bl	80060b0 <puts>
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	08007150 	.word	0x08007150

080011fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_UART_RxCpltCallback+0x2c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d107      	bne.n	800121e <HAL_UART_RxCpltCallback+0x22>
		HAL_UART_Receive_IT(&huart2,(uint8_t*)msg,1);
 800120e:	2201      	movs	r2, #1
 8001210:	4906      	ldr	r1, [pc, #24]	; (800122c <HAL_UART_RxCpltCallback+0x30>)
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <HAL_UART_RxCpltCallback+0x34>)
 8001214:	f003 facc 	bl	80047b0 <HAL_UART_Receive_IT>
		it_uart = 1;
 8001218:	4b06      	ldr	r3, [pc, #24]	; (8001234 <HAL_UART_RxCpltCallback+0x38>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
	}
}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40004400 	.word	0x40004400
 800122c:	200000b4 	.word	0x200000b4
 8001230:	20000158 	.word	0x20000158
 8001234:	200000b0 	.word	0x200000b0

08001238 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <HAL_MspInit+0x44>)
 8001240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <HAL_MspInit+0x44>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6613      	str	r3, [r2, #96]	; 0x60
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <HAL_MspInit+0x44>)
 800124c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_MspInit+0x44>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	4a08      	ldr	r2, [pc, #32]	; (800127c <HAL_MspInit+0x44>)
 800125c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001260:	6593      	str	r3, [r2, #88]	; 0x58
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_MspInit+0x44>)
 8001264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126a:	603b      	str	r3, [r7, #0]
 800126c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800126e:	f000 ff89 	bl	8002184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40021000 	.word	0x40021000

08001280 <__io_putchar>:

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001288:	1d39      	adds	r1, r7, #4
 800128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128e:	2201      	movs	r2, #1
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <__io_putchar+0x20>)
 8001292:	f003 f9f6 	bl	8004682 <HAL_UART_Transmit>

  return ch;
 8001296:	687b      	ldr	r3, [r7, #4]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000158 	.word	0x20000158

080012a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012ba:	4b2d      	ldr	r3, [pc, #180]	; (8001370 <HAL_InitTick+0xcc>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	4a2c      	ldr	r2, [pc, #176]	; (8001370 <HAL_InitTick+0xcc>)
 80012c0:	f043 0310 	orr.w	r3, r3, #16
 80012c4:	6593      	str	r3, [r2, #88]	; 0x58
 80012c6:	4b2a      	ldr	r3, [pc, #168]	; (8001370 <HAL_InitTick+0xcc>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012d2:	f107 020c 	add.w	r2, r7, #12
 80012d6:	f107 0310 	add.w	r3, r7, #16
 80012da:	4611      	mov	r1, r2
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fc4f 	bl	8002b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012e2:	f001 fc21 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80012e6:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	4a22      	ldr	r2, [pc, #136]	; (8001374 <HAL_InitTick+0xd0>)
 80012ec:	fba2 2303 	umull	r2, r3, r2, r3
 80012f0:	0c9b      	lsrs	r3, r3, #18
 80012f2:	3b01      	subs	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_InitTick+0xd4>)
 80012f8:	4a20      	ldr	r2, [pc, #128]	; (800137c <HAL_InitTick+0xd8>)
 80012fa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012fc:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <HAL_InitTick+0xd4>)
 80012fe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001302:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001304:	4a1c      	ldr	r2, [pc, #112]	; (8001378 <HAL_InitTick+0xd4>)
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800130a:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <HAL_InitTick+0xd4>)
 800130c:	2200      	movs	r2, #0
 800130e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001310:	4b19      	ldr	r3, [pc, #100]	; (8001378 <HAL_InitTick+0xd4>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <HAL_InitTick+0xd4>)
 8001318:	f001 fe9a 	bl	8003050 <HAL_TIM_Base_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001326:	2b00      	cmp	r3, #0
 8001328:	d11b      	bne.n	8001362 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800132a:	4813      	ldr	r0, [pc, #76]	; (8001378 <HAL_InitTick+0xd4>)
 800132c:	f001 fef2 	bl	8003114 <HAL_TIM_Base_Start_IT>
 8001330:	4603      	mov	r3, r0
 8001332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800133a:	2b00      	cmp	r3, #0
 800133c:	d111      	bne.n	8001362 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800133e:	2036      	movs	r0, #54	; 0x36
 8001340:	f000 fbfc 	bl	8001b3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b0f      	cmp	r3, #15
 8001348:	d808      	bhi.n	800135c <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800134a:	2200      	movs	r2, #0
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	2036      	movs	r0, #54	; 0x36
 8001350:	f000 fbda 	bl	8001b08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001354:	4a0a      	ldr	r2, [pc, #40]	; (8001380 <HAL_InitTick+0xdc>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e002      	b.n	8001362 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 8001362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001366:	4618      	mov	r0, r3
 8001368:	3730      	adds	r7, #48	; 0x30
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	431bde83 	.word	0x431bde83
 8001378:	200000c0 	.word	0x200000c0
 800137c:	40001000 	.word	0x40001000
 8001380:	20000004 	.word	0x20000004

08001384 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <NMI_Handler+0x4>

0800138a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <HardFault_Handler+0x4>

08001390 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <MemManage_Handler+0x4>

08001396 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <BusFault_Handler+0x4>

0800139c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <UsageFault_Handler+0x4>

080013a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013b4:	bf00      	nop
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013e0:	4802      	ldr	r0, [pc, #8]	; (80013ec <USART2_IRQHandler+0x10>)
 80013e2:	f003 fa2b 	bl	800483c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000158 	.word	0x20000158

080013f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013f8:	f000 fe08 	bl	800200c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}

08001400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM6_DAC_IRQHandler+0x10>)
 8001406:	f002 f847 	bl	8003498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	200000c0 	.word	0x200000c0

08001414 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
	}

return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff09 	bl	8001280 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
	}
	return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ae:	605a      	str	r2, [r3, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_isatty>:

int _isatty(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f004 fd0e 	bl	8005f40 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20008000 	.word	0x20008000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000090 	.word	0x20000090
 8001558:	20000200 	.word	0x20000200

0800155c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b098      	sub	sp, #96	; 0x60
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001586:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001592:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2234      	movs	r2, #52	; 0x34
 80015aa:	2100      	movs	r1, #0
 80015ac:	4618      	mov	r0, r3
 80015ae:	f004 fcf1 	bl	8005f94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015b2:	4b41      	ldr	r3, [pc, #260]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015b4:	4a41      	ldr	r2, [pc, #260]	; (80016bc <MX_TIM1_Init+0x13c>)
 80015b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015ba:	2204      	movs	r2, #4
 80015bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80015be:	4b3e      	ldr	r3, [pc, #248]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015c0:	2220      	movs	r2, #32
 80015c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80015c4:	4b3c      	ldr	r3, [pc, #240]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015c6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015cc:	4b3a      	ldr	r3, [pc, #232]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015d2:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d8:	4b37      	ldr	r3, [pc, #220]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015de:	4836      	ldr	r0, [pc, #216]	; (80016b8 <MX_TIM1_Init+0x138>)
 80015e0:	f001 fe02 	bl	80031e8 <HAL_TIM_PWM_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f7ff fc57 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015fe:	4619      	mov	r1, r3
 8001600:	482d      	ldr	r0, [pc, #180]	; (80016b8 <MX_TIM1_Init+0x138>)
 8001602:	f002 fe61 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800160c:	f7ff fc46 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001610:	2360      	movs	r3, #96	; 0x60
 8001612:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001618:	2300      	movs	r3, #0
 800161a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161c:	2300      	movs	r3, #0
 800161e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001624:	2300      	movs	r3, #0
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800162c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001630:	2204      	movs	r2, #4
 8001632:	4619      	mov	r1, r3
 8001634:	4820      	ldr	r0, [pc, #128]	; (80016b8 <MX_TIM1_Init+0x138>)
 8001636:	f002 f8af 	bl	8003798 <HAL_TIM_PWM_ConfigChannel>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001640:	f7ff fc2c 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001648:	2208      	movs	r2, #8
 800164a:	4619      	mov	r1, r3
 800164c:	481a      	ldr	r0, [pc, #104]	; (80016b8 <MX_TIM1_Init+0x138>)
 800164e:	f002 f8a3 	bl	8003798 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8001658:	f7ff fc20 	bl	8000e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 203;
 8001668:	23cb      	movs	r3, #203	; 0xcb
 800166a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001686:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	4807      	ldr	r0, [pc, #28]	; (80016b8 <MX_TIM1_Init+0x138>)
 800169a:	f002 fe97 	bl	80043cc <HAL_TIMEx_ConfigBreakDeadTime>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80016a4:	f7ff fbfa 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016a8:	4803      	ldr	r0, [pc, #12]	; (80016b8 <MX_TIM1_Init+0x138>)
 80016aa:	f000 f829 	bl	8001700 <HAL_TIM_MspPostInit>

}
 80016ae:	bf00      	nop
 80016b0:	3760      	adds	r7, #96	; 0x60
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000010c 	.word	0x2000010c
 80016bc:	40012c00 	.word	0x40012c00

080016c0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_TIM_PWM_MspInit+0x38>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d10b      	bne.n	80016ea <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_TIM_PWM_MspInit+0x3c>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	4a09      	ldr	r2, [pc, #36]	; (80016fc <HAL_TIM_PWM_MspInit+0x3c>)
 80016d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016dc:	6613      	str	r3, [r2, #96]	; 0x60
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <HAL_TIM_PWM_MspInit+0x3c>)
 80016e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80016ea:	bf00      	nop
 80016ec:	3714      	adds	r7, #20
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	40021000 	.word	0x40021000

08001700 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HAL_TIM_MspPostInit+0x9c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d137      	bne.n	8001792 <HAL_TIM_MspPostInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a18      	ldr	r2, [pc, #96]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001740:	f043 0302 	orr.w	r3, r3, #2
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_TIM_MspPostInit+0xa0>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PB0     ------> TIM1_CH2N
    PB1     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001752:	2306      	movs	r3, #6
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001762:	2302      	movs	r3, #2
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480d      	ldr	r0, [pc, #52]	; (80017a4 <HAL_TIM_MspPostInit+0xa4>)
 800176e:	f000 fab3 	bl	8001cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001772:	2303      	movs	r3, #3
 8001774:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001782:	2306      	movs	r3, #6
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <HAL_TIM_MspPostInit+0xa8>)
 800178e:	f000 faa3 	bl	8001cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40021000 	.word	0x40021000
 80017a4:	48000800 	.word	0x48000800
 80017a8:	48000400 	.word	0x48000400

080017ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b0:	4b22      	ldr	r3, [pc, #136]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017b2:	4a23      	ldr	r2, [pc, #140]	; (8001840 <MX_USART2_UART_Init+0x94>)
 80017b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017b6:	4b21      	ldr	r3, [pc, #132]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017be:	4b1f      	ldr	r3, [pc, #124]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c4:	4b1d      	ldr	r3, [pc, #116]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017d2:	220c      	movs	r2, #12
 80017d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017dc:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e8:	4b14      	ldr	r3, [pc, #80]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f4:	4811      	ldr	r0, [pc, #68]	; (800183c <MX_USART2_UART_Init+0x90>)
 80017f6:	f002 fef4 	bl	80045e2 <HAL_UART_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001800:	f7ff fb4c 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001804:	2100      	movs	r1, #0
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_USART2_UART_Init+0x90>)
 8001808:	f004 facb 	bl	8005da2 <HAL_UARTEx_SetTxFifoThreshold>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001812:	f7ff fb43 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001816:	2100      	movs	r1, #0
 8001818:	4808      	ldr	r0, [pc, #32]	; (800183c <MX_USART2_UART_Init+0x90>)
 800181a:	f004 fb00 	bl	8005e1e <HAL_UARTEx_SetRxFifoThreshold>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001824:	f7ff fb3a 	bl	8000e9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_USART2_UART_Init+0x90>)
 800182a:	f004 fa81 	bl	8005d30 <HAL_UARTEx_DisableFifoMode>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001834:	f7ff fb32 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000158 	.word	0x20000158
 8001840:	40004400 	.word	0x40004400

08001844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	; 0x28
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	2200      	movs	r2, #0
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	605a      	str	r2, [r3, #4]
 8001856:	609a      	str	r2, [r3, #8]
 8001858:	60da      	str	r2, [r3, #12]
 800185a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a1b      	ldr	r2, [pc, #108]	; (80018d0 <HAL_UART_MspInit+0x8c>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d130      	bne.n	80018c8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001866:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	4a1a      	ldr	r2, [pc, #104]	; (80018d4 <HAL_UART_MspInit+0x90>)
 800186c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001870:	6593      	str	r3, [r2, #88]	; 0x58
 8001872:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	613b      	str	r3, [r7, #16]
 800187c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a14      	ldr	r2, [pc, #80]	; (80018d4 <HAL_UART_MspInit+0x90>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_UART_MspInit+0x90>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001896:	230c      	movs	r3, #12
 8001898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189a:	2302      	movs	r3, #2
 800189c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018a6:	2307      	movs	r3, #7
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018aa:	f107 0314 	add.w	r3, r7, #20
 80018ae:	4619      	mov	r1, r3
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b4:	f000 fa10 	bl	8001cd8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2100      	movs	r1, #0
 80018bc:	2026      	movs	r0, #38	; 0x26
 80018be:	f000 f923 	bl	8001b08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018c2:	2026      	movs	r0, #38	; 0x26
 80018c4:	f000 f93a 	bl	8001b3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40004400 	.word	0x40004400
 80018d4:	40021000 	.word	0x40021000

080018d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018da:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490e      	ldr	r1, [pc, #56]	; (8001918 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0e      	ldr	r2, [pc, #56]	; (800191c <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0b      	ldr	r4, [pc, #44]	; (8001924 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001902:	f7ff fe2b 	bl	800155c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001906:	f004 fb21 	bl	8005f4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800190a:	f7ff fa39 	bl	8000d80 <main>

0800190e <LoopForever>:

LoopForever:
    b LoopForever
 800190e:	e7fe      	b.n	800190e <LoopForever>
  ldr   r0, =_estack
 8001910:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001918:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800191c:	08007364 	.word	0x08007364
  ldr r2, =_sbss
 8001920:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001924:	200001fc 	.word	0x200001fc

08001928 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001928:	e7fe      	b.n	8001928 <ADC1_2_IRQHandler>

0800192a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001934:	2003      	movs	r0, #3
 8001936:	f000 f8dc 	bl	8001af2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800193a:	200f      	movs	r0, #15
 800193c:	f7ff fcb2 	bl	80012a4 <HAL_InitTick>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d002      	beq.n	800194c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e001      	b.n	8001950 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800194c:	f7ff fc74 	bl	8001238 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001950:	79fb      	ldrb	r3, [r7, #7]

}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x1c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_IncTick+0x20>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a03      	ldr	r2, [pc, #12]	; (8001978 <HAL_IncTick+0x1c>)
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200001e8 	.word	0x200001e8
 800197c:	20000008 	.word	0x20000008

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200001e8 	.word	0x200001e8

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	; (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db0b      	blt.n	8001a26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	f003 021f 	and.w	r2, r3, #31
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <__NVIC_EnableIRQ+0x38>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	e000e100 	.word	0xe000e100

08001a38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4603      	mov	r3, r0
 8001a40:	6039      	str	r1, [r7, #0]
 8001a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	db0a      	blt.n	8001a62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	490c      	ldr	r1, [pc, #48]	; (8001a84 <__NVIC_SetPriority+0x4c>)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	0112      	lsls	r2, r2, #4
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a60:	e00a      	b.n	8001a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	4908      	ldr	r1, [pc, #32]	; (8001a88 <__NVIC_SetPriority+0x50>)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	f003 030f 	and.w	r3, r3, #15
 8001a6e:	3b04      	subs	r3, #4
 8001a70:	0112      	lsls	r2, r2, #4
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	440b      	add	r3, r1
 8001a76:	761a      	strb	r2, [r3, #24]
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	e000e100 	.word	0xe000e100
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	f1c3 0307 	rsb	r3, r3, #7
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	bf28      	it	cs
 8001aaa:	2304      	movcs	r3, #4
 8001aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	2b06      	cmp	r3, #6
 8001ab4:	d902      	bls.n	8001abc <NVIC_EncodePriority+0x30>
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3b03      	subs	r3, #3
 8001aba:	e000      	b.n	8001abe <NVIC_EncodePriority+0x32>
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43da      	mvns	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	401a      	ands	r2, r3
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	fa01 f303 	lsl.w	r3, r1, r3
 8001ade:	43d9      	mvns	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	4313      	orrs	r3, r2
         );
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3724      	adds	r7, #36	; 0x24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b082      	sub	sp, #8
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7ff ff4c 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b16:	f7ff ff63 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	68b9      	ldr	r1, [r7, #8]
 8001b20:	6978      	ldr	r0, [r7, #20]
 8001b22:	f7ff ffb3 	bl	8001a8c <NVIC_EncodePriority>
 8001b26:	4602      	mov	r2, r0
 8001b28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff82 	bl	8001a38 <__NVIC_SetPriority>
}
 8001b34:	bf00      	nop
 8001b36:	3718      	adds	r7, #24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff56 	bl	80019fc <__NVIC_EnableIRQ>
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d005      	beq.n	8001b7c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2204      	movs	r2, #4
 8001b74:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	73fb      	strb	r3, [r7, #15]
 8001b7a:	e037      	b.n	8001bec <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 020e 	bic.w	r2, r2, #14
 8001b8a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b9a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0201 	bic.w	r2, r2, #1
 8001baa:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	f003 021f 	and.w	r2, r3, #31
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	2101      	movs	r1, #1
 8001bba:	fa01 f202 	lsl.w	r2, r1, r2
 8001bbe:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bc8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d00c      	beq.n	8001bec <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001be0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bea:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b084      	sub	sp, #16
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d00d      	beq.n	8001c3e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2204      	movs	r2, #4
 8001c26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
 8001c3c:	e047      	b.n	8001cce <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f022 020e 	bic.w	r2, r2, #14
 8001c4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	f003 021f 	and.w	r2, r3, #31
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00c      	beq.n	8001cae <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ca2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001cac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
    }
  }
  return status;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b087      	sub	sp, #28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ce6:	e15a      	b.n	8001f9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2101      	movs	r1, #1
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 814c 	beq.w	8001f98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d00b      	beq.n	8001d20 <HAL_GPIO_Init+0x48>
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d007      	beq.n	8001d20 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d14:	2b11      	cmp	r3, #17
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b12      	cmp	r3, #18
 8001d1e:	d130      	bne.n	8001d82 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d56:	2201      	movs	r2, #1
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4013      	ands	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	091b      	lsrs	r3, r3, #4
 8001d6c:	f003 0201 	and.w	r2, r3, #1
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	4013      	ands	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	689a      	ldr	r2, [r3, #8]
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	693a      	ldr	r2, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0xea>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	2b12      	cmp	r3, #18
 8001dc0:	d123      	bne.n	8001e0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	08da      	lsrs	r2, r3, #3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f003 0307 	and.w	r3, r3, #7
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	08da      	lsrs	r2, r3, #3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3208      	adds	r2, #8
 8001e04:	6939      	ldr	r1, [r7, #16]
 8001e06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	2203      	movs	r2, #3
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	43db      	mvns	r3, r3
 8001e1c:	693a      	ldr	r2, [r7, #16]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0203 	and.w	r2, r3, #3
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80a6 	beq.w	8001f98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4c:	4b5b      	ldr	r3, [pc, #364]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e50:	4a5a      	ldr	r2, [pc, #360]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	6613      	str	r3, [r2, #96]	; 0x60
 8001e58:	4b58      	ldr	r3, [pc, #352]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	220f      	movs	r2, #15
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e8e:	d01f      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f8>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	4a4c      	ldr	r2, [pc, #304]	; (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d019      	beq.n	8001ecc <HAL_GPIO_Init+0x1f4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a4b      	ldr	r2, [pc, #300]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d013      	beq.n	8001ec8 <HAL_GPIO_Init+0x1f0>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a4a      	ldr	r2, [pc, #296]	; (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_GPIO_Init+0x1ec>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a49      	ldr	r2, [pc, #292]	; (8001fd0 <HAL_GPIO_Init+0x2f8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d007      	beq.n	8001ec0 <HAL_GPIO_Init+0x1e8>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a48      	ldr	r2, [pc, #288]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d101      	bne.n	8001ebc <HAL_GPIO_Init+0x1e4>
 8001eb8:	2305      	movs	r3, #5
 8001eba:	e00a      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	e008      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ec0:	2304      	movs	r3, #4
 8001ec2:	e006      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e004      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	f002 0203 	and.w	r2, r2, #3
 8001ed8:	0092      	lsls	r2, r2, #2
 8001eda:	4093      	lsls	r3, r2
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ee2:	4937      	ldr	r1, [pc, #220]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	089b      	lsrs	r3, r3, #2
 8001ee8:	3302      	adds	r3, #2
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	4013      	ands	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f14:	4a30      	ldr	r2, [pc, #192]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f1a:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43db      	mvns	r3, r3
 8001f24:	693a      	ldr	r2, [r7, #16]
 8001f26:	4013      	ands	r3, r2
 8001f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f3e:	4a26      	ldr	r2, [pc, #152]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f68:	4a1b      	ldr	r2, [pc, #108]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f92:	4a11      	ldr	r2, [pc, #68]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f47f ae9d 	bne.w	8001ce8 <HAL_GPIO_Init+0x10>
  }
}
 8001fae:	bf00      	nop
 8001fb0:	bf00      	nop
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	40010000 	.word	0x40010000
 8001fc4:	48000400 	.word	0x48000400
 8001fc8:	48000800 	.word	0x48000800
 8001fcc:	48000c00 	.word	0x48000c00
 8001fd0:	48001000 	.word	0x48001000
 8001fd4:	48001400 	.word	0x48001400
 8001fd8:	40010400 	.word	0x40010400

08001fdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fec:	787b      	ldrb	r3, [r7, #1]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d003      	beq.n	8001ffa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ff2:	887a      	ldrh	r2, [r7, #2]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ff8:	e002      	b.n	8002000 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffa:	887a      	ldrh	r2, [r7, #2]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002016:	4b08      	ldr	r3, [pc, #32]	; (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d006      	beq.n	8002030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002024:	88fb      	ldrh	r3, [r7, #6]
 8002026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe ffdc 	bl	8000fe8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40010400 	.word	0x40010400

0800203c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b4b      	ldr	r3, [pc, #300]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800205e:	4a46      	ldr	r2, [pc, #280]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002070:	4a41      	ldr	r2, [pc, #260]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002078:	4b40      	ldr	r3, [pc, #256]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	; 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a3f      	ldr	r2, [pc, #252]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b6:	d158      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e057      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020cc:	e04d      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d141      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d131      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020fc:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002104:	4b1d      	ldr	r3, [pc, #116]	; (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2232      	movs	r2, #50	; 0x32
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a1c      	ldr	r2, [pc, #112]	; (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	e002      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	4b15      	ldr	r3, [pc, #84]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002142:	d112      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e011      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002158:	e007      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40007000 	.word	0x40007000
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e308      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d075      	beq.n	80022ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4ba3      	ldr	r3, [pc, #652]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	4ba0      	ldr	r3, [pc, #640]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3e>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_OscConfig+0x44>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d10b      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	4b99      	ldr	r3, [pc, #612]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d05b      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d157      	bne.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e2e3      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x74>
 800220a:	4b91      	ldr	r3, [pc, #580]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a90      	ldr	r2, [pc, #576]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b8b      	ldr	r3, [pc, #556]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a8a      	ldr	r2, [pc, #552]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b88      	ldr	r3, [pc, #544]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a87      	ldr	r2, [pc, #540]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 800223c:	4b84      	ldr	r3, [pc, #528]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a83      	ldr	r2, [pc, #524]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b81      	ldr	r3, [pc, #516]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a80      	ldr	r2, [pc, #512]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fb90 	bl	8001980 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fb8c 	bl	8001980 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	; 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e2a8      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4b76      	ldr	r3, [pc, #472]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xc0>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff fb7c 	bl	8001980 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fb78 	bl	8001980 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e294      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b65      	ldr	r3, [pc, #404]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b62      	ldr	r3, [pc, #392]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x136>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_OscConfig+0x13c>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11f      	bne.n	8002320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	4b5b      	ldr	r3, [pc, #364]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x154>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e267      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b55      	ldr	r3, [pc, #340]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4952      	ldr	r1, [pc, #328]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800230c:	4b51      	ldr	r3, [pc, #324]	; (8002454 <HAL_RCC_OscConfig+0x2b0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe ffc7 	bl	80012a4 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e253      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a48      	ldr	r2, [pc, #288]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fb24 	bl	8001980 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fb20 	bl	8001980 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e23c      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	4939      	ldr	r1, [pc, #228]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e01a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002370:	4b37      	ldr	r3, [pc, #220]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a36      	ldr	r2, [pc, #216]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fb00 	bl	8001980 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fafc 	bl	8001980 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e218      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002396:	4b2e      	ldr	r3, [pc, #184]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e0>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d03c      	beq.n	800242c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b25      	ldr	r3, [pc, #148]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c0:	4a23      	ldr	r2, [pc, #140]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fad9 	bl	8001980 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d2:	f7ff fad5 	bl	8001980 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1f1      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e4:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ef      	beq.n	80023d2 <HAL_RCC_OscConfig+0x22e>
 80023f2:	e01b      	b.n	800242c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fa:	4a15      	ldr	r2, [pc, #84]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff fabc 	bl	8001980 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fab8 	bl	8001980 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1d4      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800241e:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ef      	bne.n	800240c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80ab 	beq.w	8002590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d106      	bne.n	8002458 <HAL_RCC_OscConfig+0x2b4>
 800244a:	2301      	movs	r3, #1
 800244c:	e005      	b.n	800245a <HAL_RCC_OscConfig+0x2b6>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	20000004 	.word	0x20000004
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4baf      	ldr	r3, [pc, #700]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	4aae      	ldr	r2, [pc, #696]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	; 0x58
 800246a:	4bac      	ldr	r3, [pc, #688]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4ba9      	ldr	r3, [pc, #676]	; (8002720 <HAL_RCC_OscConfig+0x57c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002486:	4ba6      	ldr	r3, [pc, #664]	; (8002720 <HAL_RCC_OscConfig+0x57c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4aa5      	ldr	r2, [pc, #660]	; (8002720 <HAL_RCC_OscConfig+0x57c>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fa75 	bl	8001980 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fa71 	bl	8001980 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e18d      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b9c      	ldr	r3, [pc, #624]	; (8002720 <HAL_RCC_OscConfig+0x57c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x32e>
 80024c0:	4b96      	ldr	r3, [pc, #600]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a95      	ldr	r2, [pc, #596]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024d0:	e024      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d110      	bne.n	80024fc <HAL_RCC_OscConfig+0x358>
 80024da:	4b90      	ldr	r3, [pc, #576]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	4a8e      	ldr	r2, [pc, #568]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ea:	4b8c      	ldr	r3, [pc, #560]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f0:	4a8a      	ldr	r2, [pc, #552]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024fc:	4b87      	ldr	r3, [pc, #540]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	4a86      	ldr	r2, [pc, #536]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a82      	ldr	r2, [pc, #520]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff fa2c 	bl	8001980 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff fa28 	bl	8001980 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e142      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b76      	ldr	r3, [pc, #472]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ed      	beq.n	800252c <HAL_RCC_OscConfig+0x388>
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fa15 	bl	8001980 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff fa11 	bl	8001980 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	; 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e12b      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b65      	ldr	r3, [pc, #404]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002588:	4a64      	ldr	r2, [pc, #400]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a4:	4b5d      	ldr	r3, [pc, #372]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025aa:	4a5c      	ldr	r2, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff f9e4 	bl	8001980 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7ff f9e0 	bl	8001980 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0fc      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	4b53      	ldr	r3, [pc, #332]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x418>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff f9c7 	bl	8001980 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7ff f9c3 	bl	8001980 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0df      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b44      	ldr	r3, [pc, #272]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80d3 	beq.w	80027c6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002620:	4b3e      	ldr	r3, [pc, #248]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f000 808d 	beq.w	8002748 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d15a      	bne.n	80026ec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b39      	ldr	r3, [pc, #228]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f99d 	bl	8001980 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e008      	b.n	800265c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff f999 	bl	8001980 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0b5      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	4b2f      	ldr	r3, [pc, #188]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1f0      	bne.n	800264a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800266a:	68da      	ldr	r2, [r3, #12]
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x580>)
 800266e:	4013      	ands	r3, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6a11      	ldr	r1, [r2, #32]
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002678:	3a01      	subs	r2, #1
 800267a:	0112      	lsls	r2, r2, #4
 800267c:	4311      	orrs	r1, r2
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002682:	0212      	lsls	r2, r2, #8
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800268a:	0852      	lsrs	r2, r2, #1
 800268c:	3a01      	subs	r2, #1
 800268e:	0552      	lsls	r2, r2, #21
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002696:	0852      	lsrs	r2, r2, #1
 8002698:	3a01      	subs	r2, #1
 800269a:	0652      	lsls	r2, r2, #25
 800269c:	4311      	orrs	r1, r2
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026a2:	06d2      	lsls	r2, r2, #27
 80026a4:	430a      	orrs	r2, r1
 80026a6:	491d      	ldr	r1, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b1b      	ldr	r3, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1a      	ldr	r2, [pc, #104]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026b8:	4b18      	ldr	r3, [pc, #96]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	4a17      	ldr	r2, [pc, #92]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7ff f95c 	bl	8001980 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026cc:	f7ff f958 	bl	8001980 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e074      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d0f0      	beq.n	80026cc <HAL_RCC_OscConfig+0x528>
 80026ea:	e06c      	b.n	80027c6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a07      	ldr	r2, [pc, #28]	; (800271c <HAL_RCC_OscConfig+0x578>)
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <HAL_RCC_OscConfig+0x578>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	; (800271c <HAL_RCC_OscConfig+0x578>)
 800270a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800270e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002712:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002714:	f7ff f934 	bl	8001980 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	e00e      	b.n	800273a <HAL_RCC_OscConfig+0x596>
 800271c:	40021000 	.word	0x40021000
 8002720:	40007000 	.word	0x40007000
 8002724:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7ff f92a 	bl	8001980 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e046      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <HAL_RCC_OscConfig+0x62c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x584>
 8002746:	e03e      	b.n	80027c6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e039      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002754:	4b1e      	ldr	r3, [pc, #120]	; (80027d0 <HAL_RCC_OscConfig+0x62c>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a1b      	ldr	r3, [r3, #32]
 8002764:	429a      	cmp	r2, r3
 8002766:	d12c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002772:	3b01      	subs	r3, #1
 8002774:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	429a      	cmp	r2, r3
 8002778:	d123      	bne.n	80027c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d11b      	bne.n	80027c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d113      	bne.n	80027c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d109      	bne.n	80027c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3720      	adds	r7, #32
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e11e      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	4b91      	ldr	r3, [pc, #580]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 030f 	and.w	r3, r3, #15
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d910      	bls.n	800281c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fa:	4b8e      	ldr	r3, [pc, #568]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 020f 	bic.w	r2, r3, #15
 8002802:	498c      	ldr	r1, [pc, #560]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	4313      	orrs	r3, r2
 8002808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e106      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	2b00      	cmp	r3, #0
 8002826:	d073      	beq.n	8002910 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b03      	cmp	r3, #3
 800282e:	d129      	bne.n	8002884 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002830:	4b81      	ldr	r3, [pc, #516]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0f4      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002840:	f000 f9d0 	bl	8002be4 <RCC_GetSysClockFreqFromPLLSource>
 8002844:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	4a7c      	ldr	r2, [pc, #496]	; (8002a3c <HAL_RCC_ClockConfig+0x268>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d93f      	bls.n	80028ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800284e:	4b7a      	ldr	r3, [pc, #488]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d009      	beq.n	800286e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002862:	2b00      	cmp	r3, #0
 8002864:	d033      	beq.n	80028ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d12f      	bne.n	80028ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800286e:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	4a70      	ldr	r2, [pc, #448]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800287e:	2380      	movs	r3, #128	; 0x80
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e024      	b.n	80028ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d107      	bne.n	800289c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288c:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0c6      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0be      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028ac:	f000 f8ce 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_RCC_ClockConfig+0x268>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d909      	bls.n	80028ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ba:	4b5f      	ldr	r3, [pc, #380]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028c2:	4a5d      	ldr	r2, [pc, #372]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80028c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028ca:	2380      	movs	r3, #128	; 0x80
 80028cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b5a      	ldr	r3, [pc, #360]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4957      	ldr	r1, [pc, #348]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e0:	f7ff f84e 	bl	8001980 <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f84a 	bl	8001980 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e095      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b4e      	ldr	r3, [pc, #312]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d023      	beq.n	8002964 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4a42      	ldr	r2, [pc, #264]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800292e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002932:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002940:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002948:	4a3b      	ldr	r2, [pc, #236]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800294a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800294e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002950:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4936      	ldr	r1, [pc, #216]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
 8002962:	e008      	b.n	8002976 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b80      	cmp	r3, #128	; 0x80
 8002968:	d105      	bne.n	8002976 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800296a:	4b33      	ldr	r3, [pc, #204]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4a32      	ldr	r2, [pc, #200]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002970:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002974:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d21d      	bcs.n	80029c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002984:	4b2b      	ldr	r3, [pc, #172]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f023 020f 	bic.w	r2, r3, #15
 800298c:	4929      	ldr	r1, [pc, #164]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	4313      	orrs	r3, r2
 8002992:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002994:	f7fe fff4 	bl	8001980 <HAL_GetTick>
 8002998:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800299c:	f7fe fff0 	bl	8001980 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e03b      	b.n	8002a2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <HAL_RCC_ClockConfig+0x260>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d1ed      	bne.n	800299c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4917      	ldr	r1, [pc, #92]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d009      	beq.n	80029fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	490f      	ldr	r1, [pc, #60]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029fe:	f000 f825 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8002a02:	4602      	mov	r2, r0
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <HAL_RCC_ClockConfig+0x264>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	091b      	lsrs	r3, r3, #4
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	490c      	ldr	r1, [pc, #48]	; (8002a40 <HAL_RCC_ClockConfig+0x26c>)
 8002a10:	5ccb      	ldrb	r3, [r1, r3]
 8002a12:	f003 031f 	and.w	r3, r3, #31
 8002a16:	fa22 f303 	lsr.w	r3, r2, r3
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	; (8002a44 <HAL_RCC_ClockConfig+0x270>)
 8002a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a1e:	4b0a      	ldr	r3, [pc, #40]	; (8002a48 <HAL_RCC_ClockConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fc3e 	bl	80012a4 <HAL_InitTick>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40022000 	.word	0x40022000
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	04c4b400 	.word	0x04c4b400
 8002a40:	08007178 	.word	0x08007178
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000004 	.word	0x20000004

08002a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b087      	sub	sp, #28
 8002a50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a52:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	e047      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a64:	4b27      	ldr	r3, [pc, #156]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 030c 	and.w	r3, r3, #12
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d102      	bne.n	8002a76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a72:	613b      	str	r3, [r7, #16]
 8002a74:	e03e      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a76:	4b23      	ldr	r3, [pc, #140]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	d136      	bne.n	8002af0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a82:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	3301      	adds	r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aa0:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	4a16      	ldr	r2, [pc, #88]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aaa:	68d2      	ldr	r2, [r2, #12]
 8002aac:	0a12      	lsrs	r2, r2, #8
 8002aae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	617b      	str	r3, [r7, #20]
      break;
 8002ab8:	e00c      	b.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac4:	68d2      	ldr	r2, [r2, #12]
 8002ac6:	0a12      	lsrs	r2, r2, #8
 8002ac8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
      break;
 8002ad2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0e5b      	lsrs	r3, r3, #25
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	3301      	adds	r3, #1
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aec:	613b      	str	r3, [r7, #16]
 8002aee:	e001      	b.n	8002af4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002af4:	693b      	ldr	r3, [r7, #16]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	371c      	adds	r7, #28
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	00f42400 	.word	0x00f42400
 8002b0c:	016e3600 	.word	0x016e3600

08002b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b2c:	f7ff fff0 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4904      	ldr	r1, [pc, #16]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	f003 031f 	and.w	r3, r3, #31
 8002b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08007188 	.word	0x08007188

08002b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b58:	f7ff ffda 	bl	8002b10 <HAL_RCC_GetHCLKFreq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	0adb      	lsrs	r3, r3, #11
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	4904      	ldr	r1, [pc, #16]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6a:	5ccb      	ldrb	r3, [r1, r3]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	08007188 	.word	0x08007188

08002b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_GetClockConfig+0x5c>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f003 0203 	and.w	r2, r3, #3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_RCC_GetClockConfig+0x5c>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_RCC_GetClockConfig+0x5c>)
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bb4:	4b09      	ldr	r3, [pc, #36]	; (8002bdc <HAL_RCC_GetClockConfig+0x5c>)
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCC_GetClockConfig+0x60>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 020f 	and.w	r2, r3, #15
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	601a      	str	r2, [r3, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40022000 	.word	0x40022000

08002be4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bea:	4b1e      	ldr	r3, [pc, #120]	; (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	091b      	lsrs	r3, r3, #4
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d10c      	bne.n	8002c22 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c12:	68d2      	ldr	r2, [r2, #12]
 8002c14:	0a12      	lsrs	r2, r2, #8
 8002c16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	617b      	str	r3, [r7, #20]
    break;
 8002c20:	e00c      	b.n	8002c3c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c22:	4a12      	ldr	r2, [pc, #72]	; (8002c6c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c2a:	4a0e      	ldr	r2, [pc, #56]	; (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	0a12      	lsrs	r2, r2, #8
 8002c30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c34:	fb02 f303 	mul.w	r3, r2, r3
 8002c38:	617b      	str	r3, [r7, #20]
    break;
 8002c3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0e5b      	lsrs	r3, r3, #25
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c54:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c56:	687b      	ldr	r3, [r7, #4]
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40021000 	.word	0x40021000
 8002c68:	016e3600 	.word	0x016e3600
 8002c6c:	00f42400 	.word	0x00f42400

08002c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c78:	2300      	movs	r3, #0
 8002c7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 8098 	beq.w	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c92:	4b43      	ldr	r3, [pc, #268]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10d      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca2:	4a3f      	ldr	r2, [pc, #252]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cba:	4b3a      	ldr	r3, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a39      	ldr	r2, [pc, #228]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fe5b 	bl	8001980 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ccc:	e009      	b.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cce:	f7fe fe57 	bl	8001980 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d902      	bls.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	74fb      	strb	r3, [r7, #19]
        break;
 8002ce0:	e005      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ce2:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d0ef      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002cee:	7cfb      	ldrb	r3, [r7, #19]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d159      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d01e      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d1c:	4b20      	ldr	r3, [pc, #128]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	4a1f      	ldr	r2, [pc, #124]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d32:	4a1b      	ldr	r2, [pc, #108]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d3c:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fe17 	bl	8001980 <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d54:	e00b      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fe13 	bl	8001980 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d902      	bls.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d6c:	e006      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d6e:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d0ec      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d7c:	7cfb      	ldrb	r3, [r7, #19]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d92:	4313      	orrs	r3, r2
 8002d94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d9a:	7cfb      	ldrb	r3, [r7, #19]
 8002d9c:	74bb      	strb	r3, [r7, #18]
 8002d9e:	e005      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dac:	7c7b      	ldrb	r3, [r7, #17]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d105      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db2:	4ba6      	ldr	r3, [pc, #664]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db6:	4aa5      	ldr	r2, [pc, #660]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dca:	4ba0      	ldr	r3, [pc, #640]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	499c      	ldr	r1, [pc, #624]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dec:	4b97      	ldr	r3, [pc, #604]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 020c 	bic.w	r2, r3, #12
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	4994      	ldr	r1, [pc, #592]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00a      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e0e:	4b8f      	ldr	r3, [pc, #572]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	498b      	ldr	r1, [pc, #556]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00a      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e30:	4b86      	ldr	r3, [pc, #536]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	4983      	ldr	r1, [pc, #524]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00a      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e52:	4b7e      	ldr	r3, [pc, #504]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	497a      	ldr	r1, [pc, #488]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e74:	4b75      	ldr	r3, [pc, #468]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	4972      	ldr	r1, [pc, #456]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e96:	4b6d      	ldr	r3, [pc, #436]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	69db      	ldr	r3, [r3, #28]
 8002ea4:	4969      	ldr	r1, [pc, #420]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb8:	4b64      	ldr	r3, [pc, #400]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	4961      	ldr	r1, [pc, #388]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eda:	4b5c      	ldr	r3, [pc, #368]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	4958      	ldr	r1, [pc, #352]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002efc:	4b53      	ldr	r3, [pc, #332]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0a:	4950      	ldr	r1, [pc, #320]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f1a:	d105      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f1c:	4b4b      	ldr	r3, [pc, #300]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	4a4a      	ldr	r2, [pc, #296]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d015      	beq.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f34:	4b45      	ldr	r3, [pc, #276]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f42:	4942      	ldr	r1, [pc, #264]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f52:	d105      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f54:	4b3d      	ldr	r3, [pc, #244]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4a3c      	ldr	r2, [pc, #240]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4934      	ldr	r1, [pc, #208]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f8a:	d105      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a2e      	ldr	r2, [pc, #184]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fa4:	4b29      	ldr	r3, [pc, #164]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb2:	4926      	ldr	r1, [pc, #152]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b21      	ldr	r3, [pc, #132]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fdc:	4b1b      	ldr	r3, [pc, #108]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fea:	4918      	ldr	r1, [pc, #96]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffc:	4b13      	ldr	r3, [pc, #76]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a12      	ldr	r2, [pc, #72]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003006:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003014:	4b0d      	ldr	r3, [pc, #52]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	490a      	ldr	r1, [pc, #40]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003032:	d105      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a04      	ldr	r2, [pc, #16]	; (800304c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003040:	7cbb      	ldrb	r3, [r7, #18]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e049      	b.n	80030f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f841 	bl	80030fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 fcba 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04a      	b.n	80031c2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a21      	ldr	r2, [pc, #132]	; (80031d0 <HAL_TIM_Base_Start_IT+0xbc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d018      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x6c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003156:	d013      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x6c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d00e      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x6c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1c      	ldr	r2, [pc, #112]	; (80031d8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x6c>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_TIM_Base_Start_IT+0xc8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_TIM_Base_Start_IT+0x6c>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a19      	ldr	r2, [pc, #100]	; (80031e0 <HAL_TIM_Base_Start_IT+0xcc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d115      	bne.n	80031ac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003188:	4013      	ands	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2b06      	cmp	r3, #6
 8003190:	d015      	beq.n	80031be <HAL_TIM_Base_Start_IT+0xaa>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d011      	beq.n	80031be <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f042 0201 	orr.w	r2, r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031aa:	e008      	b.n	80031be <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f042 0201 	orr.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	e000      	b.n	80031c0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3714      	adds	r7, #20
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	40012c00 	.word	0x40012c00
 80031d4:	40000400 	.word	0x40000400
 80031d8:	40000800 	.word	0x40000800
 80031dc:	40013400 	.word	0x40013400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	00010007 	.word	0x00010007

080031e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e049      	b.n	800328e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d106      	bne.n	8003214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7fe fa56 	bl	80016c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2202      	movs	r2, #2
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	4610      	mov	r0, r2
 8003228:	f000 fbee 	bl	8003a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start+0x24>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e03c      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d109      	bne.n	80032d6 <HAL_TIM_PWM_Start+0x3e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	bf14      	ite	ne
 80032ce:	2301      	movne	r3, #1
 80032d0:	2300      	moveq	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	e02f      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d109      	bne.n	80032f0 <HAL_TIM_PWM_Start+0x58>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e022      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2b0c      	cmp	r3, #12
 80032f4:	d109      	bne.n	800330a <HAL_TIM_PWM_Start+0x72>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b01      	cmp	r3, #1
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	e015      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b10      	cmp	r3, #16
 800330e:	d109      	bne.n	8003324 <HAL_TIM_PWM_Start+0x8c>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b01      	cmp	r3, #1
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	e008      	b.n	8003336 <HAL_TIM_PWM_Start+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	bf14      	ite	ne
 8003330:	2301      	movne	r3, #1
 8003332:	2300      	moveq	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e097      	b.n	800346e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xb6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800334c:	e023      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b04      	cmp	r3, #4
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xc6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	e01b      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b08      	cmp	r3, #8
 8003362:	d104      	bne.n	800336e <HAL_TIM_PWM_Start+0xd6>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336c:	e013      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b0c      	cmp	r3, #12
 8003372:	d104      	bne.n	800337e <HAL_TIM_PWM_Start+0xe6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2202      	movs	r2, #2
 8003378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800337c:	e00b      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b10      	cmp	r3, #16
 8003382:	d104      	bne.n	800338e <HAL_TIM_PWM_Start+0xf6>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2202      	movs	r2, #2
 8003388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800338c:	e003      	b.n	8003396 <HAL_TIM_PWM_Start+0xfe>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 feb8 	bl	8004114 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a33      	ldr	r2, [pc, #204]	; (8003478 <HAL_TIM_PWM_Start+0x1e0>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a32      	ldr	r2, [pc, #200]	; (800347c <HAL_TIM_PWM_Start+0x1e4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00e      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a30      	ldr	r2, [pc, #192]	; (8003480 <HAL_TIM_PWM_Start+0x1e8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d009      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a2f      	ldr	r2, [pc, #188]	; (8003484 <HAL_TIM_PWM_Start+0x1ec>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d004      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x13e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2d      	ldr	r2, [pc, #180]	; (8003488 <HAL_TIM_PWM_Start+0x1f0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_Start+0x142>
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_TIM_PWM_Start+0x144>
 80033da:	2300      	movs	r3, #0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a20      	ldr	r2, [pc, #128]	; (8003478 <HAL_TIM_PWM_Start+0x1e0>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d018      	beq.n	800342c <HAL_TIM_PWM_Start+0x194>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003402:	d013      	beq.n	800342c <HAL_TIM_PWM_Start+0x194>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_TIM_PWM_Start+0x1f4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <HAL_TIM_PWM_Start+0x194>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1f      	ldr	r2, [pc, #124]	; (8003490 <HAL_TIM_PWM_Start+0x1f8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_TIM_PWM_Start+0x194>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a17      	ldr	r2, [pc, #92]	; (800347c <HAL_TIM_PWM_Start+0x1e4>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d004      	beq.n	800342c <HAL_TIM_PWM_Start+0x194>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a16      	ldr	r2, [pc, #88]	; (8003480 <HAL_TIM_PWM_Start+0x1e8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d115      	bne.n	8003458 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	4b18      	ldr	r3, [pc, #96]	; (8003494 <HAL_TIM_PWM_Start+0x1fc>)
 8003434:	4013      	ands	r3, r2
 8003436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b06      	cmp	r3, #6
 800343c:	d015      	beq.n	800346a <HAL_TIM_PWM_Start+0x1d2>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d011      	beq.n	800346a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	e008      	b.n	800346a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f042 0201 	orr.w	r2, r2, #1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	e000      	b.n	800346c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40012c00 	.word	0x40012c00
 800347c:	40013400 	.word	0x40013400
 8003480:	40014000 	.word	0x40014000
 8003484:	40014400 	.word	0x40014400
 8003488:	40014800 	.word	0x40014800
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	00010007 	.word	0x00010007

08003498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	691b      	ldr	r3, [r3, #16]
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d122      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d11b      	bne.n	80034f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0202 	mvn.w	r2, #2
 80034c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f000 fa76 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fa68 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fa79 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d122      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b04      	cmp	r3, #4
 800350e:	d11b      	bne.n	8003548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f06f 0204 	mvn.w	r2, #4
 8003518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2202      	movs	r2, #2
 800351e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fa4c 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003534:	e005      	b.n	8003542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 fa3e 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 fa4f 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b08      	cmp	r3, #8
 8003554:	d122      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d11b      	bne.n	800359c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0208 	mvn.w	r2, #8
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2204      	movs	r2, #4
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 fa22 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 8003588:	e005      	b.n	8003596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa14 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 fa25 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	f003 0310 	and.w	r3, r3, #16
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d122      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b10      	cmp	r3, #16
 80035b6:	d11b      	bne.n	80035f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f06f 0210 	mvn.w	r2, #16
 80035c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2208      	movs	r2, #8
 80035c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f9f8 	bl	80039cc <HAL_TIM_IC_CaptureCallback>
 80035dc:	e005      	b.n	80035ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9ea 	bl	80039b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f9fb 	bl	80039e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10e      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d107      	bne.n	800361c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0201 	mvn.w	r2, #1
 8003614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fc2e 	bl	8000e78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d10e      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003634:	2b80      	cmp	r3, #128	; 0x80
 8003636:	d107      	bne.n	8003648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 ff6c 	bl	8004520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003656:	d10e      	bne.n	8003676 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003662:	2b80      	cmp	r3, #128	; 0x80
 8003664:	d107      	bne.n	8003676 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 ff5f 	bl	8004534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d10e      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368e:	2b40      	cmp	r3, #64	; 0x40
 8003690:	d107      	bne.n	80036a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800369a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f9a9 	bl	80039f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d10e      	bne.n	80036ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d107      	bne.n	80036ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f06f 0220 	mvn.w	r2, #32
 80036c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 ff1f 	bl	800450c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036dc:	d10f      	bne.n	80036fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036ec:	d107      	bne.n	80036fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80036f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 ff25 	bl	8004548 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	691b      	ldr	r3, [r3, #16]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800370c:	d10f      	bne.n	800372e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800371c:	d107      	bne.n	800372e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 ff17 	bl	800455c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373c:	d10f      	bne.n	800375e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800374c:	d107      	bne.n	800375e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 ff09 	bl	8004570 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800376c:	d10f      	bne.n	800378e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800377c:	d107      	bne.n	800378e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 fefb 	bl	8004584 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
	...

08003798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d101      	bne.n	80037b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037ae:	2302      	movs	r3, #2
 80037b0:	e0fd      	b.n	80039ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b14      	cmp	r3, #20
 80037be:	f200 80f0 	bhi.w	80039a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	0800381d 	.word	0x0800381d
 80037cc:	080039a3 	.word	0x080039a3
 80037d0:	080039a3 	.word	0x080039a3
 80037d4:	080039a3 	.word	0x080039a3
 80037d8:	0800385d 	.word	0x0800385d
 80037dc:	080039a3 	.word	0x080039a3
 80037e0:	080039a3 	.word	0x080039a3
 80037e4:	080039a3 	.word	0x080039a3
 80037e8:	0800389f 	.word	0x0800389f
 80037ec:	080039a3 	.word	0x080039a3
 80037f0:	080039a3 	.word	0x080039a3
 80037f4:	080039a3 	.word	0x080039a3
 80037f8:	080038df 	.word	0x080038df
 80037fc:	080039a3 	.word	0x080039a3
 8003800:	080039a3 	.word	0x080039a3
 8003804:	080039a3 	.word	0x080039a3
 8003808:	08003921 	.word	0x08003921
 800380c:	080039a3 	.word	0x080039a3
 8003810:	080039a3 	.word	0x080039a3
 8003814:	080039a3 	.word	0x080039a3
 8003818:	08003961 	.word	0x08003961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68b9      	ldr	r1, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f000 f980 	bl	8003b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0208 	orr.w	r2, r2, #8
 8003836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	699a      	ldr	r2, [r3, #24]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0204 	bic.w	r2, r2, #4
 8003846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6999      	ldr	r1, [r3, #24]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	619a      	str	r2, [r3, #24]
      break;
 800385a:	e0a3      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 f9f0 	bl	8003c48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	699a      	ldr	r2, [r3, #24]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6999      	ldr	r1, [r3, #24]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	619a      	str	r2, [r3, #24]
      break;
 800389c:	e082      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fa59 	bl	8003d5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	69da      	ldr	r2, [r3, #28]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0208 	orr.w	r2, r2, #8
 80038b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69da      	ldr	r2, [r3, #28]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0204 	bic.w	r2, r2, #4
 80038c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69d9      	ldr	r1, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	430a      	orrs	r2, r1
 80038da:	61da      	str	r2, [r3, #28]
      break;
 80038dc:	e062      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f000 fac1 	bl	8003e6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69da      	ldr	r2, [r3, #28]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	69da      	ldr	r2, [r3, #28]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69d9      	ldr	r1, [r3, #28]
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	691b      	ldr	r3, [r3, #16]
 8003914:	021a      	lsls	r2, r3, #8
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	61da      	str	r2, [r3, #28]
      break;
 800391e:	e041      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb2a 	bl	8003f80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0208 	orr.w	r2, r2, #8
 800393a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0204 	bic.w	r2, r2, #4
 800394a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800395e:	e021      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fb6e 	bl	8004048 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800397a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800398a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	021a      	lsls	r2, r3, #8
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80039a0:	e000      	b.n	80039a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80039a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop

080039b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <TIM_Base_SetConfig+0x104>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00f      	beq.n	8003a40 <TIM_Base_SetConfig+0x38>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a26:	d00b      	beq.n	8003a40 <TIM_Base_SetConfig+0x38>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a39      	ldr	r2, [pc, #228]	; (8003b10 <TIM_Base_SetConfig+0x108>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d007      	beq.n	8003a40 <TIM_Base_SetConfig+0x38>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a38      	ldr	r2, [pc, #224]	; (8003b14 <TIM_Base_SetConfig+0x10c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d003      	beq.n	8003a40 <TIM_Base_SetConfig+0x38>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a37      	ldr	r2, [pc, #220]	; (8003b18 <TIM_Base_SetConfig+0x110>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d108      	bne.n	8003a52 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a2d      	ldr	r2, [pc, #180]	; (8003b0c <TIM_Base_SetConfig+0x104>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2a      	ldr	r2, [pc, #168]	; (8003b10 <TIM_Base_SetConfig+0x108>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <TIM_Base_SetConfig+0x10c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <TIM_Base_SetConfig+0x110>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a27      	ldr	r2, [pc, #156]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a26      	ldr	r2, [pc, #152]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0x8a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a10      	ldr	r2, [pc, #64]	; (8003b0c <TIM_Base_SetConfig+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d00f      	beq.n	8003af0 <TIM_Base_SetConfig+0xe8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a11      	ldr	r2, [pc, #68]	; (8003b18 <TIM_Base_SetConfig+0x110>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00b      	beq.n	8003af0 <TIM_Base_SetConfig+0xe8>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <TIM_Base_SetConfig+0x114>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d007      	beq.n	8003af0 <TIM_Base_SetConfig+0xe8>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a0f      	ldr	r2, [pc, #60]	; (8003b20 <TIM_Base_SetConfig+0x118>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_Base_SetConfig+0xe8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a0e      	ldr	r2, [pc, #56]	; (8003b24 <TIM_Base_SetConfig+0x11c>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d103      	bne.n	8003af8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	615a      	str	r2, [r3, #20]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800

08003b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0201 	bic.w	r2, r3, #1
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f023 0302 	bic.w	r3, r3, #2
 8003b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <TIM_OC1_SetConfig+0x10c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00f      	beq.n	8003ba8 <TIM_OC1_SetConfig+0x80>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <TIM_OC1_SetConfig+0x110>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <TIM_OC1_SetConfig+0x80>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <TIM_OC1_SetConfig+0x114>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d007      	beq.n	8003ba8 <TIM_OC1_SetConfig+0x80>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <TIM_OC1_SetConfig+0x118>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d003      	beq.n	8003ba8 <TIM_OC1_SetConfig+0x80>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <TIM_OC1_SetConfig+0x11c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d10c      	bne.n	8003bc2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0308 	bic.w	r3, r3, #8
 8003bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 0304 	bic.w	r3, r3, #4
 8003bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <TIM_OC1_SetConfig+0x10c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00f      	beq.n	8003bea <TIM_OC1_SetConfig+0xc2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a1a      	ldr	r2, [pc, #104]	; (8003c38 <TIM_OC1_SetConfig+0x110>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <TIM_OC1_SetConfig+0xc2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <TIM_OC1_SetConfig+0x114>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <TIM_OC1_SetConfig+0xc2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <TIM_OC1_SetConfig+0x118>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_OC1_SetConfig+0xc2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <TIM_OC1_SetConfig+0x11c>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d111      	bne.n	8003c0e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bf0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	621a      	str	r2, [r3, #32]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	40012c00 	.word	0x40012c00
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	f023 0210 	bic.w	r2, r3, #16
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	021b      	lsls	r3, r3, #8
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	f023 0320 	bic.w	r3, r3, #32
 8003c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a28      	ldr	r2, [pc, #160]	; (8003d48 <TIM_OC2_SetConfig+0x100>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_OC2_SetConfig+0x6c>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a27      	ldr	r2, [pc, #156]	; (8003d4c <TIM_OC2_SetConfig+0x104>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d10d      	bne.n	8003cd0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	011b      	lsls	r3, r3, #4
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a1d      	ldr	r2, [pc, #116]	; (8003d48 <TIM_OC2_SetConfig+0x100>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00f      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xb0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <TIM_OC2_SetConfig+0x104>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d00b      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xb0>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <TIM_OC2_SetConfig+0x108>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d007      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xb0>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a1a      	ldr	r2, [pc, #104]	; (8003d54 <TIM_OC2_SetConfig+0x10c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d003      	beq.n	8003cf8 <TIM_OC2_SetConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a19      	ldr	r2, [pc, #100]	; (8003d58 <TIM_OC2_SetConfig+0x110>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d113      	bne.n	8003d20 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	621a      	str	r2, [r3, #32]
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40013400 	.word	0x40013400
 8003d50:	40014000 	.word	0x40014000
 8003d54:	40014400 	.word	0x40014400
 8003d58:	40014800 	.word	0x40014800

08003d5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b087      	sub	sp, #28
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a1b      	ldr	r3, [r3, #32]
 8003d6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0303 	bic.w	r3, r3, #3
 8003d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	021b      	lsls	r3, r3, #8
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <TIM_OC3_SetConfig+0xfc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <TIM_OC3_SetConfig+0x6a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	; (8003e5c <TIM_OC3_SetConfig+0x100>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10d      	bne.n	8003de2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	021b      	lsls	r3, r3, #8
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <TIM_OC3_SetConfig+0xfc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00f      	beq.n	8003e0a <TIM_OC3_SetConfig+0xae>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <TIM_OC3_SetConfig+0x100>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d00b      	beq.n	8003e0a <TIM_OC3_SetConfig+0xae>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	; (8003e60 <TIM_OC3_SetConfig+0x104>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d007      	beq.n	8003e0a <TIM_OC3_SetConfig+0xae>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <TIM_OC3_SetConfig+0x108>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d003      	beq.n	8003e0a <TIM_OC3_SetConfig+0xae>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a18      	ldr	r2, [pc, #96]	; (8003e68 <TIM_OC3_SetConfig+0x10c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d113      	bne.n	8003e32 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40013400 	.word	0x40013400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800

08003e6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003eba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	031b      	lsls	r3, r3, #12
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_OC4_SetConfig+0x100>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_OC4_SetConfig+0x6c>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_OC4_SetConfig+0x104>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d10d      	bne.n	8003ef4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ede:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	031b      	lsls	r3, r3, #12
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ef2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC4_SetConfig+0x100>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00f      	beq.n	8003f1c <TIM_OC4_SetConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <TIM_OC4_SetConfig+0x104>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d00b      	beq.n	8003f1c <TIM_OC4_SetConfig+0xb0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a1b      	ldr	r2, [pc, #108]	; (8003f74 <TIM_OC4_SetConfig+0x108>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d007      	beq.n	8003f1c <TIM_OC4_SetConfig+0xb0>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1a      	ldr	r2, [pc, #104]	; (8003f78 <TIM_OC4_SetConfig+0x10c>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC4_SetConfig+0xb0>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <TIM_OC4_SetConfig+0x110>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d113      	bne.n	8003f44 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	695b      	ldr	r3, [r3, #20]
 8003f30:	019b      	lsls	r3, r3, #6
 8003f32:	693a      	ldr	r2, [r7, #16]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	019b      	lsls	r3, r3, #6
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	621a      	str	r2, [r3, #32]
}
 8003f5e:	bf00      	nop
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40013400 	.word	0x40013400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800

08003f80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <TIM_OC5_SetConfig+0xb4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00f      	beq.n	8003ffa <TIM_OC5_SetConfig+0x7a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <TIM_OC5_SetConfig+0xb8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00b      	beq.n	8003ffa <TIM_OC5_SetConfig+0x7a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <TIM_OC5_SetConfig+0xbc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d007      	beq.n	8003ffa <TIM_OC5_SetConfig+0x7a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <TIM_OC5_SetConfig+0xc0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d003      	beq.n	8003ffa <TIM_OC5_SetConfig+0x7a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a13      	ldr	r2, [pc, #76]	; (8004044 <TIM_OC5_SetConfig+0xc4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d109      	bne.n	800400e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004000:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	021b      	lsls	r3, r3, #8
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	621a      	str	r2, [r3, #32]
}
 8004028:	bf00      	nop
 800402a:	371c      	adds	r7, #28
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40013400 	.word	0x40013400
 800403c:	40014000 	.word	0x40014000
 8004040:	40014400 	.word	0x40014400
 8004044:	40014800 	.word	0x40014800

08004048 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800408e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	051b      	lsls	r3, r3, #20
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	4313      	orrs	r3, r2
 800409a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a18      	ldr	r2, [pc, #96]	; (8004100 <TIM_OC6_SetConfig+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00f      	beq.n	80040c4 <TIM_OC6_SetConfig+0x7c>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a17      	ldr	r2, [pc, #92]	; (8004104 <TIM_OC6_SetConfig+0xbc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d00b      	beq.n	80040c4 <TIM_OC6_SetConfig+0x7c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a16      	ldr	r2, [pc, #88]	; (8004108 <TIM_OC6_SetConfig+0xc0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d007      	beq.n	80040c4 <TIM_OC6_SetConfig+0x7c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a15      	ldr	r2, [pc, #84]	; (800410c <TIM_OC6_SetConfig+0xc4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d003      	beq.n	80040c4 <TIM_OC6_SetConfig+0x7c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a14      	ldr	r2, [pc, #80]	; (8004110 <TIM_OC6_SetConfig+0xc8>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d109      	bne.n	80040d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	029b      	lsls	r3, r3, #10
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685a      	ldr	r2, [r3, #4]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	693a      	ldr	r2, [r7, #16]
 80040f0:	621a      	str	r2, [r3, #32]
}
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40012c00 	.word	0x40012c00
 8004104:	40013400 	.word	0x40013400
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400
 8004110:	40014800 	.word	0x40014800

08004114 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2201      	movs	r2, #1
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1a      	ldr	r2, [r3, #32]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	43db      	mvns	r3, r3
 8004136:	401a      	ands	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	fa01 f303 	lsl.w	r3, r1, r3
 800414c:	431a      	orrs	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
	...

08004160 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d109      	bne.n	8004184 <HAL_TIMEx_PWMN_Start+0x24>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf14      	ite	ne
 800417c:	2301      	movne	r3, #1
 800417e:	2300      	moveq	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	e022      	b.n	80041ca <HAL_TIMEx_PWMN_Start+0x6a>
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	2b04      	cmp	r3, #4
 8004188:	d109      	bne.n	800419e <HAL_TIMEx_PWMN_Start+0x3e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004190:	b2db      	uxtb	r3, r3
 8004192:	2b01      	cmp	r3, #1
 8004194:	bf14      	ite	ne
 8004196:	2301      	movne	r3, #1
 8004198:	2300      	moveq	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	e015      	b.n	80041ca <HAL_TIMEx_PWMN_Start+0x6a>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d109      	bne.n	80041b8 <HAL_TIMEx_PWMN_Start+0x58>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	bf14      	ite	ne
 80041b0:	2301      	movne	r3, #1
 80041b2:	2300      	moveq	r3, #0
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	e008      	b.n	80041ca <HAL_TIMEx_PWMN_Start+0x6a>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e069      	b.n	80042a6 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_TIMEx_PWMN_Start+0x82>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041e0:	e013      	b.n	800420a <HAL_TIMEx_PWMN_Start+0xaa>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d104      	bne.n	80041f2 <HAL_TIMEx_PWMN_Start+0x92>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041f0:	e00b      	b.n	800420a <HAL_TIMEx_PWMN_Start+0xaa>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d104      	bne.n	8004202 <HAL_TIMEx_PWMN_Start+0xa2>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2202      	movs	r2, #2
 80041fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004200:	e003      	b.n	800420a <HAL_TIMEx_PWMN_Start+0xaa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2202      	movs	r2, #2
 8004206:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f000 f9c0 	bl	8004598 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004226:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a20      	ldr	r2, [pc, #128]	; (80042b0 <HAL_TIMEx_PWMN_Start+0x150>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d018      	beq.n	8004264 <HAL_TIMEx_PWMN_Start+0x104>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423a:	d013      	beq.n	8004264 <HAL_TIMEx_PWMN_Start+0x104>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_TIMEx_PWMN_Start+0x154>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00e      	beq.n	8004264 <HAL_TIMEx_PWMN_Start+0x104>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a1b      	ldr	r2, [pc, #108]	; (80042b8 <HAL_TIMEx_PWMN_Start+0x158>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_TIMEx_PWMN_Start+0x104>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a19      	ldr	r2, [pc, #100]	; (80042bc <HAL_TIMEx_PWMN_Start+0x15c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_TIMEx_PWMN_Start+0x104>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <HAL_TIMEx_PWMN_Start+0x160>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d115      	bne.n	8004290 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	4b16      	ldr	r3, [pc, #88]	; (80042c4 <HAL_TIMEx_PWMN_Start+0x164>)
 800426c:	4013      	ands	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b06      	cmp	r3, #6
 8004274:	d015      	beq.n	80042a2 <HAL_TIMEx_PWMN_Start+0x142>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427c:	d011      	beq.n	80042a2 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0201 	orr.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428e:	e008      	b.n	80042a2 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	e000      	b.n	80042a4 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40012c00 	.word	0x40012c00
 80042b4:	40000400 	.word	0x40000400
 80042b8:	40000800 	.word	0x40000800
 80042bc:	40013400 	.word	0x40013400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	00010007 	.word	0x00010007

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e065      	b.n	80043ac <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a2c      	ldr	r2, [pc, #176]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2b      	ldr	r2, [pc, #172]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800431a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800432c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004330:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a1b      	ldr	r2, [pc, #108]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d018      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004356:	d013      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a12      	ldr	r2, [pc, #72]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d10c      	bne.n	800439a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004386:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	4313      	orrs	r3, r2
 8004390:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3714      	adds	r7, #20
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40012c00 	.word	0x40012c00
 80043bc:	40013400 	.word	0x40013400
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40014000 	.word	0x40014000

080043cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e087      	b.n	80044f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4313      	orrs	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4313      	orrs	r3, r2
 8004450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	041b      	lsls	r3, r3, #16
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a27      	ldr	r2, [pc, #156]	; (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a25      	ldr	r2, [pc, #148]	; (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d106      	bne.n	8004484 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a1e      	ldr	r2, [pc, #120]	; (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d004      	beq.n	8004498 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1d      	ldr	r2, [pc, #116]	; (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d126      	bne.n	80044e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	051b      	lsls	r3, r3, #20
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a0e      	ldr	r2, [pc, #56]	; (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d106      	bne.n	80044e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	4313      	orrs	r3, r2
 80044e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40013400 	.word	0x40013400

0800450c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004598:	b480      	push	{r7}
 800459a:	b087      	sub	sp, #28
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f003 031f 	and.w	r3, r3, #31
 80045aa:	2204      	movs	r2, #4
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1a      	ldr	r2, [r3, #32]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	43db      	mvns	r3, r3
 80045ba:	401a      	ands	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6a1a      	ldr	r2, [r3, #32]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 031f 	and.w	r3, r3, #31
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	fa01 f303 	lsl.w	r3, r1, r3
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	621a      	str	r2, [r3, #32]
}
 80045d6:	bf00      	nop
 80045d8:	371c      	adds	r7, #28
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e042      	b.n	800467a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd f91c 	bl	8001844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	; 0x24
 8004610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb5d 	bl	8004ce4 <UART_SetConfig>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e022      	b.n	800467a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fdef 	bl	8005220 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004650:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004660:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0201 	orr.w	r2, r2, #1
 8004670:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fe76 	bl	8005364 <UART_CheckIdleState>
 8004678:	4603      	mov	r3, r0
}
 800467a:	4618      	mov	r0, r3
 800467c:	3708      	adds	r7, #8
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b08a      	sub	sp, #40	; 0x28
 8004686:	af02      	add	r7, sp, #8
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	603b      	str	r3, [r7, #0]
 800468e:	4613      	mov	r3, r2
 8004690:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004698:	2b20      	cmp	r3, #32
 800469a:	f040 8083 	bne.w	80047a4 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <HAL_UART_Transmit+0x28>
 80046a4:	88fb      	ldrh	r3, [r7, #6]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e07b      	b.n	80047a6 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Transmit+0x3a>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e074      	b.n	80047a6 <HAL_UART_Transmit+0x124>
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2221      	movs	r2, #33	; 0x21
 80046d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046d4:	f7fd f954 	bl	8001980 <HAL_GetTick>
 80046d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	88fa      	ldrh	r2, [r7, #6]
 80046de:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f2:	d108      	bne.n	8004706 <HAL_UART_Transmit+0x84>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d104      	bne.n	8004706 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	e003      	b.n	800470e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8004716:	e02c      	b.n	8004772 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	9300      	str	r3, [sp, #0]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2200      	movs	r2, #0
 8004720:	2180      	movs	r1, #128	; 0x80
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fe69 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e039      	b.n	80047a6 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10b      	bne.n	8004750 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	461a      	mov	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004746:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	3302      	adds	r3, #2
 800474c:	61bb      	str	r3, [r7, #24]
 800474e:	e007      	b.n	8004760 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	3301      	adds	r3, #1
 800475e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1cc      	bne.n	8004718 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fe36 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d131      	bne.n	800482c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_UART_Receive_IT+0x24>
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e02a      	b.n	800482e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Receive_IT+0x36>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e023      	b.n	800482e <HAL_UART_Receive_IT+0x7e>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a0f      	ldr	r2, [pc, #60]	; (8004838 <HAL_UART_Receive_IT+0x88>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00e      	beq.n	800481c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800481a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800481c:	88fb      	ldrh	r3, [r7, #6]
 800481e:	461a      	mov	r2, r3
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fe6a 	bl	80054fc <UART_Start_Receive_IT>
 8004828:	4603      	mov	r3, r0
 800482a:	e000      	b.n	800482e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800482c:	2302      	movs	r3, #2
  }
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40008000 	.word	0x40008000

0800483c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b088      	sub	sp, #32
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004862:	4013      	ands	r3, r2
 8004864:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d118      	bne.n	800489e <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d013      	beq.n	800489e <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d104      	bne.n	800488a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800488e:	2b00      	cmp	r3, #0
 8004890:	f000 81fb 	beq.w	8004c8a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
      }
      return;
 800489c:	e1f5      	b.n	8004c8a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80ef 	beq.w	8004a84 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	4b73      	ldr	r3, [pc, #460]	; (8004a78 <HAL_UART_IRQHandler+0x23c>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d105      	bne.n	80048bc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4b72      	ldr	r3, [pc, #456]	; (8004a7c <HAL_UART_IRQHandler+0x240>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80e4 	beq.w	8004a84 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d010      	beq.n	80048e8 <HAL_UART_IRQHandler+0xac>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2201      	movs	r2, #1
 80048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048de:	f043 0201 	orr.w	r2, r3, #1
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <HAL_UART_IRQHandler+0xd8>
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2202      	movs	r2, #2
 8004902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800490a:	f043 0204 	orr.w	r2, r3, #4
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	f003 0304 	and.w	r3, r3, #4
 800491a:	2b00      	cmp	r3, #0
 800491c:	d010      	beq.n	8004940 <HAL_UART_IRQHandler+0x104>
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00b      	beq.n	8004940 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2204      	movs	r2, #4
 800492e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004936:	f043 0202 	orr.w	r2, r3, #2
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d015      	beq.n	8004976 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	f003 0320 	and.w	r3, r3, #32
 8004950:	2b00      	cmp	r3, #0
 8004952:	d104      	bne.n	800495e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4b48      	ldr	r3, [pc, #288]	; (8004a78 <HAL_UART_IRQHandler+0x23c>)
 8004958:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2208      	movs	r2, #8
 8004964:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800496c:	f043 0208 	orr.w	r2, r3, #8
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497c:	2b00      	cmp	r3, #0
 800497e:	d011      	beq.n	80049a4 <HAL_UART_IRQHandler+0x168>
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800499a:	f043 0220 	orr.w	r2, r3, #32
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 816f 	beq.w	8004c8e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f003 0320 	and.w	r3, r3, #32
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d011      	beq.n	80049de <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	f003 0320 	and.w	r3, r3, #32
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049e4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d004      	beq.n	80049fe <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d031      	beq.n	8004a62 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fe3a 	bl	8005678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a0e:	2b40      	cmp	r3, #64	; 0x40
 8004a10:	d123      	bne.n	8004a5a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a20:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d013      	beq.n	8004a52 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a2e:	4a14      	ldr	r2, [pc, #80]	; (8004a80 <HAL_UART_IRQHandler+0x244>)
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fd f8e7 	bl	8001c0a <HAL_DMA_Abort_IT>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d017      	beq.n	8004a72 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a50:	e00f      	b.n	8004a72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f930 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	e00b      	b.n	8004a72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f92c 	bl	8004cb8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a60:	e007      	b.n	8004a72 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f928 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004a70:	e10d      	b.n	8004c8e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a72:	bf00      	nop
    return;
 8004a74:	e10b      	b.n	8004c8e <HAL_UART_IRQHandler+0x452>
 8004a76:	bf00      	nop
 8004a78:	10000001 	.word	0x10000001
 8004a7c:	04000120 	.word	0x04000120
 8004a80:	080056dd 	.word	0x080056dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	f040 80ab 	bne.w	8004be4 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80a5 	beq.w	8004be4 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 809f 	beq.w	8004be4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2210      	movs	r2, #16
 8004aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab8:	2b40      	cmp	r3, #64	; 0x40
 8004aba:	d155      	bne.n	8004b68 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8004ac6:	893b      	ldrh	r3, [r7, #8]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f000 80e2 	beq.w	8004c92 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ad4:	893a      	ldrh	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	f080 80db 	bcs.w	8004c92 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	893a      	ldrh	r2, [r7, #8]
 8004ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d12b      	bne.n	8004b4c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b02:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0210 	bic.w	r2, r2, #16
 8004b40:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fd f806 	bl	8001b58 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f8b3 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b66:	e094      	b.n	8004c92 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	1ad3      	subs	r3, r2, r3
 8004b78:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8087 	beq.w	8004c96 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8004b88:	897b      	ldrh	r3, [r7, #10]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 8083 	beq.w	8004c96 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b9e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0210 	bic.w	r2, r2, #16
 8004bd6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bd8:	897b      	ldrh	r3, [r7, #10]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f875 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be2:	e058      	b.n	8004c96 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00d      	beq.n	8004c0a <HAL_UART_IRQHandler+0x3ce>
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f001 f876 	bl	8005cf4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c08:	e048      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d012      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d104      	bne.n	8004c28 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d034      	beq.n	8004c9a <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	4798      	blx	r3
    }
    return;
 8004c38:	e02f      	b.n	8004c9a <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_UART_IRQHandler+0x41a>
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fd5a 	bl	8005708 <UART_EndTransmit_IT>
    return;
 8004c54:	e022      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_UART_IRQHandler+0x436>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f001 f856 	bl	8005d1c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c70:	e014      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d00f      	beq.n	8004c9c <HAL_UART_IRQHandler+0x460>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	da0c      	bge.n	8004c9c <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f001 f840 	bl	8005d08 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c88:	e008      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
      return;
 8004c8a:	bf00      	nop
 8004c8c:	e006      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
    return;
 8004c8e:	bf00      	nop
 8004c90:	e004      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
      return;
 8004c92:	bf00      	nop
 8004c94:	e002      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
      return;
 8004c96:	bf00      	nop
 8004c98:	e000      	b.n	8004c9c <HAL_UART_IRQHandler+0x460>
    return;
 8004c9a:	bf00      	nop
  }
}
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop

08004ca4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cc0:	bf00      	nop
 8004cc2:	370c      	adds	r7, #12
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	b5b0      	push	{r4, r5, r7, lr}
 8004ce6:	b088      	sub	sp, #32
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	4baf      	ldr	r3, [pc, #700]	; (8004fcc <UART_SetConfig+0x2e8>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6812      	ldr	r2, [r2, #0]
 8004d16:	69f9      	ldr	r1, [r7, #28]
 8004d18:	430b      	orrs	r3, r1
 8004d1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	68da      	ldr	r2, [r3, #12]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4aa4      	ldr	r2, [pc, #656]	; (8004fd0 <UART_SetConfig+0x2ec>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	69fa      	ldr	r2, [r7, #28]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d56:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	69f9      	ldr	r1, [r7, #28]
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	f023 010f 	bic.w	r1, r3, #15
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a95      	ldr	r2, [pc, #596]	; (8004fd4 <UART_SetConfig+0x2f0>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d120      	bne.n	8004dc6 <UART_SetConfig+0xe2>
 8004d84:	4b94      	ldr	r3, [pc, #592]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d816      	bhi.n	8004dc0 <UART_SetConfig+0xdc>
 8004d92:	a201      	add	r2, pc, #4	; (adr r2, 8004d98 <UART_SetConfig+0xb4>)
 8004d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004db5 	.word	0x08004db5
 8004da0:	08004daf 	.word	0x08004daf
 8004da4:	08004dbb 	.word	0x08004dbb
 8004da8:	2301      	movs	r3, #1
 8004daa:	76fb      	strb	r3, [r7, #27]
 8004dac:	e0bc      	b.n	8004f28 <UART_SetConfig+0x244>
 8004dae:	2302      	movs	r3, #2
 8004db0:	76fb      	strb	r3, [r7, #27]
 8004db2:	e0b9      	b.n	8004f28 <UART_SetConfig+0x244>
 8004db4:	2304      	movs	r3, #4
 8004db6:	76fb      	strb	r3, [r7, #27]
 8004db8:	e0b6      	b.n	8004f28 <UART_SetConfig+0x244>
 8004dba:	2308      	movs	r3, #8
 8004dbc:	76fb      	strb	r3, [r7, #27]
 8004dbe:	e0b3      	b.n	8004f28 <UART_SetConfig+0x244>
 8004dc0:	2310      	movs	r3, #16
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e0b0      	b.n	8004f28 <UART_SetConfig+0x244>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a84      	ldr	r2, [pc, #528]	; (8004fdc <UART_SetConfig+0x2f8>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d132      	bne.n	8004e36 <UART_SetConfig+0x152>
 8004dd0:	4b81      	ldr	r3, [pc, #516]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f003 030c 	and.w	r3, r3, #12
 8004dda:	2b0c      	cmp	r3, #12
 8004ddc:	d828      	bhi.n	8004e30 <UART_SetConfig+0x14c>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x100>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e31 	.word	0x08004e31
 8004e04:	08004e1f 	.word	0x08004e1f
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e31 	.word	0x08004e31
 8004e14:	08004e2b 	.word	0x08004e2b
 8004e18:	2300      	movs	r3, #0
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e084      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e081      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e24:	2304      	movs	r3, #4
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e07e      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e07b      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e30:	2310      	movs	r3, #16
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	e078      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a69      	ldr	r2, [pc, #420]	; (8004fe0 <UART_SetConfig+0x2fc>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d120      	bne.n	8004e82 <UART_SetConfig+0x19e>
 8004e40:	4b65      	ldr	r3, [pc, #404]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e4a:	2b30      	cmp	r3, #48	; 0x30
 8004e4c:	d013      	beq.n	8004e76 <UART_SetConfig+0x192>
 8004e4e:	2b30      	cmp	r3, #48	; 0x30
 8004e50:	d814      	bhi.n	8004e7c <UART_SetConfig+0x198>
 8004e52:	2b20      	cmp	r3, #32
 8004e54:	d009      	beq.n	8004e6a <UART_SetConfig+0x186>
 8004e56:	2b20      	cmp	r3, #32
 8004e58:	d810      	bhi.n	8004e7c <UART_SetConfig+0x198>
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <UART_SetConfig+0x180>
 8004e5e:	2b10      	cmp	r3, #16
 8004e60:	d006      	beq.n	8004e70 <UART_SetConfig+0x18c>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x198>
 8004e64:	2300      	movs	r3, #0
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e05e      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e05b      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e70:	2304      	movs	r3, #4
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e058      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e76:	2308      	movs	r3, #8
 8004e78:	76fb      	strb	r3, [r7, #27]
 8004e7a:	e055      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	e052      	b.n	8004f28 <UART_SetConfig+0x244>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <UART_SetConfig+0x300>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d120      	bne.n	8004ece <UART_SetConfig+0x1ea>
 8004e8c:	4b52      	ldr	r3, [pc, #328]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e96:	2bc0      	cmp	r3, #192	; 0xc0
 8004e98:	d013      	beq.n	8004ec2 <UART_SetConfig+0x1de>
 8004e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e9c:	d814      	bhi.n	8004ec8 <UART_SetConfig+0x1e4>
 8004e9e:	2b80      	cmp	r3, #128	; 0x80
 8004ea0:	d009      	beq.n	8004eb6 <UART_SetConfig+0x1d2>
 8004ea2:	2b80      	cmp	r3, #128	; 0x80
 8004ea4:	d810      	bhi.n	8004ec8 <UART_SetConfig+0x1e4>
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <UART_SetConfig+0x1cc>
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d006      	beq.n	8004ebc <UART_SetConfig+0x1d8>
 8004eae:	e00b      	b.n	8004ec8 <UART_SetConfig+0x1e4>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	e038      	b.n	8004f28 <UART_SetConfig+0x244>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	76fb      	strb	r3, [r7, #27]
 8004eba:	e035      	b.n	8004f28 <UART_SetConfig+0x244>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	76fb      	strb	r3, [r7, #27]
 8004ec0:	e032      	b.n	8004f28 <UART_SetConfig+0x244>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	76fb      	strb	r3, [r7, #27]
 8004ec6:	e02f      	b.n	8004f28 <UART_SetConfig+0x244>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	76fb      	strb	r3, [r7, #27]
 8004ecc:	e02c      	b.n	8004f28 <UART_SetConfig+0x244>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	; (8004fd0 <UART_SetConfig+0x2ec>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d125      	bne.n	8004f24 <UART_SetConfig+0x240>
 8004ed8:	4b3f      	ldr	r3, [pc, #252]	; (8004fd8 <UART_SetConfig+0x2f4>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee6:	d017      	beq.n	8004f18 <UART_SetConfig+0x234>
 8004ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eec:	d817      	bhi.n	8004f1e <UART_SetConfig+0x23a>
 8004eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef2:	d00b      	beq.n	8004f0c <UART_SetConfig+0x228>
 8004ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef8:	d811      	bhi.n	8004f1e <UART_SetConfig+0x23a>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <UART_SetConfig+0x222>
 8004efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f02:	d006      	beq.n	8004f12 <UART_SetConfig+0x22e>
 8004f04:	e00b      	b.n	8004f1e <UART_SetConfig+0x23a>
 8004f06:	2300      	movs	r3, #0
 8004f08:	76fb      	strb	r3, [r7, #27]
 8004f0a:	e00d      	b.n	8004f28 <UART_SetConfig+0x244>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	76fb      	strb	r3, [r7, #27]
 8004f10:	e00a      	b.n	8004f28 <UART_SetConfig+0x244>
 8004f12:	2304      	movs	r3, #4
 8004f14:	76fb      	strb	r3, [r7, #27]
 8004f16:	e007      	b.n	8004f28 <UART_SetConfig+0x244>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	76fb      	strb	r3, [r7, #27]
 8004f1c:	e004      	b.n	8004f28 <UART_SetConfig+0x244>
 8004f1e:	2310      	movs	r3, #16
 8004f20:	76fb      	strb	r3, [r7, #27]
 8004f22:	e001      	b.n	8004f28 <UART_SetConfig+0x244>
 8004f24:	2310      	movs	r3, #16
 8004f26:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a28      	ldr	r2, [pc, #160]	; (8004fd0 <UART_SetConfig+0x2ec>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	f040 809e 	bne.w	8005070 <UART_SetConfig+0x38c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f34:	7efb      	ldrb	r3, [r7, #27]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d823      	bhi.n	8004f82 <UART_SetConfig+0x29e>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x25c>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f83 	.word	0x08004f83
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004f83 	.word	0x08004f83
 8004f50:	08004f73 	.word	0x08004f73
 8004f54:	08004f83 	.word	0x08004f83
 8004f58:	08004f83 	.word	0x08004f83
 8004f5c:	08004f83 	.word	0x08004f83
 8004f60:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fd fde0 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8004f68:	6178      	str	r0, [r7, #20]
        break;
 8004f6a:	e00f      	b.n	8004f8c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b1e      	ldr	r3, [pc, #120]	; (8004fe8 <UART_SetConfig+0x304>)
 8004f6e:	617b      	str	r3, [r7, #20]
        break;
 8004f70:	e00c      	b.n	8004f8c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fd fd6b 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8004f76:	6178      	str	r0, [r7, #20]
        break;
 8004f78:	e008      	b.n	8004f8c <UART_SetConfig+0x2a8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	617b      	str	r3, [r7, #20]
        break;
 8004f80:	e004      	b.n	8004f8c <UART_SetConfig+0x2a8>
      default:
        pclk = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	76bb      	strb	r3, [r7, #26]
        break;
 8004f8a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f000 812e 	beq.w	80051f0 <UART_SetConfig+0x50c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	4a14      	ldr	r2, [pc, #80]	; (8004fec <UART_SetConfig+0x308>)
 8004f9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fa6:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	4613      	mov	r3, r2
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	4413      	add	r3, r2
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d305      	bcc.n	8004fc4 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d915      	bls.n	8004ff0 <UART_SetConfig+0x30c>
      {
        ret = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	76bb      	strb	r3, [r7, #26]
 8004fc8:	e112      	b.n	80051f0 <UART_SetConfig+0x50c>
 8004fca:	bf00      	nop
 8004fcc:	cfff69f3 	.word	0xcfff69f3
 8004fd0:	40008000 	.word	0x40008000
 8004fd4:	40013800 	.word	0x40013800
 8004fd8:	40021000 	.word	0x40021000
 8004fdc:	40004400 	.word	0x40004400
 8004fe0:	40004800 	.word	0x40004800
 8004fe4:	40004c00 	.word	0x40004c00
 8004fe8:	00f42400 	.word	0x00f42400
 8004fec:	08007190 	.word	0x08007190
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffc:	4a86      	ldr	r2, [pc, #536]	; (8005218 <UART_SetConfig+0x534>)
 8004ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005002:	b29a      	uxth	r2, r3
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	f7fb fc70 	bl	80008ec <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	020b      	lsls	r3, r1, #8
 800501e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005022:	0202      	lsls	r2, r0, #8
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	6849      	ldr	r1, [r1, #4]
 8005028:	0849      	lsrs	r1, r1, #1
 800502a:	4608      	mov	r0, r1
 800502c:	f04f 0100 	mov.w	r1, #0
 8005030:	1814      	adds	r4, r2, r0
 8005032:	eb43 0501 	adc.w	r5, r3, r1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	461a      	mov	r2, r3
 800503c:	f04f 0300 	mov.w	r3, #0
 8005040:	4620      	mov	r0, r4
 8005042:	4629      	mov	r1, r5
 8005044:	f7fb fc52 	bl	80008ec <__aeabi_uldivmod>
 8005048:	4602      	mov	r2, r0
 800504a:	460b      	mov	r3, r1
 800504c:	4613      	mov	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005056:	d308      	bcc.n	800506a <UART_SetConfig+0x386>
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800505e:	d204      	bcs.n	800506a <UART_SetConfig+0x386>
        {
          huart->Instance->BRR = usartdiv;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	60da      	str	r2, [r3, #12]
 8005068:	e0c2      	b.n	80051f0 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	76bb      	strb	r3, [r7, #26]
 800506e:	e0bf      	b.n	80051f0 <UART_SetConfig+0x50c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005078:	d165      	bne.n	8005146 <UART_SetConfig+0x462>
  {
    switch (clocksource)
 800507a:	7efb      	ldrb	r3, [r7, #27]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d828      	bhi.n	80050d2 <UART_SetConfig+0x3ee>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <UART_SetConfig+0x3a4>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050ad 	.word	0x080050ad
 800508c:	080050b5 	.word	0x080050b5
 8005090:	080050bd 	.word	0x080050bd
 8005094:	080050d3 	.word	0x080050d3
 8005098:	080050c3 	.word	0x080050c3
 800509c:	080050d3 	.word	0x080050d3
 80050a0:	080050d3 	.word	0x080050d3
 80050a4:	080050d3 	.word	0x080050d3
 80050a8:	080050cb 	.word	0x080050cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ac:	f7fd fd3c 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 80050b0:	6178      	str	r0, [r7, #20]
        break;
 80050b2:	e013      	b.n	80050dc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b4:	f7fd fd4e 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 80050b8:	6178      	str	r0, [r7, #20]
        break;
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <UART_SetConfig+0x538>)
 80050be:	617b      	str	r3, [r7, #20]
        break;
 80050c0:	e00c      	b.n	80050dc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050c2:	f7fd fcc3 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 80050c6:	6178      	str	r0, [r7, #20]
        break;
 80050c8:	e008      	b.n	80050dc <UART_SetConfig+0x3f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ce:	617b      	str	r3, [r7, #20]
        break;
 80050d0:	e004      	b.n	80050dc <UART_SetConfig+0x3f8>
      default:
        pclk = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	76bb      	strb	r3, [r7, #26]
        break;
 80050da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f000 8086 	beq.w	80051f0 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	4a4b      	ldr	r2, [pc, #300]	; (8005218 <UART_SetConfig+0x534>)
 80050ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ee:	461a      	mov	r2, r3
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80050f6:	005a      	lsls	r2, r3, #1
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	085b      	lsrs	r3, r3, #1
 80050fe:	441a      	add	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	b29b      	uxth	r3, r3
 800510a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	d916      	bls.n	8005140 <UART_SetConfig+0x45c>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d212      	bcs.n	8005140 <UART_SetConfig+0x45c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	b29b      	uxth	r3, r3
 800511e:	f023 030f 	bic.w	r3, r3, #15
 8005122:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	085b      	lsrs	r3, r3, #1
 8005128:	b29b      	uxth	r3, r3
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	b29a      	uxth	r2, r3
 8005130:	89fb      	ldrh	r3, [r7, #14]
 8005132:	4313      	orrs	r3, r2
 8005134:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	89fa      	ldrh	r2, [r7, #14]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	e057      	b.n	80051f0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	76bb      	strb	r3, [r7, #26]
 8005144:	e054      	b.n	80051f0 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005146:	7efb      	ldrb	r3, [r7, #27]
 8005148:	2b08      	cmp	r3, #8
 800514a:	d828      	bhi.n	800519e <UART_SetConfig+0x4ba>
 800514c:	a201      	add	r2, pc, #4	; (adr r2, 8005154 <UART_SetConfig+0x470>)
 800514e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005152:	bf00      	nop
 8005154:	08005179 	.word	0x08005179
 8005158:	08005181 	.word	0x08005181
 800515c:	08005189 	.word	0x08005189
 8005160:	0800519f 	.word	0x0800519f
 8005164:	0800518f 	.word	0x0800518f
 8005168:	0800519f 	.word	0x0800519f
 800516c:	0800519f 	.word	0x0800519f
 8005170:	0800519f 	.word	0x0800519f
 8005174:	08005197 	.word	0x08005197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005178:	f7fd fcd6 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 800517c:	6178      	str	r0, [r7, #20]
        break;
 800517e:	e013      	b.n	80051a8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fd fce8 	bl	8002b54 <HAL_RCC_GetPCLK2Freq>
 8005184:	6178      	str	r0, [r7, #20]
        break;
 8005186:	e00f      	b.n	80051a8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <UART_SetConfig+0x538>)
 800518a:	617b      	str	r3, [r7, #20]
        break;
 800518c:	e00c      	b.n	80051a8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518e:	f7fd fc5d 	bl	8002a4c <HAL_RCC_GetSysClockFreq>
 8005192:	6178      	str	r0, [r7, #20]
        break;
 8005194:	e008      	b.n	80051a8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800519a:	617b      	str	r3, [r7, #20]
        break;
 800519c:	e004      	b.n	80051a8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	76bb      	strb	r3, [r7, #26]
        break;
 80051a6:	bf00      	nop
    }

    if (pclk != 0U)
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d020      	beq.n	80051f0 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	4a19      	ldr	r2, [pc, #100]	; (8005218 <UART_SetConfig+0x534>)
 80051b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b8:	461a      	mov	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	085b      	lsrs	r3, r3, #1
 80051c6:	441a      	add	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b0f      	cmp	r3, #15
 80051d8:	d908      	bls.n	80051ec <UART_SetConfig+0x508>
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e0:	d204      	bcs.n	80051ec <UART_SetConfig+0x508>
      {
        huart->Instance->BRR = usartdiv;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	60da      	str	r2, [r3, #12]
 80051ea:	e001      	b.n	80051f0 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800520c:	7ebb      	ldrb	r3, [r7, #26]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3720      	adds	r7, #32
 8005212:	46bd      	mov	sp, r7
 8005214:	bdb0      	pop	{r4, r5, r7, pc}
 8005216:	bf00      	nop
 8005218:	08007190 	.word	0x08007190
 800521c:	00f42400 	.word	0x00f42400

08005220 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	f003 0301 	and.w	r3, r3, #1
 8005230:	2b00      	cmp	r3, #0
 8005232:	d00a      	beq.n	800524a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00a      	beq.n	800526c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00a      	beq.n	800528e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d00a      	beq.n	80052b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01a      	beq.n	8005336 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531e:	d10a      	bne.n	8005336 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	605a      	str	r2, [r3, #4]
  }
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr

08005364 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b086      	sub	sp, #24
 8005368:	af02      	add	r7, sp, #8
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005374:	f7fc fb04 	bl	8001980 <HAL_GetTick>
 8005378:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0308 	and.w	r3, r3, #8
 8005384:	2b08      	cmp	r3, #8
 8005386:	d10e      	bne.n	80053a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005388:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f82f 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d001      	beq.n	80053a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e025      	b.n	80053f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	2b04      	cmp	r3, #4
 80053b2:	d10e      	bne.n	80053d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f819 	bl	80053fa <UART_WaitOnFlagUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e00f      	b.n	80053f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2220      	movs	r2, #32
 80053de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053fa:	b580      	push	{r7, lr}
 80053fc:	b084      	sub	sp, #16
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	603b      	str	r3, [r7, #0]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800540a:	e062      	b.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005412:	d05e      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005414:	f7fc fab4 	bl	8001980 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	429a      	cmp	r2, r3
 8005422:	d302      	bcc.n	800542a <UART_WaitOnFlagUntilTimeout+0x30>
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d11d      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 0201 	bic.w	r2, r2, #1
 8005448:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e045      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d02e      	beq.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005482:	d126      	bne.n	80054d2 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681a      	ldr	r2, [r3, #0]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800549c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f022 0201 	bic.w	r2, r2, #1
 80054ac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2220      	movs	r2, #32
 80054b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e00f      	b.n	80054f2 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	4013      	ands	r3, r2
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	429a      	cmp	r2, r3
 80054e0:	bf0c      	ite	eq
 80054e2:	2301      	moveq	r3, #1
 80054e4:	2300      	movne	r3, #0
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	79fb      	ldrb	r3, [r7, #7]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d08d      	beq.n	800540c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	68ba      	ldr	r2, [r7, #8]
 800550e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	88fa      	ldrh	r2, [r7, #6]
 8005514:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	88fa      	ldrh	r2, [r7, #6]
 800551c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800552e:	d10e      	bne.n	800554e <UART_Start_Receive_IT+0x52>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d105      	bne.n	8005544 <UART_Start_Receive_IT+0x48>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800553e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005542:	e02d      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	22ff      	movs	r2, #255	; 0xff
 8005548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800554c:	e028      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <UART_Start_Receive_IT+0x76>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <UART_Start_Receive_IT+0x6c>
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	22ff      	movs	r2, #255	; 0xff
 8005562:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005566:	e01b      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	227f      	movs	r2, #127	; 0x7f
 800556c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005570:	e016      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800557a:	d10d      	bne.n	8005598 <UART_Start_Receive_IT+0x9c>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <UART_Start_Receive_IT+0x92>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	227f      	movs	r2, #127	; 0x7f
 8005588:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800558c:	e008      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	223f      	movs	r2, #63	; 0x3f
 8005592:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005596:	e003      	b.n	80055a0 <UART_Start_Receive_IT+0xa4>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2222      	movs	r2, #34	; 0x22
 80055ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f042 0201 	orr.w	r2, r2, #1
 80055be:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c8:	d12a      	bne.n	8005620 <UART_Start_Receive_IT+0x124>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d324      	bcc.n	8005620 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055de:	d107      	bne.n	80055f0 <UART_Start_Receive_IT+0xf4>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	691b      	ldr	r3, [r3, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d103      	bne.n	80055f0 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4a1f      	ldr	r2, [pc, #124]	; (8005668 <UART_Start_Receive_IT+0x16c>)
 80055ec:	671a      	str	r2, [r3, #112]	; 0x70
 80055ee:	e002      	b.n	80055f6 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4a1e      	ldr	r2, [pc, #120]	; (800566c <UART_Start_Receive_IT+0x170>)
 80055f4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800560c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	e01b      	b.n	8005658 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005628:	d107      	bne.n	800563a <UART_Start_Receive_IT+0x13e>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4a0e      	ldr	r2, [pc, #56]	; (8005670 <UART_Start_Receive_IT+0x174>)
 8005636:	671a      	str	r2, [r3, #112]	; 0x70
 8005638:	e002      	b.n	8005640 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <UART_Start_Receive_IT+0x178>)
 800563e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8005656:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	08005af1 	.word	0x08005af1
 800566c:	080058ed 	.word	0x080058ed
 8005670:	08005815 	.word	0x08005815
 8005674:	0800573d 	.word	0x0800573d

08005678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800568e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d107      	bne.n	80056bc <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 0210 	bic.w	r2, r2, #16
 80056ba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f7ff fadc 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800571e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2220      	movs	r2, #32
 8005724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fab8 	bl	8004ca4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005734:	bf00      	nop
 8005736:	3708      	adds	r7, #8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800574a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	2b22      	cmp	r3, #34	; 0x22
 8005754:	d152      	bne.n	80057fc <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800575e:	89bb      	ldrh	r3, [r7, #12]
 8005760:	b2d9      	uxtb	r1, r3
 8005762:	89fb      	ldrh	r3, [r7, #14]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800576a:	400a      	ands	r2, r1
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d139      	bne.n	800580c <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80057a6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	689a      	ldr	r2, [r3, #8]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0201 	bic.w	r2, r2, #1
 80057b6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2220      	movs	r2, #32
 80057bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d10f      	bne.n	80057ee <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 0210 	bic.w	r2, r2, #16
 80057dc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057e4:	4619      	mov	r1, r3
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7ff fa70 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
 80057ec:	e002      	b.n	80057f4 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fb fd04 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057fa:	e007      	b.n	800580c <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0208 	orr.w	r2, r2, #8
 800580a:	619a      	str	r2, [r3, #24]
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005822:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	2b22      	cmp	r3, #34	; 0x22
 800582c:	d152      	bne.n	80058d4 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800583a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800583c:	89ba      	ldrh	r2, [r7, #12]
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	4013      	ands	r3, r2
 8005842:	b29a      	uxth	r2, r3
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584c:	1c9a      	adds	r2, r3, #2
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005858:	b29b      	uxth	r3, r3
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d139      	bne.n	80058e4 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800587e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d10f      	bne.n	80058c6 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0210 	bic.w	r2, r2, #16
 80058b4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff fa04 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
 80058c4:	e002      	b.n	80058cc <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7fb fc98 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058d2:	e007      	b.n	80058e4 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f042 0208 	orr.w	r2, r2, #8
 80058e2:	619a      	str	r2, [r3, #24]
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b088      	sub	sp, #32
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058fa:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	69db      	ldr	r3, [r3, #28]
 8005902:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	2b22      	cmp	r3, #34	; 0x22
 800591c:	f040 80da 	bne.w	8005ad4 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005926:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005928:	e0aa      	b.n	8005a80 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005932:	89bb      	ldrh	r3, [r7, #12]
 8005934:	b2d9      	uxtb	r1, r3
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	b2da      	uxtb	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	400a      	ands	r2, r1
 8005940:	b2d2      	uxtb	r2, r2
 8005942:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005948:	1c5a      	adds	r2, r3, #1
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005954:	b29b      	uxth	r3, r3
 8005956:	3b01      	subs	r3, #1
 8005958:	b29a      	uxth	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f003 0307 	and.w	r3, r3, #7
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04d      	beq.n	8005a0e <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d010      	beq.n	800599e <UART_RxISR_8BIT_FIFOEN+0xb2>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00b      	beq.n	800599e <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2201      	movs	r2, #1
 800598c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005994:	f043 0201 	orr.w	r2, r3, #1
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d010      	beq.n	80059ca <UART_RxISR_8BIT_FIFOEN+0xde>
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00b      	beq.n	80059ca <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2202      	movs	r2, #2
 80059b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059c0:	f043 0204 	orr.w	r2, r3, #4
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d010      	beq.n	80059f6 <UART_RxISR_8BIT_FIFOEN+0x10a>
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2204      	movs	r2, #4
 80059e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ec:	f043 0202 	orr.w	r2, r3, #2
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d006      	beq.n	8005a0e <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff f959 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d132      	bne.n	8005a80 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a28:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d10f      	bne.n	8005a74 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0210 	bic.w	r2, r2, #16
 8005a62:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f7ff f92d 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
 8005a72:	e002      	b.n	8005a7a <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7fb fbc1 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a80:	89fb      	ldrh	r3, [r7, #14]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f003 0320 	and.w	r3, r3, #32
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f47f af4c 	bne.w	800592a <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a98:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005a9a:	897b      	ldrh	r3, [r7, #10]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d021      	beq.n	8005ae4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005aa6:	897a      	ldrh	r2, [r7, #10]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d21b      	bcs.n	8005ae4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005aba:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a0b      	ldr	r2, [pc, #44]	; (8005aec <UART_RxISR_8BIT_FIFOEN+0x200>)
 8005ac0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0220 	orr.w	r2, r2, #32
 8005ad0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ad2:	e007      	b.n	8005ae4 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	699a      	ldr	r2, [r3, #24]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f042 0208 	orr.w	r2, r2, #8
 8005ae2:	619a      	str	r2, [r3, #24]
}
 8005ae4:	bf00      	nop
 8005ae6:	3720      	adds	r7, #32
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	0800573d 	.word	0x0800573d

08005af0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b08a      	sub	sp, #40	; 0x28
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005afe:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1e:	2b22      	cmp	r3, #34	; 0x22
 8005b20:	f040 80da 	bne.w	8005cd8 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b2a:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b2c:	e0aa      	b.n	8005c84 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3a:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b3c:	8aba      	ldrh	r2, [r7, #20]
 8005b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b40:	4013      	ands	r3, r2
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	b29a      	uxth	r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	69db      	ldr	r3, [r3, #28]
 8005b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d04d      	beq.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d010      	beq.n	8005ba2 <UART_RxISR_16BIT_FIFOEN+0xb2>
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00b      	beq.n	8005ba2 <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b98:	f043 0201 	orr.w	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d010      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0xde>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc4:	f043 0204 	orr.w	r2, r3, #4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d010      	beq.n	8005bfa <UART_RxISR_16BIT_FIFOEN+0x10a>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00b      	beq.n	8005bfa <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2204      	movs	r2, #4
 8005be8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf0:	f043 0202 	orr.w	r2, r3, #2
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f7ff f857 	bl	8004cb8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d132      	bne.n	8005c84 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c2c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c3c:	f023 0301 	bic.w	r3, r3, #1
 8005c40:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10f      	bne.n	8005c78 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0210 	bic.w	r2, r2, #16
 8005c66:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff f82b 	bl	8004ccc <HAL_UARTEx_RxEventCallback>
 8005c76:	e002      	b.n	8005c7e <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7fb fabf 	bl	80011fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2200      	movs	r2, #0
 8005c82:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c84:	8afb      	ldrh	r3, [r7, #22]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d005      	beq.n	8005c96 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c8c:	f003 0320 	and.w	r3, r3, #32
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f47f af4c 	bne.w	8005b2e <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c9c:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c9e:	89fb      	ldrh	r3, [r7, #14]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d021      	beq.n	8005ce8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005caa:	89fa      	ldrh	r2, [r7, #14]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d21b      	bcs.n	8005ce8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005cbe:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <UART_RxISR_16BIT_FIFOEN+0x200>)
 8005cc4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0220 	orr.w	r2, r2, #32
 8005cd4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cd6:	e007      	b.n	8005ce8 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	699a      	ldr	r2, [r3, #24]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	619a      	str	r2, [r3, #24]
}
 8005ce8:	bf00      	nop
 8005cea:	3728      	adds	r7, #40	; 0x28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	08005815 	.word	0x08005815

08005cf4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UARTEx_DisableFifoMode+0x16>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e027      	b.n	8005d96 <HAL_UARTEx_DisableFifoMode+0x66>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2224      	movs	r2, #36	; 0x24
 8005d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0201 	bic.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005d74:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d101      	bne.n	8005dba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005db6:	2302      	movs	r3, #2
 8005db8:	e02d      	b.n	8005e16 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2224      	movs	r2, #36	; 0x24
 8005dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f022 0201 	bic.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	430a      	orrs	r2, r1
 8005df4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 f850 	bl	8005e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3710      	adds	r7, #16
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b084      	sub	sp, #16
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
 8005e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e02d      	b.n	8005e92 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2224      	movs	r2, #36	; 0x24
 8005e42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f022 0201 	bic.w	r2, r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	430a      	orrs	r2, r1
 8005e70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 f812 	bl	8005e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e90:	2300      	movs	r3, #0
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
	...

08005e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d108      	bne.n	8005ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ebc:	e031      	b.n	8005f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ebe:	2308      	movs	r3, #8
 8005ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ec2:	2308      	movs	r3, #8
 8005ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	0e5b      	lsrs	r3, r3, #25
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	0f5b      	lsrs	r3, r3, #29
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ee6:	7bbb      	ldrb	r3, [r7, #14]
 8005ee8:	7b3a      	ldrb	r2, [r7, #12]
 8005eea:	4911      	ldr	r1, [pc, #68]	; (8005f30 <UARTEx_SetNbDataToProcess+0x94>)
 8005eec:	5c8a      	ldrb	r2, [r1, r2]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ef2:	7b3a      	ldrb	r2, [r7, #12]
 8005ef4:	490f      	ldr	r1, [pc, #60]	; (8005f34 <UARTEx_SetNbDataToProcess+0x98>)
 8005ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	7b7a      	ldrb	r2, [r7, #13]
 8005f08:	4909      	ldr	r1, [pc, #36]	; (8005f30 <UARTEx_SetNbDataToProcess+0x94>)
 8005f0a:	5c8a      	ldrb	r2, [r1, r2]
 8005f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005f10:	7b7a      	ldrb	r2, [r7, #13]
 8005f12:	4908      	ldr	r1, [pc, #32]	; (8005f34 <UARTEx_SetNbDataToProcess+0x98>)
 8005f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop
 8005f30:	080071a8 	.word	0x080071a8
 8005f34:	080071b0 	.word	0x080071b0

08005f38 <atoi>:
 8005f38:	220a      	movs	r2, #10
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	f000 b944 	b.w	80061c8 <strtol>

08005f40 <__errno>:
 8005f40:	4b01      	ldr	r3, [pc, #4]	; (8005f48 <__errno+0x8>)
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	2000000c 	.word	0x2000000c

08005f4c <__libc_init_array>:
 8005f4c:	b570      	push	{r4, r5, r6, lr}
 8005f4e:	4d0d      	ldr	r5, [pc, #52]	; (8005f84 <__libc_init_array+0x38>)
 8005f50:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <__libc_init_array+0x3c>)
 8005f52:	1b64      	subs	r4, r4, r5
 8005f54:	10a4      	asrs	r4, r4, #2
 8005f56:	2600      	movs	r6, #0
 8005f58:	42a6      	cmp	r6, r4
 8005f5a:	d109      	bne.n	8005f70 <__libc_init_array+0x24>
 8005f5c:	4d0b      	ldr	r5, [pc, #44]	; (8005f8c <__libc_init_array+0x40>)
 8005f5e:	4c0c      	ldr	r4, [pc, #48]	; (8005f90 <__libc_init_array+0x44>)
 8005f60:	f001 f87a 	bl	8007058 <_init>
 8005f64:	1b64      	subs	r4, r4, r5
 8005f66:	10a4      	asrs	r4, r4, #2
 8005f68:	2600      	movs	r6, #0
 8005f6a:	42a6      	cmp	r6, r4
 8005f6c:	d105      	bne.n	8005f7a <__libc_init_array+0x2e>
 8005f6e:	bd70      	pop	{r4, r5, r6, pc}
 8005f70:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f74:	4798      	blx	r3
 8005f76:	3601      	adds	r6, #1
 8005f78:	e7ee      	b.n	8005f58 <__libc_init_array+0xc>
 8005f7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7e:	4798      	blx	r3
 8005f80:	3601      	adds	r6, #1
 8005f82:	e7f2      	b.n	8005f6a <__libc_init_array+0x1e>
 8005f84:	0800735c 	.word	0x0800735c
 8005f88:	0800735c 	.word	0x0800735c
 8005f8c:	0800735c 	.word	0x0800735c
 8005f90:	08007360 	.word	0x08007360

08005f94 <memset>:
 8005f94:	4402      	add	r2, r0
 8005f96:	4603      	mov	r3, r0
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d100      	bne.n	8005f9e <memset+0xa>
 8005f9c:	4770      	bx	lr
 8005f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8005fa2:	e7f9      	b.n	8005f98 <memset+0x4>

08005fa4 <iprintf>:
 8005fa4:	b40f      	push	{r0, r1, r2, r3}
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <iprintf+0x2c>)
 8005fa8:	b513      	push	{r0, r1, r4, lr}
 8005faa:	681c      	ldr	r4, [r3, #0]
 8005fac:	b124      	cbz	r4, 8005fb8 <iprintf+0x14>
 8005fae:	69a3      	ldr	r3, [r4, #24]
 8005fb0:	b913      	cbnz	r3, 8005fb8 <iprintf+0x14>
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f000 faec 	bl	8006590 <__sinit>
 8005fb8:	ab05      	add	r3, sp, #20
 8005fba:	9a04      	ldr	r2, [sp, #16]
 8005fbc:	68a1      	ldr	r1, [r4, #8]
 8005fbe:	9301      	str	r3, [sp, #4]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f000 fcbd 	bl	8006940 <_vfiprintf_r>
 8005fc6:	b002      	add	sp, #8
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fcc:	b004      	add	sp, #16
 8005fce:	4770      	bx	lr
 8005fd0:	2000000c 	.word	0x2000000c

08005fd4 <_puts_r>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	460e      	mov	r6, r1
 8005fd8:	4605      	mov	r5, r0
 8005fda:	b118      	cbz	r0, 8005fe4 <_puts_r+0x10>
 8005fdc:	6983      	ldr	r3, [r0, #24]
 8005fde:	b90b      	cbnz	r3, 8005fe4 <_puts_r+0x10>
 8005fe0:	f000 fad6 	bl	8006590 <__sinit>
 8005fe4:	69ab      	ldr	r3, [r5, #24]
 8005fe6:	68ac      	ldr	r4, [r5, #8]
 8005fe8:	b913      	cbnz	r3, 8005ff0 <_puts_r+0x1c>
 8005fea:	4628      	mov	r0, r5
 8005fec:	f000 fad0 	bl	8006590 <__sinit>
 8005ff0:	4b2c      	ldr	r3, [pc, #176]	; (80060a4 <_puts_r+0xd0>)
 8005ff2:	429c      	cmp	r4, r3
 8005ff4:	d120      	bne.n	8006038 <_puts_r+0x64>
 8005ff6:	686c      	ldr	r4, [r5, #4]
 8005ff8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ffa:	07db      	lsls	r3, r3, #31
 8005ffc:	d405      	bmi.n	800600a <_puts_r+0x36>
 8005ffe:	89a3      	ldrh	r3, [r4, #12]
 8006000:	0598      	lsls	r0, r3, #22
 8006002:	d402      	bmi.n	800600a <_puts_r+0x36>
 8006004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006006:	f000 fb61 	bl	80066cc <__retarget_lock_acquire_recursive>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	0719      	lsls	r1, r3, #28
 800600e:	d51d      	bpl.n	800604c <_puts_r+0x78>
 8006010:	6923      	ldr	r3, [r4, #16]
 8006012:	b1db      	cbz	r3, 800604c <_puts_r+0x78>
 8006014:	3e01      	subs	r6, #1
 8006016:	68a3      	ldr	r3, [r4, #8]
 8006018:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800601c:	3b01      	subs	r3, #1
 800601e:	60a3      	str	r3, [r4, #8]
 8006020:	bb39      	cbnz	r1, 8006072 <_puts_r+0x9e>
 8006022:	2b00      	cmp	r3, #0
 8006024:	da38      	bge.n	8006098 <_puts_r+0xc4>
 8006026:	4622      	mov	r2, r4
 8006028:	210a      	movs	r1, #10
 800602a:	4628      	mov	r0, r5
 800602c:	f000 f8d6 	bl	80061dc <__swbuf_r>
 8006030:	3001      	adds	r0, #1
 8006032:	d011      	beq.n	8006058 <_puts_r+0x84>
 8006034:	250a      	movs	r5, #10
 8006036:	e011      	b.n	800605c <_puts_r+0x88>
 8006038:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <_puts_r+0xd4>)
 800603a:	429c      	cmp	r4, r3
 800603c:	d101      	bne.n	8006042 <_puts_r+0x6e>
 800603e:	68ac      	ldr	r4, [r5, #8]
 8006040:	e7da      	b.n	8005ff8 <_puts_r+0x24>
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <_puts_r+0xd8>)
 8006044:	429c      	cmp	r4, r3
 8006046:	bf08      	it	eq
 8006048:	68ec      	ldreq	r4, [r5, #12]
 800604a:	e7d5      	b.n	8005ff8 <_puts_r+0x24>
 800604c:	4621      	mov	r1, r4
 800604e:	4628      	mov	r0, r5
 8006050:	f000 f916 	bl	8006280 <__swsetup_r>
 8006054:	2800      	cmp	r0, #0
 8006056:	d0dd      	beq.n	8006014 <_puts_r+0x40>
 8006058:	f04f 35ff 	mov.w	r5, #4294967295
 800605c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800605e:	07da      	lsls	r2, r3, #31
 8006060:	d405      	bmi.n	800606e <_puts_r+0x9a>
 8006062:	89a3      	ldrh	r3, [r4, #12]
 8006064:	059b      	lsls	r3, r3, #22
 8006066:	d402      	bmi.n	800606e <_puts_r+0x9a>
 8006068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606a:	f000 fb30 	bl	80066ce <__retarget_lock_release_recursive>
 800606e:	4628      	mov	r0, r5
 8006070:	bd70      	pop	{r4, r5, r6, pc}
 8006072:	2b00      	cmp	r3, #0
 8006074:	da04      	bge.n	8006080 <_puts_r+0xac>
 8006076:	69a2      	ldr	r2, [r4, #24]
 8006078:	429a      	cmp	r2, r3
 800607a:	dc06      	bgt.n	800608a <_puts_r+0xb6>
 800607c:	290a      	cmp	r1, #10
 800607e:	d004      	beq.n	800608a <_puts_r+0xb6>
 8006080:	6823      	ldr	r3, [r4, #0]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	6022      	str	r2, [r4, #0]
 8006086:	7019      	strb	r1, [r3, #0]
 8006088:	e7c5      	b.n	8006016 <_puts_r+0x42>
 800608a:	4622      	mov	r2, r4
 800608c:	4628      	mov	r0, r5
 800608e:	f000 f8a5 	bl	80061dc <__swbuf_r>
 8006092:	3001      	adds	r0, #1
 8006094:	d1bf      	bne.n	8006016 <_puts_r+0x42>
 8006096:	e7df      	b.n	8006058 <_puts_r+0x84>
 8006098:	6823      	ldr	r3, [r4, #0]
 800609a:	250a      	movs	r5, #10
 800609c:	1c5a      	adds	r2, r3, #1
 800609e:	6022      	str	r2, [r4, #0]
 80060a0:	701d      	strb	r5, [r3, #0]
 80060a2:	e7db      	b.n	800605c <_puts_r+0x88>
 80060a4:	080072e0 	.word	0x080072e0
 80060a8:	08007300 	.word	0x08007300
 80060ac:	080072c0 	.word	0x080072c0

080060b0 <puts>:
 80060b0:	4b02      	ldr	r3, [pc, #8]	; (80060bc <puts+0xc>)
 80060b2:	4601      	mov	r1, r0
 80060b4:	6818      	ldr	r0, [r3, #0]
 80060b6:	f7ff bf8d 	b.w	8005fd4 <_puts_r>
 80060ba:	bf00      	nop
 80060bc:	2000000c 	.word	0x2000000c

080060c0 <_strtol_l.isra.0>:
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060c6:	d001      	beq.n	80060cc <_strtol_l.isra.0+0xc>
 80060c8:	2b24      	cmp	r3, #36	; 0x24
 80060ca:	d906      	bls.n	80060da <_strtol_l.isra.0+0x1a>
 80060cc:	f7ff ff38 	bl	8005f40 <__errno>
 80060d0:	2316      	movs	r3, #22
 80060d2:	6003      	str	r3, [r0, #0]
 80060d4:	2000      	movs	r0, #0
 80060d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060da:	4f3a      	ldr	r7, [pc, #232]	; (80061c4 <_strtol_l.isra.0+0x104>)
 80060dc:	468e      	mov	lr, r1
 80060de:	4676      	mov	r6, lr
 80060e0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80060e4:	5de5      	ldrb	r5, [r4, r7]
 80060e6:	f015 0508 	ands.w	r5, r5, #8
 80060ea:	d1f8      	bne.n	80060de <_strtol_l.isra.0+0x1e>
 80060ec:	2c2d      	cmp	r4, #45	; 0x2d
 80060ee:	d134      	bne.n	800615a <_strtol_l.isra.0+0x9a>
 80060f0:	f89e 4000 	ldrb.w	r4, [lr]
 80060f4:	f04f 0801 	mov.w	r8, #1
 80060f8:	f106 0e02 	add.w	lr, r6, #2
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d05c      	beq.n	80061ba <_strtol_l.isra.0+0xfa>
 8006100:	2b10      	cmp	r3, #16
 8006102:	d10c      	bne.n	800611e <_strtol_l.isra.0+0x5e>
 8006104:	2c30      	cmp	r4, #48	; 0x30
 8006106:	d10a      	bne.n	800611e <_strtol_l.isra.0+0x5e>
 8006108:	f89e 4000 	ldrb.w	r4, [lr]
 800610c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006110:	2c58      	cmp	r4, #88	; 0x58
 8006112:	d14d      	bne.n	80061b0 <_strtol_l.isra.0+0xf0>
 8006114:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006118:	2310      	movs	r3, #16
 800611a:	f10e 0e02 	add.w	lr, lr, #2
 800611e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006122:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006126:	2600      	movs	r6, #0
 8006128:	fbbc f9f3 	udiv	r9, ip, r3
 800612c:	4635      	mov	r5, r6
 800612e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006132:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006136:	2f09      	cmp	r7, #9
 8006138:	d818      	bhi.n	800616c <_strtol_l.isra.0+0xac>
 800613a:	463c      	mov	r4, r7
 800613c:	42a3      	cmp	r3, r4
 800613e:	dd24      	ble.n	800618a <_strtol_l.isra.0+0xca>
 8006140:	2e00      	cmp	r6, #0
 8006142:	db1f      	blt.n	8006184 <_strtol_l.isra.0+0xc4>
 8006144:	45a9      	cmp	r9, r5
 8006146:	d31d      	bcc.n	8006184 <_strtol_l.isra.0+0xc4>
 8006148:	d101      	bne.n	800614e <_strtol_l.isra.0+0x8e>
 800614a:	45a2      	cmp	sl, r4
 800614c:	db1a      	blt.n	8006184 <_strtol_l.isra.0+0xc4>
 800614e:	fb05 4503 	mla	r5, r5, r3, r4
 8006152:	2601      	movs	r6, #1
 8006154:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006158:	e7eb      	b.n	8006132 <_strtol_l.isra.0+0x72>
 800615a:	2c2b      	cmp	r4, #43	; 0x2b
 800615c:	bf08      	it	eq
 800615e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006162:	46a8      	mov	r8, r5
 8006164:	bf08      	it	eq
 8006166:	f106 0e02 	addeq.w	lr, r6, #2
 800616a:	e7c7      	b.n	80060fc <_strtol_l.isra.0+0x3c>
 800616c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006170:	2f19      	cmp	r7, #25
 8006172:	d801      	bhi.n	8006178 <_strtol_l.isra.0+0xb8>
 8006174:	3c37      	subs	r4, #55	; 0x37
 8006176:	e7e1      	b.n	800613c <_strtol_l.isra.0+0x7c>
 8006178:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800617c:	2f19      	cmp	r7, #25
 800617e:	d804      	bhi.n	800618a <_strtol_l.isra.0+0xca>
 8006180:	3c57      	subs	r4, #87	; 0x57
 8006182:	e7db      	b.n	800613c <_strtol_l.isra.0+0x7c>
 8006184:	f04f 36ff 	mov.w	r6, #4294967295
 8006188:	e7e4      	b.n	8006154 <_strtol_l.isra.0+0x94>
 800618a:	2e00      	cmp	r6, #0
 800618c:	da05      	bge.n	800619a <_strtol_l.isra.0+0xda>
 800618e:	2322      	movs	r3, #34	; 0x22
 8006190:	6003      	str	r3, [r0, #0]
 8006192:	4665      	mov	r5, ip
 8006194:	b942      	cbnz	r2, 80061a8 <_strtol_l.isra.0+0xe8>
 8006196:	4628      	mov	r0, r5
 8006198:	e79d      	b.n	80060d6 <_strtol_l.isra.0+0x16>
 800619a:	f1b8 0f00 	cmp.w	r8, #0
 800619e:	d000      	beq.n	80061a2 <_strtol_l.isra.0+0xe2>
 80061a0:	426d      	negs	r5, r5
 80061a2:	2a00      	cmp	r2, #0
 80061a4:	d0f7      	beq.n	8006196 <_strtol_l.isra.0+0xd6>
 80061a6:	b10e      	cbz	r6, 80061ac <_strtol_l.isra.0+0xec>
 80061a8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	e7f2      	b.n	8006196 <_strtol_l.isra.0+0xd6>
 80061b0:	2430      	movs	r4, #48	; 0x30
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d1b3      	bne.n	800611e <_strtol_l.isra.0+0x5e>
 80061b6:	2308      	movs	r3, #8
 80061b8:	e7b1      	b.n	800611e <_strtol_l.isra.0+0x5e>
 80061ba:	2c30      	cmp	r4, #48	; 0x30
 80061bc:	d0a4      	beq.n	8006108 <_strtol_l.isra.0+0x48>
 80061be:	230a      	movs	r3, #10
 80061c0:	e7ad      	b.n	800611e <_strtol_l.isra.0+0x5e>
 80061c2:	bf00      	nop
 80061c4:	080071bd 	.word	0x080071bd

080061c8 <strtol>:
 80061c8:	4613      	mov	r3, r2
 80061ca:	460a      	mov	r2, r1
 80061cc:	4601      	mov	r1, r0
 80061ce:	4802      	ldr	r0, [pc, #8]	; (80061d8 <strtol+0x10>)
 80061d0:	6800      	ldr	r0, [r0, #0]
 80061d2:	f7ff bf75 	b.w	80060c0 <_strtol_l.isra.0>
 80061d6:	bf00      	nop
 80061d8:	2000000c 	.word	0x2000000c

080061dc <__swbuf_r>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	460e      	mov	r6, r1
 80061e0:	4614      	mov	r4, r2
 80061e2:	4605      	mov	r5, r0
 80061e4:	b118      	cbz	r0, 80061ee <__swbuf_r+0x12>
 80061e6:	6983      	ldr	r3, [r0, #24]
 80061e8:	b90b      	cbnz	r3, 80061ee <__swbuf_r+0x12>
 80061ea:	f000 f9d1 	bl	8006590 <__sinit>
 80061ee:	4b21      	ldr	r3, [pc, #132]	; (8006274 <__swbuf_r+0x98>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	d12b      	bne.n	800624c <__swbuf_r+0x70>
 80061f4:	686c      	ldr	r4, [r5, #4]
 80061f6:	69a3      	ldr	r3, [r4, #24]
 80061f8:	60a3      	str	r3, [r4, #8]
 80061fa:	89a3      	ldrh	r3, [r4, #12]
 80061fc:	071a      	lsls	r2, r3, #28
 80061fe:	d52f      	bpl.n	8006260 <__swbuf_r+0x84>
 8006200:	6923      	ldr	r3, [r4, #16]
 8006202:	b36b      	cbz	r3, 8006260 <__swbuf_r+0x84>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	6820      	ldr	r0, [r4, #0]
 8006208:	1ac0      	subs	r0, r0, r3
 800620a:	6963      	ldr	r3, [r4, #20]
 800620c:	b2f6      	uxtb	r6, r6
 800620e:	4283      	cmp	r3, r0
 8006210:	4637      	mov	r7, r6
 8006212:	dc04      	bgt.n	800621e <__swbuf_r+0x42>
 8006214:	4621      	mov	r1, r4
 8006216:	4628      	mov	r0, r5
 8006218:	f000 f926 	bl	8006468 <_fflush_r>
 800621c:	bb30      	cbnz	r0, 800626c <__swbuf_r+0x90>
 800621e:	68a3      	ldr	r3, [r4, #8]
 8006220:	3b01      	subs	r3, #1
 8006222:	60a3      	str	r3, [r4, #8]
 8006224:	6823      	ldr	r3, [r4, #0]
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	701e      	strb	r6, [r3, #0]
 800622c:	6963      	ldr	r3, [r4, #20]
 800622e:	3001      	adds	r0, #1
 8006230:	4283      	cmp	r3, r0
 8006232:	d004      	beq.n	800623e <__swbuf_r+0x62>
 8006234:	89a3      	ldrh	r3, [r4, #12]
 8006236:	07db      	lsls	r3, r3, #31
 8006238:	d506      	bpl.n	8006248 <__swbuf_r+0x6c>
 800623a:	2e0a      	cmp	r6, #10
 800623c:	d104      	bne.n	8006248 <__swbuf_r+0x6c>
 800623e:	4621      	mov	r1, r4
 8006240:	4628      	mov	r0, r5
 8006242:	f000 f911 	bl	8006468 <_fflush_r>
 8006246:	b988      	cbnz	r0, 800626c <__swbuf_r+0x90>
 8006248:	4638      	mov	r0, r7
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624c:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <__swbuf_r+0x9c>)
 800624e:	429c      	cmp	r4, r3
 8006250:	d101      	bne.n	8006256 <__swbuf_r+0x7a>
 8006252:	68ac      	ldr	r4, [r5, #8]
 8006254:	e7cf      	b.n	80061f6 <__swbuf_r+0x1a>
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <__swbuf_r+0xa0>)
 8006258:	429c      	cmp	r4, r3
 800625a:	bf08      	it	eq
 800625c:	68ec      	ldreq	r4, [r5, #12]
 800625e:	e7ca      	b.n	80061f6 <__swbuf_r+0x1a>
 8006260:	4621      	mov	r1, r4
 8006262:	4628      	mov	r0, r5
 8006264:	f000 f80c 	bl	8006280 <__swsetup_r>
 8006268:	2800      	cmp	r0, #0
 800626a:	d0cb      	beq.n	8006204 <__swbuf_r+0x28>
 800626c:	f04f 37ff 	mov.w	r7, #4294967295
 8006270:	e7ea      	b.n	8006248 <__swbuf_r+0x6c>
 8006272:	bf00      	nop
 8006274:	080072e0 	.word	0x080072e0
 8006278:	08007300 	.word	0x08007300
 800627c:	080072c0 	.word	0x080072c0

08006280 <__swsetup_r>:
 8006280:	4b32      	ldr	r3, [pc, #200]	; (800634c <__swsetup_r+0xcc>)
 8006282:	b570      	push	{r4, r5, r6, lr}
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	4606      	mov	r6, r0
 8006288:	460c      	mov	r4, r1
 800628a:	b125      	cbz	r5, 8006296 <__swsetup_r+0x16>
 800628c:	69ab      	ldr	r3, [r5, #24]
 800628e:	b913      	cbnz	r3, 8006296 <__swsetup_r+0x16>
 8006290:	4628      	mov	r0, r5
 8006292:	f000 f97d 	bl	8006590 <__sinit>
 8006296:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <__swsetup_r+0xd0>)
 8006298:	429c      	cmp	r4, r3
 800629a:	d10f      	bne.n	80062bc <__swsetup_r+0x3c>
 800629c:	686c      	ldr	r4, [r5, #4]
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80062a4:	0719      	lsls	r1, r3, #28
 80062a6:	d42c      	bmi.n	8006302 <__swsetup_r+0x82>
 80062a8:	06dd      	lsls	r5, r3, #27
 80062aa:	d411      	bmi.n	80062d0 <__swsetup_r+0x50>
 80062ac:	2309      	movs	r3, #9
 80062ae:	6033      	str	r3, [r6, #0]
 80062b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80062b4:	81a3      	strh	r3, [r4, #12]
 80062b6:	f04f 30ff 	mov.w	r0, #4294967295
 80062ba:	e03e      	b.n	800633a <__swsetup_r+0xba>
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <__swsetup_r+0xd4>)
 80062be:	429c      	cmp	r4, r3
 80062c0:	d101      	bne.n	80062c6 <__swsetup_r+0x46>
 80062c2:	68ac      	ldr	r4, [r5, #8]
 80062c4:	e7eb      	b.n	800629e <__swsetup_r+0x1e>
 80062c6:	4b24      	ldr	r3, [pc, #144]	; (8006358 <__swsetup_r+0xd8>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	bf08      	it	eq
 80062cc:	68ec      	ldreq	r4, [r5, #12]
 80062ce:	e7e6      	b.n	800629e <__swsetup_r+0x1e>
 80062d0:	0758      	lsls	r0, r3, #29
 80062d2:	d512      	bpl.n	80062fa <__swsetup_r+0x7a>
 80062d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062d6:	b141      	cbz	r1, 80062ea <__swsetup_r+0x6a>
 80062d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062dc:	4299      	cmp	r1, r3
 80062de:	d002      	beq.n	80062e6 <__swsetup_r+0x66>
 80062e0:	4630      	mov	r0, r6
 80062e2:	f000 fa59 	bl	8006798 <_free_r>
 80062e6:	2300      	movs	r3, #0
 80062e8:	6363      	str	r3, [r4, #52]	; 0x34
 80062ea:	89a3      	ldrh	r3, [r4, #12]
 80062ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80062f0:	81a3      	strh	r3, [r4, #12]
 80062f2:	2300      	movs	r3, #0
 80062f4:	6063      	str	r3, [r4, #4]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f043 0308 	orr.w	r3, r3, #8
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	b94b      	cbnz	r3, 800631a <__swsetup_r+0x9a>
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800630c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006310:	d003      	beq.n	800631a <__swsetup_r+0x9a>
 8006312:	4621      	mov	r1, r4
 8006314:	4630      	mov	r0, r6
 8006316:	f000 f9ff 	bl	8006718 <__smakebuf_r>
 800631a:	89a0      	ldrh	r0, [r4, #12]
 800631c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006320:	f010 0301 	ands.w	r3, r0, #1
 8006324:	d00a      	beq.n	800633c <__swsetup_r+0xbc>
 8006326:	2300      	movs	r3, #0
 8006328:	60a3      	str	r3, [r4, #8]
 800632a:	6963      	ldr	r3, [r4, #20]
 800632c:	425b      	negs	r3, r3
 800632e:	61a3      	str	r3, [r4, #24]
 8006330:	6923      	ldr	r3, [r4, #16]
 8006332:	b943      	cbnz	r3, 8006346 <__swsetup_r+0xc6>
 8006334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006338:	d1ba      	bne.n	80062b0 <__swsetup_r+0x30>
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	0781      	lsls	r1, r0, #30
 800633e:	bf58      	it	pl
 8006340:	6963      	ldrpl	r3, [r4, #20]
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	e7f4      	b.n	8006330 <__swsetup_r+0xb0>
 8006346:	2000      	movs	r0, #0
 8006348:	e7f7      	b.n	800633a <__swsetup_r+0xba>
 800634a:	bf00      	nop
 800634c:	2000000c 	.word	0x2000000c
 8006350:	080072e0 	.word	0x080072e0
 8006354:	08007300 	.word	0x08007300
 8006358:	080072c0 	.word	0x080072c0

0800635c <__sflush_r>:
 800635c:	898a      	ldrh	r2, [r1, #12]
 800635e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006362:	4605      	mov	r5, r0
 8006364:	0710      	lsls	r0, r2, #28
 8006366:	460c      	mov	r4, r1
 8006368:	d458      	bmi.n	800641c <__sflush_r+0xc0>
 800636a:	684b      	ldr	r3, [r1, #4]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dc05      	bgt.n	800637c <__sflush_r+0x20>
 8006370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006372:	2b00      	cmp	r3, #0
 8006374:	dc02      	bgt.n	800637c <__sflush_r+0x20>
 8006376:	2000      	movs	r0, #0
 8006378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800637c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800637e:	2e00      	cmp	r6, #0
 8006380:	d0f9      	beq.n	8006376 <__sflush_r+0x1a>
 8006382:	2300      	movs	r3, #0
 8006384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006388:	682f      	ldr	r7, [r5, #0]
 800638a:	602b      	str	r3, [r5, #0]
 800638c:	d032      	beq.n	80063f4 <__sflush_r+0x98>
 800638e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006390:	89a3      	ldrh	r3, [r4, #12]
 8006392:	075a      	lsls	r2, r3, #29
 8006394:	d505      	bpl.n	80063a2 <__sflush_r+0x46>
 8006396:	6863      	ldr	r3, [r4, #4]
 8006398:	1ac0      	subs	r0, r0, r3
 800639a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800639c:	b10b      	cbz	r3, 80063a2 <__sflush_r+0x46>
 800639e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80063a0:	1ac0      	subs	r0, r0, r3
 80063a2:	2300      	movs	r3, #0
 80063a4:	4602      	mov	r2, r0
 80063a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80063a8:	6a21      	ldr	r1, [r4, #32]
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b0      	blx	r6
 80063ae:	1c43      	adds	r3, r0, #1
 80063b0:	89a3      	ldrh	r3, [r4, #12]
 80063b2:	d106      	bne.n	80063c2 <__sflush_r+0x66>
 80063b4:	6829      	ldr	r1, [r5, #0]
 80063b6:	291d      	cmp	r1, #29
 80063b8:	d82c      	bhi.n	8006414 <__sflush_r+0xb8>
 80063ba:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <__sflush_r+0x108>)
 80063bc:	40ca      	lsrs	r2, r1
 80063be:	07d6      	lsls	r6, r2, #31
 80063c0:	d528      	bpl.n	8006414 <__sflush_r+0xb8>
 80063c2:	2200      	movs	r2, #0
 80063c4:	6062      	str	r2, [r4, #4]
 80063c6:	04d9      	lsls	r1, r3, #19
 80063c8:	6922      	ldr	r2, [r4, #16]
 80063ca:	6022      	str	r2, [r4, #0]
 80063cc:	d504      	bpl.n	80063d8 <__sflush_r+0x7c>
 80063ce:	1c42      	adds	r2, r0, #1
 80063d0:	d101      	bne.n	80063d6 <__sflush_r+0x7a>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b903      	cbnz	r3, 80063d8 <__sflush_r+0x7c>
 80063d6:	6560      	str	r0, [r4, #84]	; 0x54
 80063d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063da:	602f      	str	r7, [r5, #0]
 80063dc:	2900      	cmp	r1, #0
 80063de:	d0ca      	beq.n	8006376 <__sflush_r+0x1a>
 80063e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063e4:	4299      	cmp	r1, r3
 80063e6:	d002      	beq.n	80063ee <__sflush_r+0x92>
 80063e8:	4628      	mov	r0, r5
 80063ea:	f000 f9d5 	bl	8006798 <_free_r>
 80063ee:	2000      	movs	r0, #0
 80063f0:	6360      	str	r0, [r4, #52]	; 0x34
 80063f2:	e7c1      	b.n	8006378 <__sflush_r+0x1c>
 80063f4:	6a21      	ldr	r1, [r4, #32]
 80063f6:	2301      	movs	r3, #1
 80063f8:	4628      	mov	r0, r5
 80063fa:	47b0      	blx	r6
 80063fc:	1c41      	adds	r1, r0, #1
 80063fe:	d1c7      	bne.n	8006390 <__sflush_r+0x34>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0c4      	beq.n	8006390 <__sflush_r+0x34>
 8006406:	2b1d      	cmp	r3, #29
 8006408:	d001      	beq.n	800640e <__sflush_r+0xb2>
 800640a:	2b16      	cmp	r3, #22
 800640c:	d101      	bne.n	8006412 <__sflush_r+0xb6>
 800640e:	602f      	str	r7, [r5, #0]
 8006410:	e7b1      	b.n	8006376 <__sflush_r+0x1a>
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006418:	81a3      	strh	r3, [r4, #12]
 800641a:	e7ad      	b.n	8006378 <__sflush_r+0x1c>
 800641c:	690f      	ldr	r7, [r1, #16]
 800641e:	2f00      	cmp	r7, #0
 8006420:	d0a9      	beq.n	8006376 <__sflush_r+0x1a>
 8006422:	0793      	lsls	r3, r2, #30
 8006424:	680e      	ldr	r6, [r1, #0]
 8006426:	bf08      	it	eq
 8006428:	694b      	ldreq	r3, [r1, #20]
 800642a:	600f      	str	r7, [r1, #0]
 800642c:	bf18      	it	ne
 800642e:	2300      	movne	r3, #0
 8006430:	eba6 0807 	sub.w	r8, r6, r7
 8006434:	608b      	str	r3, [r1, #8]
 8006436:	f1b8 0f00 	cmp.w	r8, #0
 800643a:	dd9c      	ble.n	8006376 <__sflush_r+0x1a>
 800643c:	6a21      	ldr	r1, [r4, #32]
 800643e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006440:	4643      	mov	r3, r8
 8006442:	463a      	mov	r2, r7
 8006444:	4628      	mov	r0, r5
 8006446:	47b0      	blx	r6
 8006448:	2800      	cmp	r0, #0
 800644a:	dc06      	bgt.n	800645a <__sflush_r+0xfe>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006452:	81a3      	strh	r3, [r4, #12]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295
 8006458:	e78e      	b.n	8006378 <__sflush_r+0x1c>
 800645a:	4407      	add	r7, r0
 800645c:	eba8 0800 	sub.w	r8, r8, r0
 8006460:	e7e9      	b.n	8006436 <__sflush_r+0xda>
 8006462:	bf00      	nop
 8006464:	20400001 	.word	0x20400001

08006468 <_fflush_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	690b      	ldr	r3, [r1, #16]
 800646c:	4605      	mov	r5, r0
 800646e:	460c      	mov	r4, r1
 8006470:	b913      	cbnz	r3, 8006478 <_fflush_r+0x10>
 8006472:	2500      	movs	r5, #0
 8006474:	4628      	mov	r0, r5
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	b118      	cbz	r0, 8006482 <_fflush_r+0x1a>
 800647a:	6983      	ldr	r3, [r0, #24]
 800647c:	b90b      	cbnz	r3, 8006482 <_fflush_r+0x1a>
 800647e:	f000 f887 	bl	8006590 <__sinit>
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <_fflush_r+0x6c>)
 8006484:	429c      	cmp	r4, r3
 8006486:	d11b      	bne.n	80064c0 <_fflush_r+0x58>
 8006488:	686c      	ldr	r4, [r5, #4]
 800648a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0ef      	beq.n	8006472 <_fflush_r+0xa>
 8006492:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006494:	07d0      	lsls	r0, r2, #31
 8006496:	d404      	bmi.n	80064a2 <_fflush_r+0x3a>
 8006498:	0599      	lsls	r1, r3, #22
 800649a:	d402      	bmi.n	80064a2 <_fflush_r+0x3a>
 800649c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800649e:	f000 f915 	bl	80066cc <__retarget_lock_acquire_recursive>
 80064a2:	4628      	mov	r0, r5
 80064a4:	4621      	mov	r1, r4
 80064a6:	f7ff ff59 	bl	800635c <__sflush_r>
 80064aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80064ac:	07da      	lsls	r2, r3, #31
 80064ae:	4605      	mov	r5, r0
 80064b0:	d4e0      	bmi.n	8006474 <_fflush_r+0xc>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	059b      	lsls	r3, r3, #22
 80064b6:	d4dd      	bmi.n	8006474 <_fflush_r+0xc>
 80064b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80064ba:	f000 f908 	bl	80066ce <__retarget_lock_release_recursive>
 80064be:	e7d9      	b.n	8006474 <_fflush_r+0xc>
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <_fflush_r+0x70>)
 80064c2:	429c      	cmp	r4, r3
 80064c4:	d101      	bne.n	80064ca <_fflush_r+0x62>
 80064c6:	68ac      	ldr	r4, [r5, #8]
 80064c8:	e7df      	b.n	800648a <_fflush_r+0x22>
 80064ca:	4b04      	ldr	r3, [pc, #16]	; (80064dc <_fflush_r+0x74>)
 80064cc:	429c      	cmp	r4, r3
 80064ce:	bf08      	it	eq
 80064d0:	68ec      	ldreq	r4, [r5, #12]
 80064d2:	e7da      	b.n	800648a <_fflush_r+0x22>
 80064d4:	080072e0 	.word	0x080072e0
 80064d8:	08007300 	.word	0x08007300
 80064dc:	080072c0 	.word	0x080072c0

080064e0 <std>:
 80064e0:	2300      	movs	r3, #0
 80064e2:	b510      	push	{r4, lr}
 80064e4:	4604      	mov	r4, r0
 80064e6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ee:	6083      	str	r3, [r0, #8]
 80064f0:	8181      	strh	r1, [r0, #12]
 80064f2:	6643      	str	r3, [r0, #100]	; 0x64
 80064f4:	81c2      	strh	r2, [r0, #14]
 80064f6:	6183      	str	r3, [r0, #24]
 80064f8:	4619      	mov	r1, r3
 80064fa:	2208      	movs	r2, #8
 80064fc:	305c      	adds	r0, #92	; 0x5c
 80064fe:	f7ff fd49 	bl	8005f94 <memset>
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <std+0x38>)
 8006504:	6263      	str	r3, [r4, #36]	; 0x24
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <std+0x3c>)
 8006508:	62a3      	str	r3, [r4, #40]	; 0x28
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <std+0x40>)
 800650c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <std+0x44>)
 8006510:	6224      	str	r4, [r4, #32]
 8006512:	6323      	str	r3, [r4, #48]	; 0x30
 8006514:	bd10      	pop	{r4, pc}
 8006516:	bf00      	nop
 8006518:	08006ee9 	.word	0x08006ee9
 800651c:	08006f0b 	.word	0x08006f0b
 8006520:	08006f43 	.word	0x08006f43
 8006524:	08006f67 	.word	0x08006f67

08006528 <_cleanup_r>:
 8006528:	4901      	ldr	r1, [pc, #4]	; (8006530 <_cleanup_r+0x8>)
 800652a:	f000 b8af 	b.w	800668c <_fwalk_reent>
 800652e:	bf00      	nop
 8006530:	08006469 	.word	0x08006469

08006534 <__sfmoreglue>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	1e4a      	subs	r2, r1, #1
 8006538:	2568      	movs	r5, #104	; 0x68
 800653a:	4355      	muls	r5, r2
 800653c:	460e      	mov	r6, r1
 800653e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006542:	f000 f979 	bl	8006838 <_malloc_r>
 8006546:	4604      	mov	r4, r0
 8006548:	b140      	cbz	r0, 800655c <__sfmoreglue+0x28>
 800654a:	2100      	movs	r1, #0
 800654c:	e9c0 1600 	strd	r1, r6, [r0]
 8006550:	300c      	adds	r0, #12
 8006552:	60a0      	str	r0, [r4, #8]
 8006554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006558:	f7ff fd1c 	bl	8005f94 <memset>
 800655c:	4620      	mov	r0, r4
 800655e:	bd70      	pop	{r4, r5, r6, pc}

08006560 <__sfp_lock_acquire>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__sfp_lock_acquire+0x8>)
 8006562:	f000 b8b3 	b.w	80066cc <__retarget_lock_acquire_recursive>
 8006566:	bf00      	nop
 8006568:	200001f4 	.word	0x200001f4

0800656c <__sfp_lock_release>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__sfp_lock_release+0x8>)
 800656e:	f000 b8ae 	b.w	80066ce <__retarget_lock_release_recursive>
 8006572:	bf00      	nop
 8006574:	200001f4 	.word	0x200001f4

08006578 <__sinit_lock_acquire>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__sinit_lock_acquire+0x8>)
 800657a:	f000 b8a7 	b.w	80066cc <__retarget_lock_acquire_recursive>
 800657e:	bf00      	nop
 8006580:	200001ef 	.word	0x200001ef

08006584 <__sinit_lock_release>:
 8006584:	4801      	ldr	r0, [pc, #4]	; (800658c <__sinit_lock_release+0x8>)
 8006586:	f000 b8a2 	b.w	80066ce <__retarget_lock_release_recursive>
 800658a:	bf00      	nop
 800658c:	200001ef 	.word	0x200001ef

08006590 <__sinit>:
 8006590:	b510      	push	{r4, lr}
 8006592:	4604      	mov	r4, r0
 8006594:	f7ff fff0 	bl	8006578 <__sinit_lock_acquire>
 8006598:	69a3      	ldr	r3, [r4, #24]
 800659a:	b11b      	cbz	r3, 80065a4 <__sinit+0x14>
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	f7ff bff0 	b.w	8006584 <__sinit_lock_release>
 80065a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065a8:	6523      	str	r3, [r4, #80]	; 0x50
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <__sinit+0x68>)
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <__sinit+0x6c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	bf04      	itt	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	61a3      	streq	r3, [r4, #24]
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f820 	bl	8006600 <__sfp>
 80065c0:	6060      	str	r0, [r4, #4]
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f81c 	bl	8006600 <__sfp>
 80065c8:	60a0      	str	r0, [r4, #8]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f818 	bl	8006600 <__sfp>
 80065d0:	2200      	movs	r2, #0
 80065d2:	60e0      	str	r0, [r4, #12]
 80065d4:	2104      	movs	r1, #4
 80065d6:	6860      	ldr	r0, [r4, #4]
 80065d8:	f7ff ff82 	bl	80064e0 <std>
 80065dc:	68a0      	ldr	r0, [r4, #8]
 80065de:	2201      	movs	r2, #1
 80065e0:	2109      	movs	r1, #9
 80065e2:	f7ff ff7d 	bl	80064e0 <std>
 80065e6:	68e0      	ldr	r0, [r4, #12]
 80065e8:	2202      	movs	r2, #2
 80065ea:	2112      	movs	r1, #18
 80065ec:	f7ff ff78 	bl	80064e0 <std>
 80065f0:	2301      	movs	r3, #1
 80065f2:	61a3      	str	r3, [r4, #24]
 80065f4:	e7d2      	b.n	800659c <__sinit+0xc>
 80065f6:	bf00      	nop
 80065f8:	080071b8 	.word	0x080071b8
 80065fc:	08006529 	.word	0x08006529

08006600 <__sfp>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	4607      	mov	r7, r0
 8006604:	f7ff ffac 	bl	8006560 <__sfp_lock_acquire>
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <__sfp+0x84>)
 800660a:	681e      	ldr	r6, [r3, #0]
 800660c:	69b3      	ldr	r3, [r6, #24]
 800660e:	b913      	cbnz	r3, 8006616 <__sfp+0x16>
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff ffbd 	bl	8006590 <__sinit>
 8006616:	3648      	adds	r6, #72	; 0x48
 8006618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	d503      	bpl.n	8006628 <__sfp+0x28>
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	b30b      	cbz	r3, 8006668 <__sfp+0x68>
 8006624:	6836      	ldr	r6, [r6, #0]
 8006626:	e7f7      	b.n	8006618 <__sfp+0x18>
 8006628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800662c:	b9d5      	cbnz	r5, 8006664 <__sfp+0x64>
 800662e:	4b16      	ldr	r3, [pc, #88]	; (8006688 <__sfp+0x88>)
 8006630:	60e3      	str	r3, [r4, #12]
 8006632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006636:	6665      	str	r5, [r4, #100]	; 0x64
 8006638:	f000 f847 	bl	80066ca <__retarget_lock_init_recursive>
 800663c:	f7ff ff96 	bl	800656c <__sfp_lock_release>
 8006640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	61a5      	str	r5, [r4, #24]
 800664c:	2208      	movs	r2, #8
 800664e:	4629      	mov	r1, r5
 8006650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006654:	f7ff fc9e 	bl	8005f94 <memset>
 8006658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800665c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006660:	4620      	mov	r0, r4
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006664:	3468      	adds	r4, #104	; 0x68
 8006666:	e7d9      	b.n	800661c <__sfp+0x1c>
 8006668:	2104      	movs	r1, #4
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff ff62 	bl	8006534 <__sfmoreglue>
 8006670:	4604      	mov	r4, r0
 8006672:	6030      	str	r0, [r6, #0]
 8006674:	2800      	cmp	r0, #0
 8006676:	d1d5      	bne.n	8006624 <__sfp+0x24>
 8006678:	f7ff ff78 	bl	800656c <__sfp_lock_release>
 800667c:	230c      	movs	r3, #12
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	e7ee      	b.n	8006660 <__sfp+0x60>
 8006682:	bf00      	nop
 8006684:	080071b8 	.word	0x080071b8
 8006688:	ffff0001 	.word	0xffff0001

0800668c <_fwalk_reent>:
 800668c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006690:	4606      	mov	r6, r0
 8006692:	4688      	mov	r8, r1
 8006694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006698:	2700      	movs	r7, #0
 800669a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800669e:	f1b9 0901 	subs.w	r9, r9, #1
 80066a2:	d505      	bpl.n	80066b0 <_fwalk_reent+0x24>
 80066a4:	6824      	ldr	r4, [r4, #0]
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	d1f7      	bne.n	800669a <_fwalk_reent+0xe>
 80066aa:	4638      	mov	r0, r7
 80066ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b0:	89ab      	ldrh	r3, [r5, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d907      	bls.n	80066c6 <_fwalk_reent+0x3a>
 80066b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ba:	3301      	adds	r3, #1
 80066bc:	d003      	beq.n	80066c6 <_fwalk_reent+0x3a>
 80066be:	4629      	mov	r1, r5
 80066c0:	4630      	mov	r0, r6
 80066c2:	47c0      	blx	r8
 80066c4:	4307      	orrs	r7, r0
 80066c6:	3568      	adds	r5, #104	; 0x68
 80066c8:	e7e9      	b.n	800669e <_fwalk_reent+0x12>

080066ca <__retarget_lock_init_recursive>:
 80066ca:	4770      	bx	lr

080066cc <__retarget_lock_acquire_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_release_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <__swhatbuf_r>:
 80066d0:	b570      	push	{r4, r5, r6, lr}
 80066d2:	460e      	mov	r6, r1
 80066d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d8:	2900      	cmp	r1, #0
 80066da:	b096      	sub	sp, #88	; 0x58
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	da07      	bge.n	80066f2 <__swhatbuf_r+0x22>
 80066e2:	2300      	movs	r3, #0
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	89b3      	ldrh	r3, [r6, #12]
 80066e8:	061a      	lsls	r2, r3, #24
 80066ea:	d410      	bmi.n	800670e <__swhatbuf_r+0x3e>
 80066ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f0:	e00e      	b.n	8006710 <__swhatbuf_r+0x40>
 80066f2:	466a      	mov	r2, sp
 80066f4:	f000 fc5e 	bl	8006fb4 <_fstat_r>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	dbf2      	blt.n	80066e2 <__swhatbuf_r+0x12>
 80066fc:	9a01      	ldr	r2, [sp, #4]
 80066fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006702:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006706:	425a      	negs	r2, r3
 8006708:	415a      	adcs	r2, r3
 800670a:	602a      	str	r2, [r5, #0]
 800670c:	e7ee      	b.n	80066ec <__swhatbuf_r+0x1c>
 800670e:	2340      	movs	r3, #64	; 0x40
 8006710:	2000      	movs	r0, #0
 8006712:	6023      	str	r3, [r4, #0]
 8006714:	b016      	add	sp, #88	; 0x58
 8006716:	bd70      	pop	{r4, r5, r6, pc}

08006718 <__smakebuf_r>:
 8006718:	898b      	ldrh	r3, [r1, #12]
 800671a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800671c:	079d      	lsls	r5, r3, #30
 800671e:	4606      	mov	r6, r0
 8006720:	460c      	mov	r4, r1
 8006722:	d507      	bpl.n	8006734 <__smakebuf_r+0x1c>
 8006724:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006728:	6023      	str	r3, [r4, #0]
 800672a:	6123      	str	r3, [r4, #16]
 800672c:	2301      	movs	r3, #1
 800672e:	6163      	str	r3, [r4, #20]
 8006730:	b002      	add	sp, #8
 8006732:	bd70      	pop	{r4, r5, r6, pc}
 8006734:	ab01      	add	r3, sp, #4
 8006736:	466a      	mov	r2, sp
 8006738:	f7ff ffca 	bl	80066d0 <__swhatbuf_r>
 800673c:	9900      	ldr	r1, [sp, #0]
 800673e:	4605      	mov	r5, r0
 8006740:	4630      	mov	r0, r6
 8006742:	f000 f879 	bl	8006838 <_malloc_r>
 8006746:	b948      	cbnz	r0, 800675c <__smakebuf_r+0x44>
 8006748:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674c:	059a      	lsls	r2, r3, #22
 800674e:	d4ef      	bmi.n	8006730 <__smakebuf_r+0x18>
 8006750:	f023 0303 	bic.w	r3, r3, #3
 8006754:	f043 0302 	orr.w	r3, r3, #2
 8006758:	81a3      	strh	r3, [r4, #12]
 800675a:	e7e3      	b.n	8006724 <__smakebuf_r+0xc>
 800675c:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <__smakebuf_r+0x7c>)
 800675e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006768:	81a3      	strh	r3, [r4, #12]
 800676a:	9b00      	ldr	r3, [sp, #0]
 800676c:	6163      	str	r3, [r4, #20]
 800676e:	9b01      	ldr	r3, [sp, #4]
 8006770:	6120      	str	r0, [r4, #16]
 8006772:	b15b      	cbz	r3, 800678c <__smakebuf_r+0x74>
 8006774:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006778:	4630      	mov	r0, r6
 800677a:	f000 fc2d 	bl	8006fd8 <_isatty_r>
 800677e:	b128      	cbz	r0, 800678c <__smakebuf_r+0x74>
 8006780:	89a3      	ldrh	r3, [r4, #12]
 8006782:	f023 0303 	bic.w	r3, r3, #3
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	81a3      	strh	r3, [r4, #12]
 800678c:	89a0      	ldrh	r0, [r4, #12]
 800678e:	4305      	orrs	r5, r0
 8006790:	81a5      	strh	r5, [r4, #12]
 8006792:	e7cd      	b.n	8006730 <__smakebuf_r+0x18>
 8006794:	08006529 	.word	0x08006529

08006798 <_free_r>:
 8006798:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800679a:	2900      	cmp	r1, #0
 800679c:	d048      	beq.n	8006830 <_free_r+0x98>
 800679e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067a2:	9001      	str	r0, [sp, #4]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f1a1 0404 	sub.w	r4, r1, #4
 80067aa:	bfb8      	it	lt
 80067ac:	18e4      	addlt	r4, r4, r3
 80067ae:	f000 fc35 	bl	800701c <__malloc_lock>
 80067b2:	4a20      	ldr	r2, [pc, #128]	; (8006834 <_free_r+0x9c>)
 80067b4:	9801      	ldr	r0, [sp, #4]
 80067b6:	6813      	ldr	r3, [r2, #0]
 80067b8:	4615      	mov	r5, r2
 80067ba:	b933      	cbnz	r3, 80067ca <_free_r+0x32>
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	6014      	str	r4, [r2, #0]
 80067c0:	b003      	add	sp, #12
 80067c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067c6:	f000 bc2f 	b.w	8007028 <__malloc_unlock>
 80067ca:	42a3      	cmp	r3, r4
 80067cc:	d90b      	bls.n	80067e6 <_free_r+0x4e>
 80067ce:	6821      	ldr	r1, [r4, #0]
 80067d0:	1862      	adds	r2, r4, r1
 80067d2:	4293      	cmp	r3, r2
 80067d4:	bf04      	itt	eq
 80067d6:	681a      	ldreq	r2, [r3, #0]
 80067d8:	685b      	ldreq	r3, [r3, #4]
 80067da:	6063      	str	r3, [r4, #4]
 80067dc:	bf04      	itt	eq
 80067de:	1852      	addeq	r2, r2, r1
 80067e0:	6022      	streq	r2, [r4, #0]
 80067e2:	602c      	str	r4, [r5, #0]
 80067e4:	e7ec      	b.n	80067c0 <_free_r+0x28>
 80067e6:	461a      	mov	r2, r3
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	b10b      	cbz	r3, 80067f0 <_free_r+0x58>
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d9fa      	bls.n	80067e6 <_free_r+0x4e>
 80067f0:	6811      	ldr	r1, [r2, #0]
 80067f2:	1855      	adds	r5, r2, r1
 80067f4:	42a5      	cmp	r5, r4
 80067f6:	d10b      	bne.n	8006810 <_free_r+0x78>
 80067f8:	6824      	ldr	r4, [r4, #0]
 80067fa:	4421      	add	r1, r4
 80067fc:	1854      	adds	r4, r2, r1
 80067fe:	42a3      	cmp	r3, r4
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	d1dd      	bne.n	80067c0 <_free_r+0x28>
 8006804:	681c      	ldr	r4, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6053      	str	r3, [r2, #4]
 800680a:	4421      	add	r1, r4
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	e7d7      	b.n	80067c0 <_free_r+0x28>
 8006810:	d902      	bls.n	8006818 <_free_r+0x80>
 8006812:	230c      	movs	r3, #12
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	e7d3      	b.n	80067c0 <_free_r+0x28>
 8006818:	6825      	ldr	r5, [r4, #0]
 800681a:	1961      	adds	r1, r4, r5
 800681c:	428b      	cmp	r3, r1
 800681e:	bf04      	itt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	bf04      	itt	eq
 8006828:	1949      	addeq	r1, r1, r5
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	6054      	str	r4, [r2, #4]
 800682e:	e7c7      	b.n	80067c0 <_free_r+0x28>
 8006830:	b003      	add	sp, #12
 8006832:	bd30      	pop	{r4, r5, pc}
 8006834:	20000094 	.word	0x20000094

08006838 <_malloc_r>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	1ccd      	adds	r5, r1, #3
 800683c:	f025 0503 	bic.w	r5, r5, #3
 8006840:	3508      	adds	r5, #8
 8006842:	2d0c      	cmp	r5, #12
 8006844:	bf38      	it	cc
 8006846:	250c      	movcc	r5, #12
 8006848:	2d00      	cmp	r5, #0
 800684a:	4606      	mov	r6, r0
 800684c:	db01      	blt.n	8006852 <_malloc_r+0x1a>
 800684e:	42a9      	cmp	r1, r5
 8006850:	d903      	bls.n	800685a <_malloc_r+0x22>
 8006852:	230c      	movs	r3, #12
 8006854:	6033      	str	r3, [r6, #0]
 8006856:	2000      	movs	r0, #0
 8006858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800685a:	f000 fbdf 	bl	800701c <__malloc_lock>
 800685e:	4921      	ldr	r1, [pc, #132]	; (80068e4 <_malloc_r+0xac>)
 8006860:	680a      	ldr	r2, [r1, #0]
 8006862:	4614      	mov	r4, r2
 8006864:	b99c      	cbnz	r4, 800688e <_malloc_r+0x56>
 8006866:	4f20      	ldr	r7, [pc, #128]	; (80068e8 <_malloc_r+0xb0>)
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	b923      	cbnz	r3, 8006876 <_malloc_r+0x3e>
 800686c:	4621      	mov	r1, r4
 800686e:	4630      	mov	r0, r6
 8006870:	f000 fb2a 	bl	8006ec8 <_sbrk_r>
 8006874:	6038      	str	r0, [r7, #0]
 8006876:	4629      	mov	r1, r5
 8006878:	4630      	mov	r0, r6
 800687a:	f000 fb25 	bl	8006ec8 <_sbrk_r>
 800687e:	1c43      	adds	r3, r0, #1
 8006880:	d123      	bne.n	80068ca <_malloc_r+0x92>
 8006882:	230c      	movs	r3, #12
 8006884:	6033      	str	r3, [r6, #0]
 8006886:	4630      	mov	r0, r6
 8006888:	f000 fbce 	bl	8007028 <__malloc_unlock>
 800688c:	e7e3      	b.n	8006856 <_malloc_r+0x1e>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	1b5b      	subs	r3, r3, r5
 8006892:	d417      	bmi.n	80068c4 <_malloc_r+0x8c>
 8006894:	2b0b      	cmp	r3, #11
 8006896:	d903      	bls.n	80068a0 <_malloc_r+0x68>
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	441c      	add	r4, r3
 800689c:	6025      	str	r5, [r4, #0]
 800689e:	e004      	b.n	80068aa <_malloc_r+0x72>
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	42a2      	cmp	r2, r4
 80068a4:	bf0c      	ite	eq
 80068a6:	600b      	streq	r3, [r1, #0]
 80068a8:	6053      	strne	r3, [r2, #4]
 80068aa:	4630      	mov	r0, r6
 80068ac:	f000 fbbc 	bl	8007028 <__malloc_unlock>
 80068b0:	f104 000b 	add.w	r0, r4, #11
 80068b4:	1d23      	adds	r3, r4, #4
 80068b6:	f020 0007 	bic.w	r0, r0, #7
 80068ba:	1ac2      	subs	r2, r0, r3
 80068bc:	d0cc      	beq.n	8006858 <_malloc_r+0x20>
 80068be:	1a1b      	subs	r3, r3, r0
 80068c0:	50a3      	str	r3, [r4, r2]
 80068c2:	e7c9      	b.n	8006858 <_malloc_r+0x20>
 80068c4:	4622      	mov	r2, r4
 80068c6:	6864      	ldr	r4, [r4, #4]
 80068c8:	e7cc      	b.n	8006864 <_malloc_r+0x2c>
 80068ca:	1cc4      	adds	r4, r0, #3
 80068cc:	f024 0403 	bic.w	r4, r4, #3
 80068d0:	42a0      	cmp	r0, r4
 80068d2:	d0e3      	beq.n	800689c <_malloc_r+0x64>
 80068d4:	1a21      	subs	r1, r4, r0
 80068d6:	4630      	mov	r0, r6
 80068d8:	f000 faf6 	bl	8006ec8 <_sbrk_r>
 80068dc:	3001      	adds	r0, #1
 80068de:	d1dd      	bne.n	800689c <_malloc_r+0x64>
 80068e0:	e7cf      	b.n	8006882 <_malloc_r+0x4a>
 80068e2:	bf00      	nop
 80068e4:	20000094 	.word	0x20000094
 80068e8:	20000098 	.word	0x20000098

080068ec <__sfputc_r>:
 80068ec:	6893      	ldr	r3, [r2, #8]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	b410      	push	{r4}
 80068f4:	6093      	str	r3, [r2, #8]
 80068f6:	da08      	bge.n	800690a <__sfputc_r+0x1e>
 80068f8:	6994      	ldr	r4, [r2, #24]
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	db01      	blt.n	8006902 <__sfputc_r+0x16>
 80068fe:	290a      	cmp	r1, #10
 8006900:	d103      	bne.n	800690a <__sfputc_r+0x1e>
 8006902:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006906:	f7ff bc69 	b.w	80061dc <__swbuf_r>
 800690a:	6813      	ldr	r3, [r2, #0]
 800690c:	1c58      	adds	r0, r3, #1
 800690e:	6010      	str	r0, [r2, #0]
 8006910:	7019      	strb	r1, [r3, #0]
 8006912:	4608      	mov	r0, r1
 8006914:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006918:	4770      	bx	lr

0800691a <__sfputs_r>:
 800691a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691c:	4606      	mov	r6, r0
 800691e:	460f      	mov	r7, r1
 8006920:	4614      	mov	r4, r2
 8006922:	18d5      	adds	r5, r2, r3
 8006924:	42ac      	cmp	r4, r5
 8006926:	d101      	bne.n	800692c <__sfputs_r+0x12>
 8006928:	2000      	movs	r0, #0
 800692a:	e007      	b.n	800693c <__sfputs_r+0x22>
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	463a      	mov	r2, r7
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ffda 	bl	80068ec <__sfputc_r>
 8006938:	1c43      	adds	r3, r0, #1
 800693a:	d1f3      	bne.n	8006924 <__sfputs_r+0xa>
 800693c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006940 <_vfiprintf_r>:
 8006940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006944:	460d      	mov	r5, r1
 8006946:	b09d      	sub	sp, #116	; 0x74
 8006948:	4614      	mov	r4, r2
 800694a:	4698      	mov	r8, r3
 800694c:	4606      	mov	r6, r0
 800694e:	b118      	cbz	r0, 8006958 <_vfiprintf_r+0x18>
 8006950:	6983      	ldr	r3, [r0, #24]
 8006952:	b90b      	cbnz	r3, 8006958 <_vfiprintf_r+0x18>
 8006954:	f7ff fe1c 	bl	8006590 <__sinit>
 8006958:	4b89      	ldr	r3, [pc, #548]	; (8006b80 <_vfiprintf_r+0x240>)
 800695a:	429d      	cmp	r5, r3
 800695c:	d11b      	bne.n	8006996 <_vfiprintf_r+0x56>
 800695e:	6875      	ldr	r5, [r6, #4]
 8006960:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006962:	07d9      	lsls	r1, r3, #31
 8006964:	d405      	bmi.n	8006972 <_vfiprintf_r+0x32>
 8006966:	89ab      	ldrh	r3, [r5, #12]
 8006968:	059a      	lsls	r2, r3, #22
 800696a:	d402      	bmi.n	8006972 <_vfiprintf_r+0x32>
 800696c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800696e:	f7ff fead 	bl	80066cc <__retarget_lock_acquire_recursive>
 8006972:	89ab      	ldrh	r3, [r5, #12]
 8006974:	071b      	lsls	r3, r3, #28
 8006976:	d501      	bpl.n	800697c <_vfiprintf_r+0x3c>
 8006978:	692b      	ldr	r3, [r5, #16]
 800697a:	b9eb      	cbnz	r3, 80069b8 <_vfiprintf_r+0x78>
 800697c:	4629      	mov	r1, r5
 800697e:	4630      	mov	r0, r6
 8006980:	f7ff fc7e 	bl	8006280 <__swsetup_r>
 8006984:	b1c0      	cbz	r0, 80069b8 <_vfiprintf_r+0x78>
 8006986:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006988:	07dc      	lsls	r4, r3, #31
 800698a:	d50e      	bpl.n	80069aa <_vfiprintf_r+0x6a>
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b01d      	add	sp, #116	; 0x74
 8006992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006996:	4b7b      	ldr	r3, [pc, #492]	; (8006b84 <_vfiprintf_r+0x244>)
 8006998:	429d      	cmp	r5, r3
 800699a:	d101      	bne.n	80069a0 <_vfiprintf_r+0x60>
 800699c:	68b5      	ldr	r5, [r6, #8]
 800699e:	e7df      	b.n	8006960 <_vfiprintf_r+0x20>
 80069a0:	4b79      	ldr	r3, [pc, #484]	; (8006b88 <_vfiprintf_r+0x248>)
 80069a2:	429d      	cmp	r5, r3
 80069a4:	bf08      	it	eq
 80069a6:	68f5      	ldreq	r5, [r6, #12]
 80069a8:	e7da      	b.n	8006960 <_vfiprintf_r+0x20>
 80069aa:	89ab      	ldrh	r3, [r5, #12]
 80069ac:	0598      	lsls	r0, r3, #22
 80069ae:	d4ed      	bmi.n	800698c <_vfiprintf_r+0x4c>
 80069b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069b2:	f7ff fe8c 	bl	80066ce <__retarget_lock_release_recursive>
 80069b6:	e7e9      	b.n	800698c <_vfiprintf_r+0x4c>
 80069b8:	2300      	movs	r3, #0
 80069ba:	9309      	str	r3, [sp, #36]	; 0x24
 80069bc:	2320      	movs	r3, #32
 80069be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80069c6:	2330      	movs	r3, #48	; 0x30
 80069c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b8c <_vfiprintf_r+0x24c>
 80069cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069d0:	f04f 0901 	mov.w	r9, #1
 80069d4:	4623      	mov	r3, r4
 80069d6:	469a      	mov	sl, r3
 80069d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069dc:	b10a      	cbz	r2, 80069e2 <_vfiprintf_r+0xa2>
 80069de:	2a25      	cmp	r2, #37	; 0x25
 80069e0:	d1f9      	bne.n	80069d6 <_vfiprintf_r+0x96>
 80069e2:	ebba 0b04 	subs.w	fp, sl, r4
 80069e6:	d00b      	beq.n	8006a00 <_vfiprintf_r+0xc0>
 80069e8:	465b      	mov	r3, fp
 80069ea:	4622      	mov	r2, r4
 80069ec:	4629      	mov	r1, r5
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff ff93 	bl	800691a <__sfputs_r>
 80069f4:	3001      	adds	r0, #1
 80069f6:	f000 80aa 	beq.w	8006b4e <_vfiprintf_r+0x20e>
 80069fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069fc:	445a      	add	r2, fp
 80069fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006a00:	f89a 3000 	ldrb.w	r3, [sl]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a2 	beq.w	8006b4e <_vfiprintf_r+0x20e>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a14:	f10a 0a01 	add.w	sl, sl, #1
 8006a18:	9304      	str	r3, [sp, #16]
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a20:	931a      	str	r3, [sp, #104]	; 0x68
 8006a22:	4654      	mov	r4, sl
 8006a24:	2205      	movs	r2, #5
 8006a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2a:	4858      	ldr	r0, [pc, #352]	; (8006b8c <_vfiprintf_r+0x24c>)
 8006a2c:	f7f9 fc08 	bl	8000240 <memchr>
 8006a30:	9a04      	ldr	r2, [sp, #16]
 8006a32:	b9d8      	cbnz	r0, 8006a6c <_vfiprintf_r+0x12c>
 8006a34:	06d1      	lsls	r1, r2, #27
 8006a36:	bf44      	itt	mi
 8006a38:	2320      	movmi	r3, #32
 8006a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a3e:	0713      	lsls	r3, r2, #28
 8006a40:	bf44      	itt	mi
 8006a42:	232b      	movmi	r3, #43	; 0x2b
 8006a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a48:	f89a 3000 	ldrb.w	r3, [sl]
 8006a4c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a4e:	d015      	beq.n	8006a7c <_vfiprintf_r+0x13c>
 8006a50:	9a07      	ldr	r2, [sp, #28]
 8006a52:	4654      	mov	r4, sl
 8006a54:	2000      	movs	r0, #0
 8006a56:	f04f 0c0a 	mov.w	ip, #10
 8006a5a:	4621      	mov	r1, r4
 8006a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a60:	3b30      	subs	r3, #48	; 0x30
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	d94e      	bls.n	8006b04 <_vfiprintf_r+0x1c4>
 8006a66:	b1b0      	cbz	r0, 8006a96 <_vfiprintf_r+0x156>
 8006a68:	9207      	str	r2, [sp, #28]
 8006a6a:	e014      	b.n	8006a96 <_vfiprintf_r+0x156>
 8006a6c:	eba0 0308 	sub.w	r3, r0, r8
 8006a70:	fa09 f303 	lsl.w	r3, r9, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	9304      	str	r3, [sp, #16]
 8006a78:	46a2      	mov	sl, r4
 8006a7a:	e7d2      	b.n	8006a22 <_vfiprintf_r+0xe2>
 8006a7c:	9b03      	ldr	r3, [sp, #12]
 8006a7e:	1d19      	adds	r1, r3, #4
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	9103      	str	r1, [sp, #12]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bfbb      	ittet	lt
 8006a88:	425b      	neglt	r3, r3
 8006a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a8e:	9307      	strge	r3, [sp, #28]
 8006a90:	9307      	strlt	r3, [sp, #28]
 8006a92:	bfb8      	it	lt
 8006a94:	9204      	strlt	r2, [sp, #16]
 8006a96:	7823      	ldrb	r3, [r4, #0]
 8006a98:	2b2e      	cmp	r3, #46	; 0x2e
 8006a9a:	d10c      	bne.n	8006ab6 <_vfiprintf_r+0x176>
 8006a9c:	7863      	ldrb	r3, [r4, #1]
 8006a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8006aa0:	d135      	bne.n	8006b0e <_vfiprintf_r+0x1ce>
 8006aa2:	9b03      	ldr	r3, [sp, #12]
 8006aa4:	1d1a      	adds	r2, r3, #4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	9203      	str	r2, [sp, #12]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	bfb8      	it	lt
 8006aae:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ab2:	3402      	adds	r4, #2
 8006ab4:	9305      	str	r3, [sp, #20]
 8006ab6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b9c <_vfiprintf_r+0x25c>
 8006aba:	7821      	ldrb	r1, [r4, #0]
 8006abc:	2203      	movs	r2, #3
 8006abe:	4650      	mov	r0, sl
 8006ac0:	f7f9 fbbe 	bl	8000240 <memchr>
 8006ac4:	b140      	cbz	r0, 8006ad8 <_vfiprintf_r+0x198>
 8006ac6:	2340      	movs	r3, #64	; 0x40
 8006ac8:	eba0 000a 	sub.w	r0, r0, sl
 8006acc:	fa03 f000 	lsl.w	r0, r3, r0
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	4303      	orrs	r3, r0
 8006ad4:	3401      	adds	r4, #1
 8006ad6:	9304      	str	r3, [sp, #16]
 8006ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006adc:	482c      	ldr	r0, [pc, #176]	; (8006b90 <_vfiprintf_r+0x250>)
 8006ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ae2:	2206      	movs	r2, #6
 8006ae4:	f7f9 fbac 	bl	8000240 <memchr>
 8006ae8:	2800      	cmp	r0, #0
 8006aea:	d03f      	beq.n	8006b6c <_vfiprintf_r+0x22c>
 8006aec:	4b29      	ldr	r3, [pc, #164]	; (8006b94 <_vfiprintf_r+0x254>)
 8006aee:	bb1b      	cbnz	r3, 8006b38 <_vfiprintf_r+0x1f8>
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	3307      	adds	r3, #7
 8006af4:	f023 0307 	bic.w	r3, r3, #7
 8006af8:	3308      	adds	r3, #8
 8006afa:	9303      	str	r3, [sp, #12]
 8006afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afe:	443b      	add	r3, r7
 8006b00:	9309      	str	r3, [sp, #36]	; 0x24
 8006b02:	e767      	b.n	80069d4 <_vfiprintf_r+0x94>
 8006b04:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b08:	460c      	mov	r4, r1
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	e7a5      	b.n	8006a5a <_vfiprintf_r+0x11a>
 8006b0e:	2300      	movs	r3, #0
 8006b10:	3401      	adds	r4, #1
 8006b12:	9305      	str	r3, [sp, #20]
 8006b14:	4619      	mov	r1, r3
 8006b16:	f04f 0c0a 	mov.w	ip, #10
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b20:	3a30      	subs	r2, #48	; 0x30
 8006b22:	2a09      	cmp	r2, #9
 8006b24:	d903      	bls.n	8006b2e <_vfiprintf_r+0x1ee>
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d0c5      	beq.n	8006ab6 <_vfiprintf_r+0x176>
 8006b2a:	9105      	str	r1, [sp, #20]
 8006b2c:	e7c3      	b.n	8006ab6 <_vfiprintf_r+0x176>
 8006b2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b32:	4604      	mov	r4, r0
 8006b34:	2301      	movs	r3, #1
 8006b36:	e7f0      	b.n	8006b1a <_vfiprintf_r+0x1da>
 8006b38:	ab03      	add	r3, sp, #12
 8006b3a:	9300      	str	r3, [sp, #0]
 8006b3c:	462a      	mov	r2, r5
 8006b3e:	4b16      	ldr	r3, [pc, #88]	; (8006b98 <_vfiprintf_r+0x258>)
 8006b40:	a904      	add	r1, sp, #16
 8006b42:	4630      	mov	r0, r6
 8006b44:	f3af 8000 	nop.w
 8006b48:	4607      	mov	r7, r0
 8006b4a:	1c78      	adds	r0, r7, #1
 8006b4c:	d1d6      	bne.n	8006afc <_vfiprintf_r+0x1bc>
 8006b4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b50:	07d9      	lsls	r1, r3, #31
 8006b52:	d405      	bmi.n	8006b60 <_vfiprintf_r+0x220>
 8006b54:	89ab      	ldrh	r3, [r5, #12]
 8006b56:	059a      	lsls	r2, r3, #22
 8006b58:	d402      	bmi.n	8006b60 <_vfiprintf_r+0x220>
 8006b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b5c:	f7ff fdb7 	bl	80066ce <__retarget_lock_release_recursive>
 8006b60:	89ab      	ldrh	r3, [r5, #12]
 8006b62:	065b      	lsls	r3, r3, #25
 8006b64:	f53f af12 	bmi.w	800698c <_vfiprintf_r+0x4c>
 8006b68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b6a:	e711      	b.n	8006990 <_vfiprintf_r+0x50>
 8006b6c:	ab03      	add	r3, sp, #12
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	462a      	mov	r2, r5
 8006b72:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <_vfiprintf_r+0x258>)
 8006b74:	a904      	add	r1, sp, #16
 8006b76:	4630      	mov	r0, r6
 8006b78:	f000 f880 	bl	8006c7c <_printf_i>
 8006b7c:	e7e4      	b.n	8006b48 <_vfiprintf_r+0x208>
 8006b7e:	bf00      	nop
 8006b80:	080072e0 	.word	0x080072e0
 8006b84:	08007300 	.word	0x08007300
 8006b88:	080072c0 	.word	0x080072c0
 8006b8c:	08007320 	.word	0x08007320
 8006b90:	0800732a 	.word	0x0800732a
 8006b94:	00000000 	.word	0x00000000
 8006b98:	0800691b 	.word	0x0800691b
 8006b9c:	08007326 	.word	0x08007326

08006ba0 <_printf_common>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	4699      	mov	r9, r3
 8006ba8:	688a      	ldr	r2, [r1, #8]
 8006baa:	690b      	ldr	r3, [r1, #16]
 8006bac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bfb8      	it	lt
 8006bb4:	4613      	movlt	r3, r2
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b10a      	cbz	r2, 8006bc6 <_printf_common+0x26>
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	6033      	str	r3, [r6, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	0699      	lsls	r1, r3, #26
 8006bca:	bf42      	ittt	mi
 8006bcc:	6833      	ldrmi	r3, [r6, #0]
 8006bce:	3302      	addmi	r3, #2
 8006bd0:	6033      	strmi	r3, [r6, #0]
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	f015 0506 	ands.w	r5, r5, #6
 8006bd8:	d106      	bne.n	8006be8 <_printf_common+0x48>
 8006bda:	f104 0a19 	add.w	sl, r4, #25
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	6832      	ldr	r2, [r6, #0]
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dc26      	bgt.n	8006c36 <_printf_common+0x96>
 8006be8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bec:	1e13      	subs	r3, r2, #0
 8006bee:	6822      	ldr	r2, [r4, #0]
 8006bf0:	bf18      	it	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	0692      	lsls	r2, r2, #26
 8006bf6:	d42b      	bmi.n	8006c50 <_printf_common+0xb0>
 8006bf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bfc:	4649      	mov	r1, r9
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c0      	blx	r8
 8006c02:	3001      	adds	r0, #1
 8006c04:	d01e      	beq.n	8006c44 <_printf_common+0xa4>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	68e5      	ldr	r5, [r4, #12]
 8006c0a:	6832      	ldr	r2, [r6, #0]
 8006c0c:	f003 0306 	and.w	r3, r3, #6
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	bf08      	it	eq
 8006c14:	1aad      	subeq	r5, r5, r2
 8006c16:	68a3      	ldr	r3, [r4, #8]
 8006c18:	6922      	ldr	r2, [r4, #16]
 8006c1a:	bf0c      	ite	eq
 8006c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c20:	2500      	movne	r5, #0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bfc4      	itt	gt
 8006c26:	1a9b      	subgt	r3, r3, r2
 8006c28:	18ed      	addgt	r5, r5, r3
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	341a      	adds	r4, #26
 8006c2e:	42b5      	cmp	r5, r6
 8006c30:	d11a      	bne.n	8006c68 <_printf_common+0xc8>
 8006c32:	2000      	movs	r0, #0
 8006c34:	e008      	b.n	8006c48 <_printf_common+0xa8>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4649      	mov	r1, r9
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	47c0      	blx	r8
 8006c40:	3001      	adds	r0, #1
 8006c42:	d103      	bne.n	8006c4c <_printf_common+0xac>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	e7c6      	b.n	8006bde <_printf_common+0x3e>
 8006c50:	18e1      	adds	r1, r4, r3
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	2030      	movs	r0, #48	; 0x30
 8006c56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c5a:	4422      	add	r2, r4
 8006c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c64:	3302      	adds	r3, #2
 8006c66:	e7c7      	b.n	8006bf8 <_printf_common+0x58>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	4649      	mov	r1, r9
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c0      	blx	r8
 8006c72:	3001      	adds	r0, #1
 8006c74:	d0e6      	beq.n	8006c44 <_printf_common+0xa4>
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7d9      	b.n	8006c2e <_printf_common+0x8e>
	...

08006c7c <_printf_i>:
 8006c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	460c      	mov	r4, r1
 8006c82:	4691      	mov	r9, r2
 8006c84:	7e27      	ldrb	r7, [r4, #24]
 8006c86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c88:	2f78      	cmp	r7, #120	; 0x78
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	469a      	mov	sl, r3
 8006c8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c92:	d807      	bhi.n	8006ca4 <_printf_i+0x28>
 8006c94:	2f62      	cmp	r7, #98	; 0x62
 8006c96:	d80a      	bhi.n	8006cae <_printf_i+0x32>
 8006c98:	2f00      	cmp	r7, #0
 8006c9a:	f000 80d8 	beq.w	8006e4e <_printf_i+0x1d2>
 8006c9e:	2f58      	cmp	r7, #88	; 0x58
 8006ca0:	f000 80a3 	beq.w	8006dea <_printf_i+0x16e>
 8006ca4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cac:	e03a      	b.n	8006d24 <_printf_i+0xa8>
 8006cae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cb2:	2b15      	cmp	r3, #21
 8006cb4:	d8f6      	bhi.n	8006ca4 <_printf_i+0x28>
 8006cb6:	a001      	add	r0, pc, #4	; (adr r0, 8006cbc <_printf_i+0x40>)
 8006cb8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006cbc:	08006d15 	.word	0x08006d15
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006ca5 	.word	0x08006ca5
 8006cc8:	08006ca5 	.word	0x08006ca5
 8006ccc:	08006ca5 	.word	0x08006ca5
 8006cd0:	08006ca5 	.word	0x08006ca5
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006ca5 	.word	0x08006ca5
 8006cdc:	08006ca5 	.word	0x08006ca5
 8006ce0:	08006ca5 	.word	0x08006ca5
 8006ce4:	08006ca5 	.word	0x08006ca5
 8006ce8:	08006e35 	.word	0x08006e35
 8006cec:	08006d59 	.word	0x08006d59
 8006cf0:	08006e17 	.word	0x08006e17
 8006cf4:	08006ca5 	.word	0x08006ca5
 8006cf8:	08006ca5 	.word	0x08006ca5
 8006cfc:	08006e57 	.word	0x08006e57
 8006d00:	08006ca5 	.word	0x08006ca5
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006ca5 	.word	0x08006ca5
 8006d0c:	08006ca5 	.word	0x08006ca5
 8006d10:	08006e1f 	.word	0x08006e1f
 8006d14:	680b      	ldr	r3, [r1, #0]
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	600a      	str	r2, [r1, #0]
 8006d1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d24:	2301      	movs	r3, #1
 8006d26:	e0a3      	b.n	8006e70 <_printf_i+0x1f4>
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	6808      	ldr	r0, [r1, #0]
 8006d2c:	062e      	lsls	r6, r5, #24
 8006d2e:	f100 0304 	add.w	r3, r0, #4
 8006d32:	d50a      	bpl.n	8006d4a <_printf_i+0xce>
 8006d34:	6805      	ldr	r5, [r0, #0]
 8006d36:	600b      	str	r3, [r1, #0]
 8006d38:	2d00      	cmp	r5, #0
 8006d3a:	da03      	bge.n	8006d44 <_printf_i+0xc8>
 8006d3c:	232d      	movs	r3, #45	; 0x2d
 8006d3e:	426d      	negs	r5, r5
 8006d40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d44:	485e      	ldr	r0, [pc, #376]	; (8006ec0 <_printf_i+0x244>)
 8006d46:	230a      	movs	r3, #10
 8006d48:	e019      	b.n	8006d7e <_printf_i+0x102>
 8006d4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006d4e:	6805      	ldr	r5, [r0, #0]
 8006d50:	600b      	str	r3, [r1, #0]
 8006d52:	bf18      	it	ne
 8006d54:	b22d      	sxthne	r5, r5
 8006d56:	e7ef      	b.n	8006d38 <_printf_i+0xbc>
 8006d58:	680b      	ldr	r3, [r1, #0]
 8006d5a:	6825      	ldr	r5, [r4, #0]
 8006d5c:	1d18      	adds	r0, r3, #4
 8006d5e:	6008      	str	r0, [r1, #0]
 8006d60:	0628      	lsls	r0, r5, #24
 8006d62:	d501      	bpl.n	8006d68 <_printf_i+0xec>
 8006d64:	681d      	ldr	r5, [r3, #0]
 8006d66:	e002      	b.n	8006d6e <_printf_i+0xf2>
 8006d68:	0669      	lsls	r1, r5, #25
 8006d6a:	d5fb      	bpl.n	8006d64 <_printf_i+0xe8>
 8006d6c:	881d      	ldrh	r5, [r3, #0]
 8006d6e:	4854      	ldr	r0, [pc, #336]	; (8006ec0 <_printf_i+0x244>)
 8006d70:	2f6f      	cmp	r7, #111	; 0x6f
 8006d72:	bf0c      	ite	eq
 8006d74:	2308      	moveq	r3, #8
 8006d76:	230a      	movne	r3, #10
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d7e:	6866      	ldr	r6, [r4, #4]
 8006d80:	60a6      	str	r6, [r4, #8]
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	bfa2      	ittt	ge
 8006d86:	6821      	ldrge	r1, [r4, #0]
 8006d88:	f021 0104 	bicge.w	r1, r1, #4
 8006d8c:	6021      	strge	r1, [r4, #0]
 8006d8e:	b90d      	cbnz	r5, 8006d94 <_printf_i+0x118>
 8006d90:	2e00      	cmp	r6, #0
 8006d92:	d04d      	beq.n	8006e30 <_printf_i+0x1b4>
 8006d94:	4616      	mov	r6, r2
 8006d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8006d9e:	5dc7      	ldrb	r7, [r0, r7]
 8006da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006da4:	462f      	mov	r7, r5
 8006da6:	42bb      	cmp	r3, r7
 8006da8:	460d      	mov	r5, r1
 8006daa:	d9f4      	bls.n	8006d96 <_printf_i+0x11a>
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	d10b      	bne.n	8006dc8 <_printf_i+0x14c>
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	07df      	lsls	r7, r3, #31
 8006db4:	d508      	bpl.n	8006dc8 <_printf_i+0x14c>
 8006db6:	6923      	ldr	r3, [r4, #16]
 8006db8:	6861      	ldr	r1, [r4, #4]
 8006dba:	4299      	cmp	r1, r3
 8006dbc:	bfde      	ittt	le
 8006dbe:	2330      	movle	r3, #48	; 0x30
 8006dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dc8:	1b92      	subs	r2, r2, r6
 8006dca:	6122      	str	r2, [r4, #16]
 8006dcc:	f8cd a000 	str.w	sl, [sp]
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	aa03      	add	r2, sp, #12
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	4640      	mov	r0, r8
 8006dd8:	f7ff fee2 	bl	8006ba0 <_printf_common>
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d14c      	bne.n	8006e7a <_printf_i+0x1fe>
 8006de0:	f04f 30ff 	mov.w	r0, #4294967295
 8006de4:	b004      	add	sp, #16
 8006de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dea:	4835      	ldr	r0, [pc, #212]	; (8006ec0 <_printf_i+0x244>)
 8006dec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	680e      	ldr	r6, [r1, #0]
 8006df4:	061f      	lsls	r7, r3, #24
 8006df6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006dfa:	600e      	str	r6, [r1, #0]
 8006dfc:	d514      	bpl.n	8006e28 <_printf_i+0x1ac>
 8006dfe:	07d9      	lsls	r1, r3, #31
 8006e00:	bf44      	itt	mi
 8006e02:	f043 0320 	orrmi.w	r3, r3, #32
 8006e06:	6023      	strmi	r3, [r4, #0]
 8006e08:	b91d      	cbnz	r5, 8006e12 <_printf_i+0x196>
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	f023 0320 	bic.w	r3, r3, #32
 8006e10:	6023      	str	r3, [r4, #0]
 8006e12:	2310      	movs	r3, #16
 8006e14:	e7b0      	b.n	8006d78 <_printf_i+0xfc>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f043 0320 	orr.w	r3, r3, #32
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	2378      	movs	r3, #120	; 0x78
 8006e20:	4828      	ldr	r0, [pc, #160]	; (8006ec4 <_printf_i+0x248>)
 8006e22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e26:	e7e3      	b.n	8006df0 <_printf_i+0x174>
 8006e28:	065e      	lsls	r6, r3, #25
 8006e2a:	bf48      	it	mi
 8006e2c:	b2ad      	uxthmi	r5, r5
 8006e2e:	e7e6      	b.n	8006dfe <_printf_i+0x182>
 8006e30:	4616      	mov	r6, r2
 8006e32:	e7bb      	b.n	8006dac <_printf_i+0x130>
 8006e34:	680b      	ldr	r3, [r1, #0]
 8006e36:	6826      	ldr	r6, [r4, #0]
 8006e38:	6960      	ldr	r0, [r4, #20]
 8006e3a:	1d1d      	adds	r5, r3, #4
 8006e3c:	600d      	str	r5, [r1, #0]
 8006e3e:	0635      	lsls	r5, r6, #24
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	d501      	bpl.n	8006e48 <_printf_i+0x1cc>
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	e002      	b.n	8006e4e <_printf_i+0x1d2>
 8006e48:	0671      	lsls	r1, r6, #25
 8006e4a:	d5fb      	bpl.n	8006e44 <_printf_i+0x1c8>
 8006e4c:	8018      	strh	r0, [r3, #0]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6123      	str	r3, [r4, #16]
 8006e52:	4616      	mov	r6, r2
 8006e54:	e7ba      	b.n	8006dcc <_printf_i+0x150>
 8006e56:	680b      	ldr	r3, [r1, #0]
 8006e58:	1d1a      	adds	r2, r3, #4
 8006e5a:	600a      	str	r2, [r1, #0]
 8006e5c:	681e      	ldr	r6, [r3, #0]
 8006e5e:	6862      	ldr	r2, [r4, #4]
 8006e60:	2100      	movs	r1, #0
 8006e62:	4630      	mov	r0, r6
 8006e64:	f7f9 f9ec 	bl	8000240 <memchr>
 8006e68:	b108      	cbz	r0, 8006e6e <_printf_i+0x1f2>
 8006e6a:	1b80      	subs	r0, r0, r6
 8006e6c:	6060      	str	r0, [r4, #4]
 8006e6e:	6863      	ldr	r3, [r4, #4]
 8006e70:	6123      	str	r3, [r4, #16]
 8006e72:	2300      	movs	r3, #0
 8006e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e78:	e7a8      	b.n	8006dcc <_printf_i+0x150>
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	4632      	mov	r2, r6
 8006e7e:	4649      	mov	r1, r9
 8006e80:	4640      	mov	r0, r8
 8006e82:	47d0      	blx	sl
 8006e84:	3001      	adds	r0, #1
 8006e86:	d0ab      	beq.n	8006de0 <_printf_i+0x164>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	079b      	lsls	r3, r3, #30
 8006e8c:	d413      	bmi.n	8006eb6 <_printf_i+0x23a>
 8006e8e:	68e0      	ldr	r0, [r4, #12]
 8006e90:	9b03      	ldr	r3, [sp, #12]
 8006e92:	4298      	cmp	r0, r3
 8006e94:	bfb8      	it	lt
 8006e96:	4618      	movlt	r0, r3
 8006e98:	e7a4      	b.n	8006de4 <_printf_i+0x168>
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	4632      	mov	r2, r6
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	4640      	mov	r0, r8
 8006ea2:	47d0      	blx	sl
 8006ea4:	3001      	adds	r0, #1
 8006ea6:	d09b      	beq.n	8006de0 <_printf_i+0x164>
 8006ea8:	3501      	adds	r5, #1
 8006eaa:	68e3      	ldr	r3, [r4, #12]
 8006eac:	9903      	ldr	r1, [sp, #12]
 8006eae:	1a5b      	subs	r3, r3, r1
 8006eb0:	42ab      	cmp	r3, r5
 8006eb2:	dcf2      	bgt.n	8006e9a <_printf_i+0x21e>
 8006eb4:	e7eb      	b.n	8006e8e <_printf_i+0x212>
 8006eb6:	2500      	movs	r5, #0
 8006eb8:	f104 0619 	add.w	r6, r4, #25
 8006ebc:	e7f5      	b.n	8006eaa <_printf_i+0x22e>
 8006ebe:	bf00      	nop
 8006ec0:	08007331 	.word	0x08007331
 8006ec4:	08007342 	.word	0x08007342

08006ec8 <_sbrk_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4d06      	ldr	r5, [pc, #24]	; (8006ee4 <_sbrk_r+0x1c>)
 8006ecc:	2300      	movs	r3, #0
 8006ece:	4604      	mov	r4, r0
 8006ed0:	4608      	mov	r0, r1
 8006ed2:	602b      	str	r3, [r5, #0]
 8006ed4:	f7fa fb0c 	bl	80014f0 <_sbrk>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_sbrk_r+0x1a>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_sbrk_r+0x1a>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200001f8 	.word	0x200001f8

08006ee8 <__sread>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	460c      	mov	r4, r1
 8006eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef0:	f000 f8a0 	bl	8007034 <_read_r>
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	bfab      	itete	ge
 8006ef8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006efa:	89a3      	ldrhlt	r3, [r4, #12]
 8006efc:	181b      	addge	r3, r3, r0
 8006efe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f02:	bfac      	ite	ge
 8006f04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f06:	81a3      	strhlt	r3, [r4, #12]
 8006f08:	bd10      	pop	{r4, pc}

08006f0a <__swrite>:
 8006f0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0e:	461f      	mov	r7, r3
 8006f10:	898b      	ldrh	r3, [r1, #12]
 8006f12:	05db      	lsls	r3, r3, #23
 8006f14:	4605      	mov	r5, r0
 8006f16:	460c      	mov	r4, r1
 8006f18:	4616      	mov	r6, r2
 8006f1a:	d505      	bpl.n	8006f28 <__swrite+0x1e>
 8006f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f20:	2302      	movs	r3, #2
 8006f22:	2200      	movs	r2, #0
 8006f24:	f000 f868 	bl	8006ff8 <_lseek_r>
 8006f28:	89a3      	ldrh	r3, [r4, #12]
 8006f2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f32:	81a3      	strh	r3, [r4, #12]
 8006f34:	4632      	mov	r2, r6
 8006f36:	463b      	mov	r3, r7
 8006f38:	4628      	mov	r0, r5
 8006f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3e:	f000 b817 	b.w	8006f70 <_write_r>

08006f42 <__sseek>:
 8006f42:	b510      	push	{r4, lr}
 8006f44:	460c      	mov	r4, r1
 8006f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f4a:	f000 f855 	bl	8006ff8 <_lseek_r>
 8006f4e:	1c43      	adds	r3, r0, #1
 8006f50:	89a3      	ldrh	r3, [r4, #12]
 8006f52:	bf15      	itete	ne
 8006f54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f5e:	81a3      	strheq	r3, [r4, #12]
 8006f60:	bf18      	it	ne
 8006f62:	81a3      	strhne	r3, [r4, #12]
 8006f64:	bd10      	pop	{r4, pc}

08006f66 <__sclose>:
 8006f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f6a:	f000 b813 	b.w	8006f94 <_close_r>
	...

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	; (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7fa fa65 	bl	800144e <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	200001f8 	.word	0x200001f8

08006f94 <_close_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	; (8006fb0 <_close_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa fa71 	bl	8001486 <_close>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_close_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_close_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200001f8 	.word	0x200001f8

08006fb4 <_fstat_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4d07      	ldr	r5, [pc, #28]	; (8006fd4 <_fstat_r+0x20>)
 8006fb8:	2300      	movs	r3, #0
 8006fba:	4604      	mov	r4, r0
 8006fbc:	4608      	mov	r0, r1
 8006fbe:	4611      	mov	r1, r2
 8006fc0:	602b      	str	r3, [r5, #0]
 8006fc2:	f7fa fa6c 	bl	800149e <_fstat>
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d102      	bne.n	8006fd0 <_fstat_r+0x1c>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	b103      	cbz	r3, 8006fd0 <_fstat_r+0x1c>
 8006fce:	6023      	str	r3, [r4, #0]
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200001f8 	.word	0x200001f8

08006fd8 <_isatty_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_isatty_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fa6b 	bl	80014be <_isatty>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_isatty_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_isatty_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	200001f8 	.word	0x200001f8

08006ff8 <_lseek_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4d07      	ldr	r5, [pc, #28]	; (8007018 <_lseek_r+0x20>)
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	4608      	mov	r0, r1
 8007000:	4611      	mov	r1, r2
 8007002:	2200      	movs	r2, #0
 8007004:	602a      	str	r2, [r5, #0]
 8007006:	461a      	mov	r2, r3
 8007008:	f7fa fa64 	bl	80014d4 <_lseek>
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d102      	bne.n	8007016 <_lseek_r+0x1e>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	b103      	cbz	r3, 8007016 <_lseek_r+0x1e>
 8007014:	6023      	str	r3, [r4, #0]
 8007016:	bd38      	pop	{r3, r4, r5, pc}
 8007018:	200001f8 	.word	0x200001f8

0800701c <__malloc_lock>:
 800701c:	4801      	ldr	r0, [pc, #4]	; (8007024 <__malloc_lock+0x8>)
 800701e:	f7ff bb55 	b.w	80066cc <__retarget_lock_acquire_recursive>
 8007022:	bf00      	nop
 8007024:	200001f0 	.word	0x200001f0

08007028 <__malloc_unlock>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__malloc_unlock+0x8>)
 800702a:	f7ff bb50 	b.w	80066ce <__retarget_lock_release_recursive>
 800702e:	bf00      	nop
 8007030:	200001f0 	.word	0x200001f0

08007034 <_read_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4d07      	ldr	r5, [pc, #28]	; (8007054 <_read_r+0x20>)
 8007038:	4604      	mov	r4, r0
 800703a:	4608      	mov	r0, r1
 800703c:	4611      	mov	r1, r2
 800703e:	2200      	movs	r2, #0
 8007040:	602a      	str	r2, [r5, #0]
 8007042:	461a      	mov	r2, r3
 8007044:	f7fa f9e6 	bl	8001414 <_read>
 8007048:	1c43      	adds	r3, r0, #1
 800704a:	d102      	bne.n	8007052 <_read_r+0x1e>
 800704c:	682b      	ldr	r3, [r5, #0]
 800704e:	b103      	cbz	r3, 8007052 <_read_r+0x1e>
 8007050:	6023      	str	r3, [r4, #0]
 8007052:	bd38      	pop	{r3, r4, r5, pc}
 8007054:	200001f8 	.word	0x200001f8

08007058 <_init>:
 8007058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705a:	bf00      	nop
 800705c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800705e:	bc08      	pop	{r3}
 8007060:	469e      	mov	lr, r3
 8007062:	4770      	bx	lr

08007064 <_fini>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	bf00      	nop
 8007068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800706a:	bc08      	pop	{r3}
 800706c:	469e      	mov	lr, r3
 800706e:	4770      	bx	lr
